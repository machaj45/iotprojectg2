ARM GAS  /tmp/cccTYOyd.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32l4xx_hal_pwr.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.HAL_PWR_DeInit,"ax",%progbits
  18              		.align	1
  19              		.global	HAL_PWR_DeInit
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	HAL_PWR_DeInit:
  26              	.LFB123:
  27              		.file 1 "../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c"
   1:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** /**
   2:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   ******************************************************************************
   3:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @file    stm32l4xx_hal_pwr.c
   4:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @author  MCD Application Team
   5:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @brief   PWR HAL module driver.
   6:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *          This file provides firmware functions to manage the following
   7:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *          functionalities of the Power Controller (PWR) peripheral:
   8:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *           + Initialization/de-initialization functions
   9:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *           + Peripheral Control functions
  10:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *
  11:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   ******************************************************************************
  12:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @attention
  13:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *
  14:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * <h2><center>&copy; COPYRIGHT(c) 2017 STMicroelectronics</center></h2>
  15:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *
  16:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * Redistribution and use in source and binary forms, with or without modification,
  17:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * are permitted provided that the following conditions are met:
  18:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  19:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *      this list of conditions and the following disclaimer.
  20:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  21:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *      this list of conditions and the following disclaimer in the documentation
  22:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *      and/or other materials provided with the distribution.
  23:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  24:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *      may be used to endorse or promote products derived from this software
  25:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *      without specific prior written permission.
  26:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *
  27:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  28:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  29:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  30:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  31:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
ARM GAS  /tmp/cccTYOyd.s 			page 2


  32:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  33:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  34:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  35:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  36:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  37:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *
  38:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   ******************************************************************************
  39:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   */
  40:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
  41:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** /* Includes ------------------------------------------------------------------*/
  42:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** #include "stm32l4xx_hal.h"
  43:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
  44:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** /** @addtogroup STM32L4xx_HAL_Driver
  45:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @{
  46:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   */
  47:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
  48:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** /** @defgroup PWR PWR
  49:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @brief PWR HAL module driver
  50:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @{
  51:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   */
  52:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
  53:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** #ifdef HAL_PWR_MODULE_ENABLED
  54:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
  55:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** /* Private typedef -----------------------------------------------------------*/
  56:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** /* Private define ------------------------------------------------------------*/
  57:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
  58:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** /** @defgroup PWR_Private_Defines PWR Private Defines
  59:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @{
  60:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   */
  61:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
  62:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** /** @defgroup PWR_PVD_Mode_Mask PWR PVD Mode Mask
  63:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @{
  64:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   */
  65:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** #define PVD_MODE_IT               ((uint32_t)0x00010000)  /*!< Mask for interruption yielded by PVD
  66:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** #define PVD_MODE_EVT              ((uint32_t)0x00020000)  /*!< Mask for event yielded by PVD thresh
  67:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** #define PVD_RISING_EDGE           ((uint32_t)0x00000001)  /*!< Mask for rising edge set as PVD trig
  68:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** #define PVD_FALLING_EDGE          ((uint32_t)0x00000002)  /*!< Mask for falling edge set as PVD tri
  69:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** /**
  70:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @}
  71:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   */
  72:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
  73:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** /**
  74:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @}
  75:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   */
  76:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
  77:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** /* Private macro -------------------------------------------------------------*/
  78:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** /* Private variables ---------------------------------------------------------*/
  79:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** /* Private function prototypes -----------------------------------------------*/
  80:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** /* Exported functions --------------------------------------------------------*/
  81:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
  82:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** /** @defgroup PWR_Exported_Functions PWR Exported Functions
  83:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @{
  84:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   */
  85:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
  86:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** /** @defgroup PWR_Exported_Functions_Group1 Initialization and de-initialization functions
  87:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *  @brief    Initialization and de-initialization functions
  88:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *
ARM GAS  /tmp/cccTYOyd.s 			page 3


  89:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** @verbatim
  90:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****  ===============================================================================
  91:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****               ##### Initialization and de-initialization functions #####
  92:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****  ===============================================================================
  93:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****     [..]
  94:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
  95:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** @endverbatim
  96:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @{
  97:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   */
  98:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
  99:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** /**
 100:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @brief Deinitialize the HAL PWR peripheral registers to their default reset values.
 101:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @retval None
 102:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   */
 103:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** void HAL_PWR_DeInit(void)
 104:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** {
  28              		.loc 1 104 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
 105:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   __HAL_RCC_PWR_FORCE_RESET();
  33              		.loc 1 105 0
  34 0000 044B     		ldr	r3, .L2
  35 0002 9A6B     		ldr	r2, [r3, #56]
  36 0004 42F08052 		orr	r2, r2, #268435456
  37 0008 9A63     		str	r2, [r3, #56]
 106:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   __HAL_RCC_PWR_RELEASE_RESET();
  38              		.loc 1 106 0
  39 000a 9A6B     		ldr	r2, [r3, #56]
  40 000c 22F08052 		bic	r2, r2, #268435456
  41 0010 9A63     		str	r2, [r3, #56]
  42 0012 7047     		bx	lr
  43              	.L3:
  44              		.align	2
  45              	.L2:
  46 0014 00100240 		.word	1073876992
  47              		.cfi_endproc
  48              	.LFE123:
  50              		.section	.text.HAL_PWR_EnableBkUpAccess,"ax",%progbits
  51              		.align	1
  52              		.global	HAL_PWR_EnableBkUpAccess
  53              		.syntax unified
  54              		.thumb
  55              		.thumb_func
  56              		.fpu fpv4-sp-d16
  58              	HAL_PWR_EnableBkUpAccess:
  59              	.LFB124:
 107:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** }
 108:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 109:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** /**
 110:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @brief Enable access to the backup domain
 111:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *        (RTC registers, RTC backup data registers).
 112:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @note  After reset, the backup domain is protected against
 113:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *        possible unwanted write accesses.
 114:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @note  RTCSEL that sets the RTC clock source selection is in the RTC back-up domain.
 115:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *        In order to set or modify the RTC clock, the backup domain access must be
ARM GAS  /tmp/cccTYOyd.s 			page 4


 116:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *        disabled.
 117:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
 118:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *        back-up domain.
 119:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @retval None
 120:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   */
 121:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** void HAL_PWR_EnableBkUpAccess(void)
 122:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** {
  60              		.loc 1 122 0
  61              		.cfi_startproc
  62              		@ args = 0, pretend = 0, frame = 0
  63              		@ frame_needed = 0, uses_anonymous_args = 0
  64              		@ link register save eliminated.
 123:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   SET_BIT(PWR->CR1, PWR_CR1_DBP);
  65              		.loc 1 123 0
  66 0000 024A     		ldr	r2, .L5
  67 0002 1368     		ldr	r3, [r2]
  68 0004 43F48073 		orr	r3, r3, #256
  69 0008 1360     		str	r3, [r2]
  70 000a 7047     		bx	lr
  71              	.L6:
  72              		.align	2
  73              	.L5:
  74 000c 00700040 		.word	1073770496
  75              		.cfi_endproc
  76              	.LFE124:
  78              		.section	.text.HAL_PWR_DisableBkUpAccess,"ax",%progbits
  79              		.align	1
  80              		.global	HAL_PWR_DisableBkUpAccess
  81              		.syntax unified
  82              		.thumb
  83              		.thumb_func
  84              		.fpu fpv4-sp-d16
  86              	HAL_PWR_DisableBkUpAccess:
  87              	.LFB125:
 124:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** }
 125:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 126:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** /**
 127:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @brief Disable access to the backup domain
 128:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *        (RTC registers, RTC backup data registers).
 129:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @retval None
 130:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   */
 131:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** void HAL_PWR_DisableBkUpAccess(void)
 132:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** {
  88              		.loc 1 132 0
  89              		.cfi_startproc
  90              		@ args = 0, pretend = 0, frame = 0
  91              		@ frame_needed = 0, uses_anonymous_args = 0
  92              		@ link register save eliminated.
 133:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   CLEAR_BIT(PWR->CR1, PWR_CR1_DBP);
  93              		.loc 1 133 0
  94 0000 024A     		ldr	r2, .L8
  95 0002 1368     		ldr	r3, [r2]
  96 0004 23F48073 		bic	r3, r3, #256
  97 0008 1360     		str	r3, [r2]
  98 000a 7047     		bx	lr
  99              	.L9:
 100              		.align	2
ARM GAS  /tmp/cccTYOyd.s 			page 5


 101              	.L8:
 102 000c 00700040 		.word	1073770496
 103              		.cfi_endproc
 104              	.LFE125:
 106              		.section	.text.HAL_PWR_ConfigPVD,"ax",%progbits
 107              		.align	1
 108              		.global	HAL_PWR_ConfigPVD
 109              		.syntax unified
 110              		.thumb
 111              		.thumb_func
 112              		.fpu fpv4-sp-d16
 114              	HAL_PWR_ConfigPVD:
 115              	.LFB126:
 134:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** }
 135:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 136:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 137:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 138:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 139:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** /**
 140:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @}
 141:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   */
 142:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 143:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 144:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 145:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** /** @defgroup PWR_Exported_Functions_Group2 Peripheral Control functions
 146:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *  @brief Low Power modes configuration functions
 147:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *
 148:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** @verbatim
 149:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 150:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****  ===============================================================================
 151:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****                  ##### Peripheral Control functions #####
 152:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****  ===============================================================================
 153:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 154:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****      [..]
 155:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****      *** PVD configuration ***
 156:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****     =========================
 157:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****     [..]
 158:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****       (+) The PVD is used to monitor the VDD power supply by comparing it to a
 159:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****           threshold selected by the PVD Level (PLS[2:0] bits in PWR_CR2 register).
 160:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 161:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****       (+) PVDO flag is available to indicate if VDD/VDDA is higher or lower
 162:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****           than the PVD threshold. This event is internally connected to the EXTI
 163:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****           line16 and can generate an interrupt if enabled. This is done through
 164:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****           __HAL_PVD_EXTI_ENABLE_IT() macro.
 165:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****       (+) The PVD is stopped in Standby mode.
 166:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 167:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 168:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****     *** WakeUp pin configuration ***
 169:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****     ================================
 170:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****     [..]
 171:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****       (+) WakeUp pins are used to wakeup the system from Standby mode or Shutdown mode.
 172:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****           The polarity of these pins can be set to configure event detection on high
 173:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****           level (rising edge) or low level (falling edge).
 174:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 175:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 176:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 177:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****     *** Low Power modes configuration ***
ARM GAS  /tmp/cccTYOyd.s 			page 6


 178:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****     =====================================
 179:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****     [..]
 180:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****       The devices feature 8 low-power modes:
 181:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****       (+) Low-power Run mode: core and peripherals are running, main regulator off, low power regul
 182:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****       (+) Sleep mode: Cortex-M4 core stopped, peripherals kept running, main and low power regulato
 183:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****       (+) Low-power Sleep mode: Cortex-M4 core stopped, peripherals kept running, main regulator of
 184:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****       (+) Stop 0 mode: all clocks are stopped except LSI and LSE, main and low power regulators on.
 185:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****       (+) Stop 1 mode: all clocks are stopped except LSI and LSE, main regulator off, low power reg
 186:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****       (+) Stop 2 mode: all clocks are stopped except LSI and LSE, main regulator off, low power reg
 187:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****       (+) Standby mode with SRAM2: all clocks are stopped except LSI and LSE, SRAM2 content preserv
 188:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****       (+) Standby mode without SRAM2: all clocks are stopped except LSI and LSE, main and low power
 189:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****       (+) Shutdown mode: all clocks are stopped except LSE, main and low power regulators off.
 190:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 191:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 192:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****    *** Low-power run mode ***
 193:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****    ==========================
 194:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****     [..]
 195:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****       (+) Entry: (from main run mode)
 196:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****         (++) set LPR bit with HAL_PWREx_EnableLowPowerRunMode() API after having decreased the syst
 197:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 198:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****       (+) Exit:
 199:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****         (++) clear LPR bit then wait for REGLP bit to be reset with HAL_PWREx_DisableLowPowerRunMod
 200:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****              then can the system clock frequency be increased above 2 MHz.
 201:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 202:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 203:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****    *** Sleep mode / Low-power sleep mode ***
 204:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****    =========================================
 205:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****     [..]
 206:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****       (+) Entry:
 207:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****           The Sleep mode / Low-power Sleep mode is entered thru HAL_PWR_EnterSLEEPMode() API
 208:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****           in specifying whether or not the regulator is forced to low-power mode and if exit is int
 209:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****           (++) PWR_MAINREGULATOR_ON: Sleep mode (regulator in main mode).
 210:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****           (++) PWR_LOWPOWERREGULATOR_ON: Low-power sleep (regulator in low power mode).
 211:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****           In the latter case, the system clock frequency must have been decreased below 2 MHz befor
 212:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****           (++) PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
 213:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****           (++) PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
 214:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 215:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****       (+) WFI Exit:
 216:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****         (++) Any peripheral interrupt acknowledged by the nested vectored interrupt
 217:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****              controller (NVIC) or any wake-up event.
 218:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 219:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****       (+) WFE Exit:
 220:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****         (++) Any wake-up event such as an EXTI line configured in event mode.
 221:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 222:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****          [..] When exiting the Low-power sleep mode by issuing an interrupt or a wakeup event,
 223:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****              the MCU is in Low-power Run mode.
 224:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 225:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****    *** Stop 0, Stop 1 and Stop 2 modes ***
 226:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****    ===============================
 227:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****     [..]
 228:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****       (+) Entry:
 229:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****           The Stop 0, Stop 1 or Stop 2 modes are entered thru the following API's:
 230:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****           (++) HAL_PWREx_EnterSTOP0Mode() for mode 0 or HAL_PWREx_EnterSTOP1Mode() for mode 1 or fo
 231:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****           (++) HAL_PWREx_EnterSTOP2Mode() for mode 2.
 232:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****       (+) Regulator setting (applicable to HAL_PWR_EnterSTOPMode() only):
 233:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****           (++) PWR_MAINREGULATOR_ON
 234:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****           (++) PWR_LOWPOWERREGULATOR_ON
ARM GAS  /tmp/cccTYOyd.s 			page 7


 235:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****       (+) Exit (interrupt or event-triggered, specified when entering STOP mode):
 236:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****           (++) PWR_STOPENTRY_WFI: enter Stop mode with WFI instruction
 237:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****           (++) PWR_STOPENTRY_WFE: enter Stop mode with WFE instruction
 238:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 239:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****       (+) WFI Exit:
 240:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****           (++) Any EXTI Line (Internal or External) configured in Interrupt mode.
 241:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****           (++) Some specific communication peripherals (USART, LPUART, I2C) interrupts
 242:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****                when programmed in wakeup mode.
 243:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****       (+) WFE Exit:
 244:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****           (++) Any EXTI Line (Internal or External) configured in Event mode.
 245:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 246:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****        [..]
 247:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****           When exiting Stop 0 and Stop 1 modes, the MCU is either in Run mode or in Low-power Run m
 248:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****           depending on the LPR bit setting.
 249:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****           When exiting Stop 2 mode, the MCU is in Run mode.
 250:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 251:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****    *** Standby mode ***
 252:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****    ====================
 253:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****      [..]
 254:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****       The Standby mode offers two options:
 255:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****       (+) option a) all clocks off except LSI and LSE, RRS bit set (keeps voltage regulator in low 
 256:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****         SRAM and registers contents are lost except for the SRAM2 content, the RTC registers, RTC b
 257:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****         and Standby circuitry.
 258:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****       (+) option b) all clocks off except LSI and LSE, RRS bit cleared (voltage regulator then disa
 259:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****         SRAM and register contents are lost except for the RTC registers, RTC backup registers
 260:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****         and Standby circuitry.
 261:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 262:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****       (++) Entry:
 263:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****           (+++) The Standby mode is entered thru HAL_PWR_EnterSTANDBYMode() API.
 264:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****                 SRAM1 and register contents are lost except for registers in the Backup domain and
 265:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****                 Standby circuitry. SRAM2 content can be preserved if the bit RRS is set in PWR_CR3 
 266:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****                 To enable this feature, the user can resort to HAL_PWREx_EnableSRAM2ContentRetentio
 267:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****                 to set RRS bit.
 268:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 269:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****       (++) Exit:
 270:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****           (+++) WKUP pin rising edge, RTC alarm or wakeup, tamper event, time-stamp event,
 271:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****                 external reset in NRST pin, IWDG reset.
 272:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 273:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****       [..]    After waking up from Standby mode, program execution restarts in the same way as afte
 274:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 275:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 276:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****     *** Shutdown mode ***
 277:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****    ======================
 278:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****      [..]
 279:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****       In Shutdown mode,
 280:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****         voltage regulator is disabled, all clocks are off except LSE, RRS bit is cleared.
 281:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****         SRAM and registers contents are lost except for backup domain registers.
 282:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 283:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****       (+) Entry:
 284:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****           The Shutdown mode is entered thru HAL_PWREx_EnterSHUTDOWNMode() API.
 285:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 286:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****       (+) Exit:
 287:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****           (++) WKUP pin rising edge, RTC alarm or wakeup, tamper event, time-stamp event,
 288:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****                external reset in NRST pin.
 289:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 290:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****          [..] After waking up from Shutdown mode, program execution restarts in the same way as aft
 291:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
ARM GAS  /tmp/cccTYOyd.s 			page 8


 292:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 293:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****    *** Auto-wakeup (AWU) from low-power mode ***
 294:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****    =============================================
 295:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****     [..]
 296:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****       The MCU can be woken up from low-power mode by an RTC Alarm event, an RTC
 297:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****       Wakeup event, a tamper event or a time-stamp event, without depending on
 298:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****       an external interrupt (Auto-wakeup mode).
 299:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 300:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****       (+) RTC auto-wakeup (AWU) from the Stop, Standby and Shutdown modes
 301:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 302:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 303:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****         (++) To wake up from the Stop mode with an RTC alarm event, it is necessary to
 304:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****              configure the RTC to generate the RTC alarm using the HAL_RTC_SetAlarm_IT() function.
 305:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 306:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****         (++) To wake up from the Stop mode with an RTC Tamper or time stamp event, it
 307:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****              is necessary to configure the RTC to detect the tamper or time stamp event using the
 308:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****              HAL_RTCEx_SetTimeStamp_IT() or HAL_RTCEx_SetTamper_IT() functions.
 309:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 310:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****         (++) To wake up from the Stop mode with an RTC WakeUp event, it is necessary to
 311:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****               configure the RTC to generate the RTC WakeUp event using the HAL_RTCEx_SetWakeUpTimer
 312:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 313:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** @endverbatim
 314:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @{
 315:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   */
 316:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 317:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 318:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 319:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** /**
 320:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @brief Configure the voltage threshold detected by the Power Voltage Detector (PVD).
 321:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @param sConfigPVD: pointer to a PWR_PVDTypeDef structure that contains the PVD
 322:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *        configuration information.
 323:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @note Refer to the electrical characteristics of your device datasheet for
 324:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *         more details about the voltage thresholds corresponding to each
 325:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *         detection level.
 326:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @retval None
 327:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   */
 328:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
 329:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** {
 116              		.loc 1 329 0
 117              		.cfi_startproc
 118              		@ args = 0, pretend = 0, frame = 0
 119              		@ frame_needed = 0, uses_anonymous_args = 0
 120              		@ link register save eliminated.
 121              	.LVL0:
 330:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   /* Check the parameters */
 331:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
 332:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));
 333:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 334:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   /* Set PLS bits according to PVDLevel value */
 335:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 122              		.loc 1 335 0
 123 0000 1E4A     		ldr	r2, .L15
 124 0002 5368     		ldr	r3, [r2, #4]
 125 0004 23F00E03 		bic	r3, r3, #14
 126 0008 0168     		ldr	r1, [r0]
 127 000a 0B43     		orrs	r3, r3, r1
 128 000c 5360     		str	r3, [r2, #4]
ARM GAS  /tmp/cccTYOyd.s 			page 9


 336:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 337:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   /* Clear any previous config. Keep it clear if no event or IT mode is selected */
 338:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 129              		.loc 1 338 0
 130 000e 1C4B     		ldr	r3, .L15+4
 131 0010 5A68     		ldr	r2, [r3, #4]
 132 0012 22F48032 		bic	r2, r2, #65536
 133 0016 5A60     		str	r2, [r3, #4]
 339:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   __HAL_PWR_PVD_EXTI_DISABLE_IT();
 134              		.loc 1 339 0
 135 0018 1A68     		ldr	r2, [r3]
 136 001a 22F48032 		bic	r2, r2, #65536
 137 001e 1A60     		str	r2, [r3]
 340:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 138              		.loc 1 340 0
 139 0020 DA68     		ldr	r2, [r3, #12]
 140 0022 22F48032 		bic	r2, r2, #65536
 141 0026 DA60     		str	r2, [r3, #12]
 341:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 142              		.loc 1 341 0
 143 0028 9A68     		ldr	r2, [r3, #8]
 144 002a 22F48032 		bic	r2, r2, #65536
 145 002e 9A60     		str	r2, [r3, #8]
 342:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 343:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   /* Configure interrupt mode */
 344:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 146              		.loc 1 344 0
 147 0030 4368     		ldr	r3, [r0, #4]
 148 0032 13F4803F 		tst	r3, #65536
 149 0036 04D0     		beq	.L11
 345:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   {
 346:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****     __HAL_PWR_PVD_EXTI_ENABLE_IT();
 150              		.loc 1 346 0
 151 0038 114A     		ldr	r2, .L15+4
 152 003a 1368     		ldr	r3, [r2]
 153 003c 43F48033 		orr	r3, r3, #65536
 154 0040 1360     		str	r3, [r2]
 155              	.L11:
 347:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   }
 348:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 349:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   /* Configure event mode */
 350:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 156              		.loc 1 350 0
 157 0042 4368     		ldr	r3, [r0, #4]
 158 0044 13F4003F 		tst	r3, #131072
 159 0048 04D0     		beq	.L12
 351:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   {
 352:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****     __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 160              		.loc 1 352 0
 161 004a 0D4A     		ldr	r2, .L15+4
 162 004c 5368     		ldr	r3, [r2, #4]
 163 004e 43F48033 		orr	r3, r3, #65536
 164 0052 5360     		str	r3, [r2, #4]
 165              	.L12:
 353:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   }
 354:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 355:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   /* Configure the edge */
ARM GAS  /tmp/cccTYOyd.s 			page 10


 356:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 166              		.loc 1 356 0
 167 0054 4368     		ldr	r3, [r0, #4]
 168 0056 13F0010F 		tst	r3, #1
 169 005a 04D0     		beq	.L13
 357:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   {
 358:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****     __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 170              		.loc 1 358 0
 171 005c 084A     		ldr	r2, .L15+4
 172 005e 9368     		ldr	r3, [r2, #8]
 173 0060 43F48033 		orr	r3, r3, #65536
 174 0064 9360     		str	r3, [r2, #8]
 175              	.L13:
 359:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   }
 360:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 361:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 176              		.loc 1 361 0
 177 0066 4368     		ldr	r3, [r0, #4]
 178 0068 13F0020F 		tst	r3, #2
 179 006c 04D0     		beq	.L14
 362:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   {
 363:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****     __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 180              		.loc 1 363 0
 181 006e 044A     		ldr	r2, .L15+4
 182 0070 D368     		ldr	r3, [r2, #12]
 183 0072 43F48033 		orr	r3, r3, #65536
 184 0076 D360     		str	r3, [r2, #12]
 185              	.L14:
 364:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   }
 365:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 366:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   return HAL_OK;
 367:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** }
 186              		.loc 1 367 0
 187 0078 0020     		movs	r0, #0
 188              	.LVL1:
 189 007a 7047     		bx	lr
 190              	.L16:
 191              		.align	2
 192              	.L15:
 193 007c 00700040 		.word	1073770496
 194 0080 00040140 		.word	1073808384
 195              		.cfi_endproc
 196              	.LFE126:
 198              		.section	.text.HAL_PWR_EnablePVD,"ax",%progbits
 199              		.align	1
 200              		.global	HAL_PWR_EnablePVD
 201              		.syntax unified
 202              		.thumb
 203              		.thumb_func
 204              		.fpu fpv4-sp-d16
 206              	HAL_PWR_EnablePVD:
 207              	.LFB127:
 368:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 369:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 370:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** /**
 371:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @brief Enable the Power Voltage Detector (PVD).
 372:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @retval None
ARM GAS  /tmp/cccTYOyd.s 			page 11


 373:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   */
 374:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** void HAL_PWR_EnablePVD(void)
 375:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** {
 208              		.loc 1 375 0
 209              		.cfi_startproc
 210              		@ args = 0, pretend = 0, frame = 0
 211              		@ frame_needed = 0, uses_anonymous_args = 0
 212              		@ link register save eliminated.
 376:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 213              		.loc 1 376 0
 214 0000 024A     		ldr	r2, .L18
 215 0002 5368     		ldr	r3, [r2, #4]
 216 0004 43F00103 		orr	r3, r3, #1
 217 0008 5360     		str	r3, [r2, #4]
 218 000a 7047     		bx	lr
 219              	.L19:
 220              		.align	2
 221              	.L18:
 222 000c 00700040 		.word	1073770496
 223              		.cfi_endproc
 224              	.LFE127:
 226              		.section	.text.HAL_PWR_DisablePVD,"ax",%progbits
 227              		.align	1
 228              		.global	HAL_PWR_DisablePVD
 229              		.syntax unified
 230              		.thumb
 231              		.thumb_func
 232              		.fpu fpv4-sp-d16
 234              	HAL_PWR_DisablePVD:
 235              	.LFB128:
 377:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** }
 378:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 379:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** /**
 380:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @brief Disable the Power Voltage Detector (PVD).
 381:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @retval None
 382:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   */
 383:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** void HAL_PWR_DisablePVD(void)
 384:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** {
 236              		.loc 1 384 0
 237              		.cfi_startproc
 238              		@ args = 0, pretend = 0, frame = 0
 239              		@ frame_needed = 0, uses_anonymous_args = 0
 240              		@ link register save eliminated.
 385:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   CLEAR_BIT(PWR->CR2, PWR_CR2_PVDE);
 241              		.loc 1 385 0
 242 0000 024A     		ldr	r2, .L21
 243 0002 5368     		ldr	r3, [r2, #4]
 244 0004 23F00103 		bic	r3, r3, #1
 245 0008 5360     		str	r3, [r2, #4]
 246 000a 7047     		bx	lr
 247              	.L22:
 248              		.align	2
 249              	.L21:
 250 000c 00700040 		.word	1073770496
 251              		.cfi_endproc
 252              	.LFE128:
 254              		.section	.text.HAL_PWR_EnableWakeUpPin,"ax",%progbits
ARM GAS  /tmp/cccTYOyd.s 			page 12


 255              		.align	1
 256              		.global	HAL_PWR_EnableWakeUpPin
 257              		.syntax unified
 258              		.thumb
 259              		.thumb_func
 260              		.fpu fpv4-sp-d16
 262              	HAL_PWR_EnableWakeUpPin:
 263              	.LFB129:
 386:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** }
 387:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 388:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 389:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 390:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 391:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** /**
 392:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @brief Enable the WakeUp PINx functionality.
 393:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @param WakeUpPinPolarity: Specifies which Wake-Up pin to enable.
 394:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *         This parameter can be one of the following legacy values which set the default polarity
 395:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *         i.e. detection on high level (rising edge):
 396:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *           @arg @ref PWR_WAKEUP_PIN1, PWR_WAKEUP_PIN2, PWR_WAKEUP_PIN3, PWR_WAKEUP_PIN4, PWR_WAK
 397:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *
 398:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *         or one of the following value where the user can explicitly specify the enabled pin and
 399:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *         the chosen polarity:
 400:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *           @arg @ref PWR_WAKEUP_PIN1_HIGH or PWR_WAKEUP_PIN1_LOW
 401:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *           @arg @ref PWR_WAKEUP_PIN2_HIGH or PWR_WAKEUP_PIN2_LOW
 402:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *           @arg @ref PWR_WAKEUP_PIN3_HIGH or PWR_WAKEUP_PIN3_LOW
 403:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *           @arg @ref PWR_WAKEUP_PIN4_HIGH or PWR_WAKEUP_PIN4_LOW
 404:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *           @arg @ref PWR_WAKEUP_PIN5_HIGH or PWR_WAKEUP_PIN5_LOW
 405:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @note  PWR_WAKEUP_PINx and PWR_WAKEUP_PINx_HIGH are equivalent.
 406:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @retval None
 407:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   */
 408:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinPolarity)
 409:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** {
 264              		.loc 1 409 0
 265              		.cfi_startproc
 266              		@ args = 0, pretend = 0, frame = 0
 267              		@ frame_needed = 0, uses_anonymous_args = 0
 268              		@ link register save eliminated.
 269              	.LVL2:
 410:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinPolarity));
 411:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 412:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   /* Specifies the Wake-Up pin polarity for the event detection
 413:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****     (rising or falling edge) */
 414:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   MODIFY_REG(PWR->CR4, (PWR_CR3_EWUP & WakeUpPinPolarity), (WakeUpPinPolarity >> PWR_WUP_POLARITY_S
 270              		.loc 1 414 0
 271 0000 064A     		ldr	r2, .L24
 272 0002 D368     		ldr	r3, [r2, #12]
 273 0004 00F01F01 		and	r1, r0, #31
 274 0008 23EA0103 		bic	r3, r3, r1
 275 000c 43EA5010 		orr	r0, r3, r0, lsr #5
 276              	.LVL3:
 277 0010 D060     		str	r0, [r2, #12]
 415:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 416:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   /* Enable wake-up pin */
 417:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   SET_BIT(PWR->CR3, (PWR_CR3_EWUP & WakeUpPinPolarity));
 278              		.loc 1 417 0
 279 0012 9368     		ldr	r3, [r2, #8]
 280 0014 1943     		orrs	r1, r1, r3
ARM GAS  /tmp/cccTYOyd.s 			page 13


 281 0016 9160     		str	r1, [r2, #8]
 282 0018 7047     		bx	lr
 283              	.L25:
 284 001a 00BF     		.align	2
 285              	.L24:
 286 001c 00700040 		.word	1073770496
 287              		.cfi_endproc
 288              	.LFE129:
 290              		.section	.text.HAL_PWR_DisableWakeUpPin,"ax",%progbits
 291              		.align	1
 292              		.global	HAL_PWR_DisableWakeUpPin
 293              		.syntax unified
 294              		.thumb
 295              		.thumb_func
 296              		.fpu fpv4-sp-d16
 298              	HAL_PWR_DisableWakeUpPin:
 299              	.LFB130:
 418:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 419:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 420:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** }
 421:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 422:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** /**
 423:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @brief Disable the WakeUp PINx functionality.
 424:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @param WakeUpPinx: Specifies the Power Wake-Up pin to disable.
 425:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *         This parameter can be one of the following values:
 426:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *           @arg @ref PWR_WAKEUP_PIN1, PWR_WAKEUP_PIN2, PWR_WAKEUP_PIN3, PWR_WAKEUP_PIN4, PWR_WAK
 427:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @retval None
 428:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   */
 429:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
 430:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** {
 300              		.loc 1 430 0
 301              		.cfi_startproc
 302              		@ args = 0, pretend = 0, frame = 0
 303              		@ frame_needed = 0, uses_anonymous_args = 0
 304              		@ link register save eliminated.
 305              	.LVL4:
 431:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
 432:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 433:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   CLEAR_BIT(PWR->CR3, (PWR_CR3_EWUP & WakeUpPinx));
 306              		.loc 1 433 0
 307 0000 034A     		ldr	r2, .L27
 308 0002 9368     		ldr	r3, [r2, #8]
 309 0004 00F01F00 		and	r0, r0, #31
 310              	.LVL5:
 311 0008 23EA0003 		bic	r3, r3, r0
 312 000c 9360     		str	r3, [r2, #8]
 313 000e 7047     		bx	lr
 314              	.L28:
 315              		.align	2
 316              	.L27:
 317 0010 00700040 		.word	1073770496
 318              		.cfi_endproc
 319              	.LFE130:
 321              		.section	.text.HAL_PWR_EnterSLEEPMode,"ax",%progbits
 322              		.align	1
 323              		.global	HAL_PWR_EnterSLEEPMode
 324              		.syntax unified
ARM GAS  /tmp/cccTYOyd.s 			page 14


 325              		.thumb
 326              		.thumb_func
 327              		.fpu fpv4-sp-d16
 329              	HAL_PWR_EnterSLEEPMode:
 330              	.LFB131:
 434:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** }
 435:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 436:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 437:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** /**
 438:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @brief Enter Sleep or Low-power Sleep mode.
 439:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @note  In Sleep/Low-power Sleep mode, all I/O pins keep the same state as in Run mode.
 440:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @param Regulator: Specifies the regulator state in Sleep/Low-power Sleep mode.
 441:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *          This parameter can be one of the following values:
 442:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *            @arg @ref PWR_MAINREGULATOR_ON Sleep mode (regulator in main mode)
 443:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *            @arg @ref PWR_LOWPOWERREGULATOR_ON Low-power Sleep mode (regulator in low-power mode
 444:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @note  Low-power Sleep mode is entered from Low-power Run mode. Therefore, if not yet
 445:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *        in Low-power Run mode before calling HAL_PWR_EnterSLEEPMode() with Regulator set
 446:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *        to PWR_LOWPOWERREGULATOR_ON, the user can optionally configure the
 447:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *        Flash in power-down monde in setting the SLEEP_PD bit in FLASH_ACR register.
 448:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *        Additionally, the clock frequency must be reduced below 2 MHz.
 449:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *        Setting SLEEP_PD in FLASH_ACR then appropriately reducing the clock frequency must
 450:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *        be done before calling HAL_PWR_EnterSLEEPMode() API.
 451:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @note  When exiting Low-power Sleep mode, the MCU is in Low-power Run mode. To move in
 452:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *        Run mode, the user must resort to HAL_PWREx_DisableLowPowerRunMode() API.
 453:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @param SLEEPEntry: Specifies if Sleep mode is entered with WFI or WFE instruction.
 454:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *           This parameter can be one of the following values:
 455:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *            @arg @ref PWR_SLEEPENTRY_WFI enter Sleep or Low-power Sleep mode with WFI instructio
 456:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *            @arg @ref PWR_SLEEPENTRY_WFE enter Sleep or Low-power Sleep mode with WFE instructio
 457:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
 458:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *        the interrupt wake up source.
 459:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @retval None
 460:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   */
 461:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
 462:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** {
 331              		.loc 1 462 0
 332              		.cfi_startproc
 333              		@ args = 0, pretend = 0, frame = 0
 334              		@ frame_needed = 0, uses_anonymous_args = 0
 335              	.LVL6:
 336 0000 10B5     		push	{r4, lr}
 337              	.LCFI0:
 338              		.cfi_def_cfa_offset 8
 339              		.cfi_offset 4, -8
 340              		.cfi_offset 14, -4
 341 0002 0C46     		mov	r4, r1
 463:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   /* Check the parameters */
 464:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   assert_param(IS_PWR_REGULATOR(Regulator));
 465:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));
 466:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 467:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   /* Set Regulator parameter */
 468:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   if (Regulator == PWR_MAINREGULATOR_ON)
 342              		.loc 1 468 0
 343 0004 A0B9     		cbnz	r0, .L30
 469:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   {
 470:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****     /* If in low-power run mode at this point, exit it */
 471:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****     if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 344              		.loc 1 471 0
ARM GAS  /tmp/cccTYOyd.s 			page 15


 345 0006 0F4B     		ldr	r3, .L37
 346 0008 5B69     		ldr	r3, [r3, #20]
 347 000a 13F4007F 		tst	r3, #512
 348 000e 0AD1     		bne	.L35
 349              	.LVL7:
 350              	.L31:
 472:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****     {
 473:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****       if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 474:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****       {
 475:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****         return ;
 476:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****       }
 477:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****     }
 478:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****     /* Regulator now in main mode. */
 479:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   }
 480:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   else
 481:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   {
 482:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****     /* If in run mode, first move to low-power run mode.
 483:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****        The system clock frequency must be below 2 MHz at this point. */
 484:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****     if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF) == RESET)
 485:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****     {
 486:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****       HAL_PWREx_EnableLowPowerRunMode();
 487:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****     }
 488:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   }
 489:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 490:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   /* Clear SLEEPDEEP bit of Cortex System Control Register */
 491:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 351              		.loc 1 491 0
 352 0010 0D4A     		ldr	r2, .L37+4
 353 0012 1369     		ldr	r3, [r2, #16]
 354 0014 23F00403 		bic	r3, r3, #4
 355 0018 1361     		str	r3, [r2, #16]
 492:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 493:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   /* Select SLEEP mode entry -------------------------------------------------*/
 494:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 356              		.loc 1 494 0
 357 001a 012C     		cmp	r4, #1
 358 001c 10D0     		beq	.L36
 359              	.LBB12:
 360              	.LBB13:
 361              		.file 2 "../../core/ST/CMSIS/Include/cmsis_gcc.h"
   1:../../core/ST/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:../../core/ST/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:../../core/ST/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:../../core/ST/CMSIS/Include/cmsis_gcc.h ****  * @version  V4.30
   5:../../core/ST/CMSIS/Include/cmsis_gcc.h ****  * @date     20. October 2015
   6:../../core/ST/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:../../core/ST/CMSIS/Include/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:../../core/ST/CMSIS/Include/cmsis_gcc.h **** 
   9:../../core/ST/CMSIS/Include/cmsis_gcc.h ****    All rights reserved.
  10:../../core/ST/CMSIS/Include/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:../../core/ST/CMSIS/Include/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:../../core/ST/CMSIS/Include/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:../../core/ST/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:../../core/ST/CMSIS/Include/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:../../core/ST/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:../../core/ST/CMSIS/Include/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:../../core/ST/CMSIS/Include/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
ARM GAS  /tmp/cccTYOyd.s 			page 16


  18:../../core/ST/CMSIS/Include/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:../../core/ST/CMSIS/Include/cmsis_gcc.h ****      specific prior written permission.
  20:../../core/ST/CMSIS/Include/cmsis_gcc.h ****    *
  21:../../core/ST/CMSIS/Include/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:../../core/ST/CMSIS/Include/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:../../core/ST/CMSIS/Include/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:../../core/ST/CMSIS/Include/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:../../core/ST/CMSIS/Include/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:../../core/ST/CMSIS/Include/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:../../core/ST/CMSIS/Include/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:../../core/ST/CMSIS/Include/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:../../core/ST/CMSIS/Include/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:../../core/ST/CMSIS/Include/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:../../core/ST/CMSIS/Include/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:../../core/ST/CMSIS/Include/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:../../core/ST/CMSIS/Include/cmsis_gcc.h **** 
  34:../../core/ST/CMSIS/Include/cmsis_gcc.h **** 
  35:../../core/ST/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:../../core/ST/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:../../core/ST/CMSIS/Include/cmsis_gcc.h **** 
  38:../../core/ST/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:../../core/ST/CMSIS/Include/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:../../core/ST/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:../../core/ST/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:../../core/ST/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:../../core/ST/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:../../core/ST/CMSIS/Include/cmsis_gcc.h **** #endif
  45:../../core/ST/CMSIS/Include/cmsis_gcc.h **** 
  46:../../core/ST/CMSIS/Include/cmsis_gcc.h **** 
  47:../../core/ST/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:../../core/ST/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:../../core/ST/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   @{
  51:../../core/ST/CMSIS/Include/cmsis_gcc.h ****  */
  52:../../core/ST/CMSIS/Include/cmsis_gcc.h **** 
  53:../../core/ST/CMSIS/Include/cmsis_gcc.h **** /**
  54:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:../../core/ST/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:../../core/ST/CMSIS/Include/cmsis_gcc.h ****  */
  58:../../core/ST/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:../../core/ST/CMSIS/Include/cmsis_gcc.h **** {
  60:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:../../core/ST/CMSIS/Include/cmsis_gcc.h **** }
  62:../../core/ST/CMSIS/Include/cmsis_gcc.h **** 
  63:../../core/ST/CMSIS/Include/cmsis_gcc.h **** 
  64:../../core/ST/CMSIS/Include/cmsis_gcc.h **** /**
  65:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:../../core/ST/CMSIS/Include/cmsis_gcc.h ****  */
  69:../../core/ST/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:../../core/ST/CMSIS/Include/cmsis_gcc.h **** {
  71:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:../../core/ST/CMSIS/Include/cmsis_gcc.h **** }
  73:../../core/ST/CMSIS/Include/cmsis_gcc.h **** 
  74:../../core/ST/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cccTYOyd.s 			page 17


  75:../../core/ST/CMSIS/Include/cmsis_gcc.h **** /**
  76:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
  77:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
  79:../../core/ST/CMSIS/Include/cmsis_gcc.h ****  */
  80:../../core/ST/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  81:../../core/ST/CMSIS/Include/cmsis_gcc.h **** {
  82:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
  83:../../core/ST/CMSIS/Include/cmsis_gcc.h **** 
  84:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   return(result);
  86:../../core/ST/CMSIS/Include/cmsis_gcc.h **** }
  87:../../core/ST/CMSIS/Include/cmsis_gcc.h **** 
  88:../../core/ST/CMSIS/Include/cmsis_gcc.h **** 
  89:../../core/ST/CMSIS/Include/cmsis_gcc.h **** /**
  90:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
  91:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:../../core/ST/CMSIS/Include/cmsis_gcc.h ****  */
  94:../../core/ST/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:../../core/ST/CMSIS/Include/cmsis_gcc.h **** {
  96:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  97:../../core/ST/CMSIS/Include/cmsis_gcc.h **** }
  98:../../core/ST/CMSIS/Include/cmsis_gcc.h **** 
  99:../../core/ST/CMSIS/Include/cmsis_gcc.h **** 
 100:../../core/ST/CMSIS/Include/cmsis_gcc.h **** /**
 101:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 102:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 104:../../core/ST/CMSIS/Include/cmsis_gcc.h ****  */
 105:../../core/ST/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:../../core/ST/CMSIS/Include/cmsis_gcc.h **** {
 107:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 108:../../core/ST/CMSIS/Include/cmsis_gcc.h **** 
 109:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   return(result);
 111:../../core/ST/CMSIS/Include/cmsis_gcc.h **** }
 112:../../core/ST/CMSIS/Include/cmsis_gcc.h **** 
 113:../../core/ST/CMSIS/Include/cmsis_gcc.h **** 
 114:../../core/ST/CMSIS/Include/cmsis_gcc.h **** /**
 115:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 116:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 118:../../core/ST/CMSIS/Include/cmsis_gcc.h ****  */
 119:../../core/ST/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 120:../../core/ST/CMSIS/Include/cmsis_gcc.h **** {
 121:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 122:../../core/ST/CMSIS/Include/cmsis_gcc.h **** 
 123:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 124:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   return(result);
 125:../../core/ST/CMSIS/Include/cmsis_gcc.h **** }
 126:../../core/ST/CMSIS/Include/cmsis_gcc.h **** 
 127:../../core/ST/CMSIS/Include/cmsis_gcc.h **** 
 128:../../core/ST/CMSIS/Include/cmsis_gcc.h **** /**
 129:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 130:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:../../core/ST/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cccTYOyd.s 			page 18


 132:../../core/ST/CMSIS/Include/cmsis_gcc.h ****     \return               xPSR Register value
 133:../../core/ST/CMSIS/Include/cmsis_gcc.h ****  */
 134:../../core/ST/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:../../core/ST/CMSIS/Include/cmsis_gcc.h **** {
 136:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 137:../../core/ST/CMSIS/Include/cmsis_gcc.h **** 
 138:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   return(result);
 140:../../core/ST/CMSIS/Include/cmsis_gcc.h **** }
 141:../../core/ST/CMSIS/Include/cmsis_gcc.h **** 
 142:../../core/ST/CMSIS/Include/cmsis_gcc.h **** 
 143:../../core/ST/CMSIS/Include/cmsis_gcc.h **** /**
 144:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 147:../../core/ST/CMSIS/Include/cmsis_gcc.h ****  */
 148:../../core/ST/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:../../core/ST/CMSIS/Include/cmsis_gcc.h **** {
 150:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 151:../../core/ST/CMSIS/Include/cmsis_gcc.h **** 
 152:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   return(result);
 154:../../core/ST/CMSIS/Include/cmsis_gcc.h **** }
 155:../../core/ST/CMSIS/Include/cmsis_gcc.h **** 
 156:../../core/ST/CMSIS/Include/cmsis_gcc.h **** 
 157:../../core/ST/CMSIS/Include/cmsis_gcc.h **** /**
 158:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:../../core/ST/CMSIS/Include/cmsis_gcc.h ****  */
 162:../../core/ST/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:../../core/ST/CMSIS/Include/cmsis_gcc.h **** {
 164:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 165:../../core/ST/CMSIS/Include/cmsis_gcc.h **** }
 166:../../core/ST/CMSIS/Include/cmsis_gcc.h **** 
 167:../../core/ST/CMSIS/Include/cmsis_gcc.h **** 
 168:../../core/ST/CMSIS/Include/cmsis_gcc.h **** /**
 169:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 171:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 172:../../core/ST/CMSIS/Include/cmsis_gcc.h ****  */
 173:../../core/ST/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 174:../../core/ST/CMSIS/Include/cmsis_gcc.h **** {
 175:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 176:../../core/ST/CMSIS/Include/cmsis_gcc.h **** 
 177:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 178:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   return(result);
 179:../../core/ST/CMSIS/Include/cmsis_gcc.h **** }
 180:../../core/ST/CMSIS/Include/cmsis_gcc.h **** 
 181:../../core/ST/CMSIS/Include/cmsis_gcc.h **** 
 182:../../core/ST/CMSIS/Include/cmsis_gcc.h **** /**
 183:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 185:../../core/ST/CMSIS/Include/cmsis_gcc.h **** 
 186:../../core/ST/CMSIS/Include/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 187:../../core/ST/CMSIS/Include/cmsis_gcc.h ****  */
 188:../../core/ST/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
ARM GAS  /tmp/cccTYOyd.s 			page 19


 189:../../core/ST/CMSIS/Include/cmsis_gcc.h **** {
 190:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 191:../../core/ST/CMSIS/Include/cmsis_gcc.h **** }
 192:../../core/ST/CMSIS/Include/cmsis_gcc.h **** 
 193:../../core/ST/CMSIS/Include/cmsis_gcc.h **** 
 194:../../core/ST/CMSIS/Include/cmsis_gcc.h **** /**
 195:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 196:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 197:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 198:../../core/ST/CMSIS/Include/cmsis_gcc.h ****  */
 199:../../core/ST/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 200:../../core/ST/CMSIS/Include/cmsis_gcc.h **** {
 201:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 202:../../core/ST/CMSIS/Include/cmsis_gcc.h **** 
 203:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 204:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   return(result);
 205:../../core/ST/CMSIS/Include/cmsis_gcc.h **** }
 206:../../core/ST/CMSIS/Include/cmsis_gcc.h **** 
 207:../../core/ST/CMSIS/Include/cmsis_gcc.h **** 
 208:../../core/ST/CMSIS/Include/cmsis_gcc.h **** /**
 209:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 210:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 211:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 212:../../core/ST/CMSIS/Include/cmsis_gcc.h ****  */
 213:../../core/ST/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 214:../../core/ST/CMSIS/Include/cmsis_gcc.h **** {
 215:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 216:../../core/ST/CMSIS/Include/cmsis_gcc.h **** }
 217:../../core/ST/CMSIS/Include/cmsis_gcc.h **** 
 218:../../core/ST/CMSIS/Include/cmsis_gcc.h **** 
 219:../../core/ST/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 220:../../core/ST/CMSIS/Include/cmsis_gcc.h **** 
 221:../../core/ST/CMSIS/Include/cmsis_gcc.h **** /**
 222:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 223:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 224:../../core/ST/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 225:../../core/ST/CMSIS/Include/cmsis_gcc.h ****  */
 226:../../core/ST/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 227:../../core/ST/CMSIS/Include/cmsis_gcc.h **** {
 228:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 229:../../core/ST/CMSIS/Include/cmsis_gcc.h **** }
 230:../../core/ST/CMSIS/Include/cmsis_gcc.h **** 
 231:../../core/ST/CMSIS/Include/cmsis_gcc.h **** 
 232:../../core/ST/CMSIS/Include/cmsis_gcc.h **** /**
 233:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 234:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 235:../../core/ST/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 236:../../core/ST/CMSIS/Include/cmsis_gcc.h ****  */
 237:../../core/ST/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 238:../../core/ST/CMSIS/Include/cmsis_gcc.h **** {
 239:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 240:../../core/ST/CMSIS/Include/cmsis_gcc.h **** }
 241:../../core/ST/CMSIS/Include/cmsis_gcc.h **** 
 242:../../core/ST/CMSIS/Include/cmsis_gcc.h **** 
 243:../../core/ST/CMSIS/Include/cmsis_gcc.h **** /**
 244:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 245:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
ARM GAS  /tmp/cccTYOyd.s 			page 20


 246:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 247:../../core/ST/CMSIS/Include/cmsis_gcc.h ****  */
 248:../../core/ST/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 249:../../core/ST/CMSIS/Include/cmsis_gcc.h **** {
 250:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 251:../../core/ST/CMSIS/Include/cmsis_gcc.h **** 
 252:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 253:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   return(result);
 254:../../core/ST/CMSIS/Include/cmsis_gcc.h **** }
 255:../../core/ST/CMSIS/Include/cmsis_gcc.h **** 
 256:../../core/ST/CMSIS/Include/cmsis_gcc.h **** 
 257:../../core/ST/CMSIS/Include/cmsis_gcc.h **** /**
 258:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 259:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 260:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 261:../../core/ST/CMSIS/Include/cmsis_gcc.h ****  */
 262:../../core/ST/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 263:../../core/ST/CMSIS/Include/cmsis_gcc.h **** {
 264:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 265:../../core/ST/CMSIS/Include/cmsis_gcc.h **** }
 266:../../core/ST/CMSIS/Include/cmsis_gcc.h **** 
 267:../../core/ST/CMSIS/Include/cmsis_gcc.h **** 
 268:../../core/ST/CMSIS/Include/cmsis_gcc.h **** /**
 269:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 270:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 271:../../core/ST/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 272:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 273:../../core/ST/CMSIS/Include/cmsis_gcc.h ****  */
 274:../../core/ST/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t value)
 275:../../core/ST/CMSIS/Include/cmsis_gcc.h **** {
 276:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (value) : "memory");
 277:../../core/ST/CMSIS/Include/cmsis_gcc.h **** }
 278:../../core/ST/CMSIS/Include/cmsis_gcc.h **** 
 279:../../core/ST/CMSIS/Include/cmsis_gcc.h **** 
 280:../../core/ST/CMSIS/Include/cmsis_gcc.h **** /**
 281:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 282:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 283:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 284:../../core/ST/CMSIS/Include/cmsis_gcc.h ****  */
 285:../../core/ST/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 286:../../core/ST/CMSIS/Include/cmsis_gcc.h **** {
 287:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 288:../../core/ST/CMSIS/Include/cmsis_gcc.h **** 
 289:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 290:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   return(result);
 291:../../core/ST/CMSIS/Include/cmsis_gcc.h **** }
 292:../../core/ST/CMSIS/Include/cmsis_gcc.h **** 
 293:../../core/ST/CMSIS/Include/cmsis_gcc.h **** 
 294:../../core/ST/CMSIS/Include/cmsis_gcc.h **** /**
 295:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 296:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 297:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 298:../../core/ST/CMSIS/Include/cmsis_gcc.h ****  */
 299:../../core/ST/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 300:../../core/ST/CMSIS/Include/cmsis_gcc.h **** {
 301:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 302:../../core/ST/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/cccTYOyd.s 			page 21


 303:../../core/ST/CMSIS/Include/cmsis_gcc.h **** 
 304:../../core/ST/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M >= 0x03U) */
 305:../../core/ST/CMSIS/Include/cmsis_gcc.h **** 
 306:../../core/ST/CMSIS/Include/cmsis_gcc.h **** 
 307:../../core/ST/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U)
 308:../../core/ST/CMSIS/Include/cmsis_gcc.h **** 
 309:../../core/ST/CMSIS/Include/cmsis_gcc.h **** /**
 310:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 311:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 312:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 313:../../core/ST/CMSIS/Include/cmsis_gcc.h ****  */
 314:../../core/ST/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FPSCR(void)
 315:../../core/ST/CMSIS/Include/cmsis_gcc.h **** {
 316:../../core/ST/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 317:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 318:../../core/ST/CMSIS/Include/cmsis_gcc.h **** 
 319:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 320:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 321:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 322:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 323:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   return(result);
 324:../../core/ST/CMSIS/Include/cmsis_gcc.h **** #else
 325:../../core/ST/CMSIS/Include/cmsis_gcc.h ****    return(0);
 326:../../core/ST/CMSIS/Include/cmsis_gcc.h **** #endif
 327:../../core/ST/CMSIS/Include/cmsis_gcc.h **** }
 328:../../core/ST/CMSIS/Include/cmsis_gcc.h **** 
 329:../../core/ST/CMSIS/Include/cmsis_gcc.h **** 
 330:../../core/ST/CMSIS/Include/cmsis_gcc.h **** /**
 331:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 332:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 333:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 334:../../core/ST/CMSIS/Include/cmsis_gcc.h ****  */
 335:../../core/ST/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 336:../../core/ST/CMSIS/Include/cmsis_gcc.h **** {
 337:../../core/ST/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 338:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 339:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 340:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
 341:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 342:../../core/ST/CMSIS/Include/cmsis_gcc.h **** #endif
 343:../../core/ST/CMSIS/Include/cmsis_gcc.h **** }
 344:../../core/ST/CMSIS/Include/cmsis_gcc.h **** 
 345:../../core/ST/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U) */
 346:../../core/ST/CMSIS/Include/cmsis_gcc.h **** 
 347:../../core/ST/CMSIS/Include/cmsis_gcc.h **** 
 348:../../core/ST/CMSIS/Include/cmsis_gcc.h **** 
 349:../../core/ST/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 350:../../core/ST/CMSIS/Include/cmsis_gcc.h **** 
 351:../../core/ST/CMSIS/Include/cmsis_gcc.h **** 
 352:../../core/ST/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 353:../../core/ST/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 354:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 355:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   @{
 356:../../core/ST/CMSIS/Include/cmsis_gcc.h **** */
 357:../../core/ST/CMSIS/Include/cmsis_gcc.h **** 
 358:../../core/ST/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 359:../../core/ST/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
ARM GAS  /tmp/cccTYOyd.s 			page 22


 360:../../core/ST/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 361:../../core/ST/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 362:../../core/ST/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 363:../../core/ST/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 364:../../core/ST/CMSIS/Include/cmsis_gcc.h **** #else
 365:../../core/ST/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 366:../../core/ST/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 367:../../core/ST/CMSIS/Include/cmsis_gcc.h **** #endif
 368:../../core/ST/CMSIS/Include/cmsis_gcc.h **** 
 369:../../core/ST/CMSIS/Include/cmsis_gcc.h **** /**
 370:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 371:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 372:../../core/ST/CMSIS/Include/cmsis_gcc.h ****  */
 373:../../core/ST/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 374:../../core/ST/CMSIS/Include/cmsis_gcc.h **** {
 375:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("nop");
 376:../../core/ST/CMSIS/Include/cmsis_gcc.h **** }
 377:../../core/ST/CMSIS/Include/cmsis_gcc.h **** 
 378:../../core/ST/CMSIS/Include/cmsis_gcc.h **** 
 379:../../core/ST/CMSIS/Include/cmsis_gcc.h **** /**
 380:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 381:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 382:../../core/ST/CMSIS/Include/cmsis_gcc.h ****  */
 383:../../core/ST/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 384:../../core/ST/CMSIS/Include/cmsis_gcc.h **** {
 385:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfi");
 386:../../core/ST/CMSIS/Include/cmsis_gcc.h **** }
 387:../../core/ST/CMSIS/Include/cmsis_gcc.h **** 
 388:../../core/ST/CMSIS/Include/cmsis_gcc.h **** 
 389:../../core/ST/CMSIS/Include/cmsis_gcc.h **** /**
 390:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 391:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 392:../../core/ST/CMSIS/Include/cmsis_gcc.h ****     a low-power state until one of a number of events occurs.
 393:../../core/ST/CMSIS/Include/cmsis_gcc.h ****  */
 394:../../core/ST/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 395:../../core/ST/CMSIS/Include/cmsis_gcc.h **** {
 396:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfe");
 397:../../core/ST/CMSIS/Include/cmsis_gcc.h **** }
 398:../../core/ST/CMSIS/Include/cmsis_gcc.h **** 
 399:../../core/ST/CMSIS/Include/cmsis_gcc.h **** 
 400:../../core/ST/CMSIS/Include/cmsis_gcc.h **** /**
 401:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 402:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 403:../../core/ST/CMSIS/Include/cmsis_gcc.h ****  */
 404:../../core/ST/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 405:../../core/ST/CMSIS/Include/cmsis_gcc.h **** {
 406:../../core/ST/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("sev");
 362              		.loc 2 406 0
 363              		.syntax unified
 364              	@ 406 "../../core/ST/CMSIS/Include/cmsis_gcc.h" 1
 365 001e 40BF     		sev
 366              	@ 0 "" 2
 367              		.thumb
 368              		.syntax unified
 369              	.LBE13:
 370              	.LBE12:
 371              	.LBB14:
ARM GAS  /tmp/cccTYOyd.s 			page 23


 372              	.LBB15:
 396:../../core/ST/CMSIS/Include/cmsis_gcc.h **** }
 373              		.loc 2 396 0
 374              		.syntax unified
 375              	@ 396 "../../core/ST/CMSIS/Include/cmsis_gcc.h" 1
 376 0020 20BF     		wfe
 377              	@ 0 "" 2
 378              		.thumb
 379              		.syntax unified
 380              	.LBE15:
 381              	.LBE14:
 382              	.LBB16:
 383              	.LBB17:
 384              		.syntax unified
 385              	@ 396 "../../core/ST/CMSIS/Include/cmsis_gcc.h" 1
 386 0022 20BF     		wfe
 387              	@ 0 "" 2
 388              		.thumb
 389              		.syntax unified
 390 0024 10BD     		pop	{r4, pc}
 391              	.LVL8:
 392              	.L35:
 393              	.LBE17:
 394              	.LBE16:
 473:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****       {
 395              		.loc 1 473 0
 396 0026 FFF7FEFF 		bl	HAL_PWREx_DisableLowPowerRunMode
 397              	.LVL9:
 398 002a 0028     		cmp	r0, #0
 399 002c F0D0     		beq	.L31
 400 002e 10BD     		pop	{r4, pc}
 401              	.LVL10:
 402              	.L30:
 484:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****     {
 403              		.loc 1 484 0
 404 0030 044B     		ldr	r3, .L37
 405 0032 5B69     		ldr	r3, [r3, #20]
 406 0034 13F4007F 		tst	r3, #512
 407 0038 EAD1     		bne	.L31
 486:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****     }
 408              		.loc 1 486 0
 409 003a FFF7FEFF 		bl	HAL_PWREx_EnableLowPowerRunMode
 410              	.LVL11:
 411 003e E7E7     		b	.L31
 412              	.L36:
 413              	.LBB18:
 414              	.LBB19:
 385:../../core/ST/CMSIS/Include/cmsis_gcc.h **** }
 415              		.loc 2 385 0
 416              		.syntax unified
 417              	@ 385 "../../core/ST/CMSIS/Include/cmsis_gcc.h" 1
 418 0040 30BF     		wfi
 419              	@ 0 "" 2
 420              		.thumb
 421              		.syntax unified
 422 0042 10BD     		pop	{r4, pc}
 423              	.L38:
ARM GAS  /tmp/cccTYOyd.s 			page 24


 424              		.align	2
 425              	.L37:
 426 0044 00700040 		.word	1073770496
 427 0048 00ED00E0 		.word	-536810240
 428              	.LBE19:
 429              	.LBE18:
 430              		.cfi_endproc
 431              	.LFE131:
 433              		.section	.text.HAL_PWR_EnterSTOPMode,"ax",%progbits
 434              		.align	1
 435              		.global	HAL_PWR_EnterSTOPMode
 436              		.syntax unified
 437              		.thumb
 438              		.thumb_func
 439              		.fpu fpv4-sp-d16
 441              	HAL_PWR_EnterSTOPMode:
 442              	.LFB132:
 495:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   {
 496:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****     /* Request Wait For Interrupt */
 497:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****     __WFI();
 498:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   }
 499:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   else
 500:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   {
 501:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****     /* Request Wait For Event */
 502:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****     __SEV();
 503:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****     __WFE();
 504:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****     __WFE();
 505:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   }
 506:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 507:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** }
 508:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 509:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 510:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** /**
 511:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @brief Enter Stop mode
 512:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @note  This API is named HAL_PWR_EnterSTOPMode to ensure compatibility with legacy code running
 513:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *        on devices where only "Stop mode" is mentioned with main or low power regulator ON.
 514:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @note  In Stop mode, all I/O pins keep the same state as in Run mode.
 515:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @note  All clocks in the VCORE domain are stopped; the PLL, the MSI,
 516:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *        the HSI and the HSE oscillators are disabled. Some peripherals with the wakeup capabilit
 517:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *        (I2Cx, USARTx and LPUART) can switch on the HSI to receive a frame, and switch off the H
 518:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *        after receiving the frame if it is not a wakeup frame. In this case, the HSI clock is pr
 519:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *        only to the peripheral requesting it.
 520:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *        SRAM1, SRAM2 and register contents are preserved.
 521:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *        The BOR is available.
 522:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *        The voltage regulator can be configured either in normal (Stop 0) or low-power mode (Sto
 523:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @note  When exiting Stop 0 or Stop 1 mode by issuing an interrupt or a wakeup event,
 524:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *         the HSI RC oscillator is selected as system clock if STOPWUCK bit in RCC_CFGR register
 525:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *         is set; the MSI oscillator is selected if STOPWUCK is cleared.
 526:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @note  When the voltage regulator operates in low power mode (Stop 1), an additional
 527:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *         startup delay is incurred when waking up.
 528:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *         By keeping the internal regulator ON during Stop mode (Stop 0), the consumption
 529:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *         is higher although the startup time is reduced.
 530:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @param Regulator: Specifies the regulator state in Stop mode.
 531:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *          This parameter can be one of the following values:
 532:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *            @arg @ref PWR_MAINREGULATOR_ON  Stop 0 mode (main regulator ON)
 533:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *            @arg @ref PWR_LOWPOWERREGULATOR_ON  Stop 1 mode (low power regulator ON)
 534:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @param STOPEntry: Specifies Stop 0 or Stop 1 mode is entered with WFI or WFE instruction.
ARM GAS  /tmp/cccTYOyd.s 			page 25


 535:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *          This parameter can be one of the following values:
 536:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop 0 or Stop 1 mode with WFI instruction.
 537:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE instruction.
 538:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @retval None
 539:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   */
 540:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
 541:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** {
 443              		.loc 1 541 0
 444              		.cfi_startproc
 445              		@ args = 0, pretend = 0, frame = 0
 446              		@ frame_needed = 0, uses_anonymous_args = 0
 447              	.LVL12:
 448 0000 08B5     		push	{r3, lr}
 449              	.LCFI1:
 450              		.cfi_def_cfa_offset 8
 451              		.cfi_offset 3, -8
 452              		.cfi_offset 14, -4
 542:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   /* Check the parameters */
 543:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   assert_param(IS_PWR_REGULATOR(Regulator));
 544:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 545:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   if(Regulator == PWR_LOWPOWERREGULATOR_ON)
 453              		.loc 1 545 0
 454 0002 B0F5804F 		cmp	r0, #16384
 455 0006 03D0     		beq	.L43
 546:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   {
 547:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****     HAL_PWREx_EnterSTOP1Mode(STOPEntry);
 548:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   }
 549:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   else
 550:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   {
 551:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****     HAL_PWREx_EnterSTOP0Mode(STOPEntry);
 456              		.loc 1 551 0
 457 0008 0846     		mov	r0, r1
 458              	.LVL13:
 459 000a FFF7FEFF 		bl	HAL_PWREx_EnterSTOP0Mode
 460              	.LVL14:
 461 000e 08BD     		pop	{r3, pc}
 462              	.LVL15:
 463              	.L43:
 547:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   }
 464              		.loc 1 547 0
 465 0010 0846     		mov	r0, r1
 466              	.LVL16:
 467 0012 FFF7FEFF 		bl	HAL_PWREx_EnterSTOP1Mode
 468              	.LVL17:
 469 0016 08BD     		pop	{r3, pc}
 470              		.cfi_endproc
 471              	.LFE132:
 473              		.section	.text.HAL_PWR_EnterSTANDBYMode,"ax",%progbits
 474              		.align	1
 475              		.global	HAL_PWR_EnterSTANDBYMode
 476              		.syntax unified
 477              		.thumb
 478              		.thumb_func
 479              		.fpu fpv4-sp-d16
 481              	HAL_PWR_EnterSTANDBYMode:
 482              	.LFB133:
 552:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   }
ARM GAS  /tmp/cccTYOyd.s 			page 26


 553:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** }
 554:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 555:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** /**
 556:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @brief Enter Standby mode.
 557:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @note  In Standby mode, the PLL, the HSI, the MSI and the HSE oscillators are switched
 558:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *        off. The voltage regulator is disabled, except when SRAM2 content is preserved
 559:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *        in which case the regulator is in low-power mode.
 560:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *        SRAM1 and register contents are lost except for registers in the Backup domain and
 561:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *        Standby circuitry. SRAM2 content can be preserved if the bit RRS is set in PWR_CR3 regis
 562:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *        To enable this feature, the user can resort to HAL_PWREx_EnableSRAM2ContentRetention() A
 563:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *        to set RRS bit.
 564:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *        The BOR is available.
 565:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @note  The I/Os can be configured either with a pull-up or pull-down or can be kept in analog s
 566:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *        HAL_PWREx_EnableGPIOPullUp() and HAL_PWREx_EnableGPIOPullDown() respectively enable Pull
 567:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *        Pull Down state, HAL_PWREx_DisableGPIOPullUp() and HAL_PWREx_DisableGPIOPullDown() disab
 568:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *        same.
 569:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *        These states are effective in Standby mode only if APC bit is set through
 570:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *        HAL_PWREx_EnablePullUpPullDownConfig() API.
 571:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @retval None
 572:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   */
 573:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** void HAL_PWR_EnterSTANDBYMode(void)
 574:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** {
 483              		.loc 1 574 0
 484              		.cfi_startproc
 485              		@ args = 0, pretend = 0, frame = 0
 486              		@ frame_needed = 0, uses_anonymous_args = 0
 487              		@ link register save eliminated.
 575:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   /* Set Stand-by mode */
 576:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STANDBY);
 488              		.loc 1 576 0
 489 0000 064A     		ldr	r2, .L45
 490 0002 1368     		ldr	r3, [r2]
 491 0004 23F00703 		bic	r3, r3, #7
 492 0008 43F00303 		orr	r3, r3, #3
 493 000c 1360     		str	r3, [r2]
 577:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 578:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   /* Set SLEEPDEEP bit of Cortex System Control Register */
 579:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 494              		.loc 1 579 0
 495 000e 044A     		ldr	r2, .L45+4
 496 0010 1369     		ldr	r3, [r2, #16]
 497 0012 43F00403 		orr	r3, r3, #4
 498 0016 1361     		str	r3, [r2, #16]
 499              	.LBB20:
 500              	.LBB21:
 385:../../core/ST/CMSIS/Include/cmsis_gcc.h **** }
 501              		.loc 2 385 0
 502              		.syntax unified
 503              	@ 385 "../../core/ST/CMSIS/Include/cmsis_gcc.h" 1
 504 0018 30BF     		wfi
 505              	@ 0 "" 2
 506              		.thumb
 507              		.syntax unified
 508 001a 7047     		bx	lr
 509              	.L46:
 510              		.align	2
 511              	.L45:
ARM GAS  /tmp/cccTYOyd.s 			page 27


 512 001c 00700040 		.word	1073770496
 513 0020 00ED00E0 		.word	-536810240
 514              	.LBE21:
 515              	.LBE20:
 516              		.cfi_endproc
 517              	.LFE133:
 519              		.section	.text.HAL_PWR_EnableSleepOnExit,"ax",%progbits
 520              		.align	1
 521              		.global	HAL_PWR_EnableSleepOnExit
 522              		.syntax unified
 523              		.thumb
 524              		.thumb_func
 525              		.fpu fpv4-sp-d16
 527              	HAL_PWR_EnableSleepOnExit:
 528              	.LFB134:
 580:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 581:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** /* This option is used to ensure that store operations are completed */
 582:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** #if defined ( __CC_ARM)
 583:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   __force_stores();
 584:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** #endif
 585:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   /* Request Wait For Interrupt */
 586:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   __WFI();
 587:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** }
 588:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 589:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 590:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 591:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** /**
 592:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @brief Indicate Sleep-On-Exit when returning from Handler mode to Thread mode.
 593:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @note Set SLEEPONEXIT bit of SCR register. When this bit is set, the processor
 594:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *       re-enters SLEEP mode when an interruption handling is over.
 595:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *       Setting this bit is useful when the processor is expected to run only on
 596:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *       interruptions handling.
 597:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @retval None
 598:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   */
 599:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** void HAL_PWR_EnableSleepOnExit(void)
 600:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** {
 529              		.loc 1 600 0
 530              		.cfi_startproc
 531              		@ args = 0, pretend = 0, frame = 0
 532              		@ frame_needed = 0, uses_anonymous_args = 0
 533              		@ link register save eliminated.
 601:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   /* Set SLEEPONEXIT bit of Cortex System Control Register */
 602:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 534              		.loc 1 602 0
 535 0000 024A     		ldr	r2, .L48
 536 0002 1369     		ldr	r3, [r2, #16]
 537 0004 43F00203 		orr	r3, r3, #2
 538 0008 1361     		str	r3, [r2, #16]
 539 000a 7047     		bx	lr
 540              	.L49:
 541              		.align	2
 542              	.L48:
 543 000c 00ED00E0 		.word	-536810240
 544              		.cfi_endproc
 545              	.LFE134:
 547              		.section	.text.HAL_PWR_DisableSleepOnExit,"ax",%progbits
 548              		.align	1
ARM GAS  /tmp/cccTYOyd.s 			page 28


 549              		.global	HAL_PWR_DisableSleepOnExit
 550              		.syntax unified
 551              		.thumb
 552              		.thumb_func
 553              		.fpu fpv4-sp-d16
 555              	HAL_PWR_DisableSleepOnExit:
 556              	.LFB135:
 603:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** }
 604:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 605:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 606:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** /**
 607:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @brief Disable Sleep-On-Exit feature when returning from Handler mode to Thread mode.
 608:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @note Clear SLEEPONEXIT bit of SCR register. When this bit is set, the processor
 609:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *       re-enters SLEEP mode when an interruption handling is over.
 610:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @retval None
 611:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   */
 612:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** void HAL_PWR_DisableSleepOnExit(void)
 613:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** {
 557              		.loc 1 613 0
 558              		.cfi_startproc
 559              		@ args = 0, pretend = 0, frame = 0
 560              		@ frame_needed = 0, uses_anonymous_args = 0
 561              		@ link register save eliminated.
 614:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   /* Clear SLEEPONEXIT bit of Cortex System Control Register */
 615:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 562              		.loc 1 615 0
 563 0000 024A     		ldr	r2, .L51
 564 0002 1369     		ldr	r3, [r2, #16]
 565 0004 23F00203 		bic	r3, r3, #2
 566 0008 1361     		str	r3, [r2, #16]
 567 000a 7047     		bx	lr
 568              	.L52:
 569              		.align	2
 570              	.L51:
 571 000c 00ED00E0 		.word	-536810240
 572              		.cfi_endproc
 573              	.LFE135:
 575              		.section	.text.HAL_PWR_EnableSEVOnPend,"ax",%progbits
 576              		.align	1
 577              		.global	HAL_PWR_EnableSEVOnPend
 578              		.syntax unified
 579              		.thumb
 580              		.thumb_func
 581              		.fpu fpv4-sp-d16
 583              	HAL_PWR_EnableSEVOnPend:
 584              	.LFB136:
 616:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** }
 617:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 618:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 619:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 620:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** /**
 621:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @brief Enable CORTEX M4 SEVONPEND bit.
 622:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @note Set SEVONPEND bit of SCR register. When this bit is set, this causes
 623:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *       WFE to wake up when an interrupt moves from inactive to pended.
 624:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @retval None
 625:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   */
 626:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** void HAL_PWR_EnableSEVOnPend(void)
ARM GAS  /tmp/cccTYOyd.s 			page 29


 627:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** {
 585              		.loc 1 627 0
 586              		.cfi_startproc
 587              		@ args = 0, pretend = 0, frame = 0
 588              		@ frame_needed = 0, uses_anonymous_args = 0
 589              		@ link register save eliminated.
 628:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   /* Set SEVONPEND bit of Cortex System Control Register */
 629:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
 590              		.loc 1 629 0
 591 0000 024A     		ldr	r2, .L54
 592 0002 1369     		ldr	r3, [r2, #16]
 593 0004 43F01003 		orr	r3, r3, #16
 594 0008 1361     		str	r3, [r2, #16]
 595 000a 7047     		bx	lr
 596              	.L55:
 597              		.align	2
 598              	.L54:
 599 000c 00ED00E0 		.word	-536810240
 600              		.cfi_endproc
 601              	.LFE136:
 603              		.section	.text.HAL_PWR_DisableSEVOnPend,"ax",%progbits
 604              		.align	1
 605              		.global	HAL_PWR_DisableSEVOnPend
 606              		.syntax unified
 607              		.thumb
 608              		.thumb_func
 609              		.fpu fpv4-sp-d16
 611              	HAL_PWR_DisableSEVOnPend:
 612              	.LFB137:
 630:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** }
 631:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 632:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 633:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** /**
 634:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @brief Disable CORTEX M4 SEVONPEND bit.
 635:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @note Clear SEVONPEND bit of SCR register. When this bit is set, this causes
 636:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *       WFE to wake up when an interrupt moves from inactive to pended.
 637:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @retval None
 638:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   */
 639:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** void HAL_PWR_DisableSEVOnPend(void)
 640:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** {
 613              		.loc 1 640 0
 614              		.cfi_startproc
 615              		@ args = 0, pretend = 0, frame = 0
 616              		@ frame_needed = 0, uses_anonymous_args = 0
 617              		@ link register save eliminated.
 641:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   /* Clear SEVONPEND bit of Cortex System Control Register */
 642:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
 618              		.loc 1 642 0
 619 0000 024A     		ldr	r2, .L57
 620 0002 1369     		ldr	r3, [r2, #16]
 621 0004 23F01003 		bic	r3, r3, #16
 622 0008 1361     		str	r3, [r2, #16]
 623 000a 7047     		bx	lr
 624              	.L58:
 625              		.align	2
 626              	.L57:
 627 000c 00ED00E0 		.word	-536810240
ARM GAS  /tmp/cccTYOyd.s 			page 30


 628              		.cfi_endproc
 629              	.LFE137:
 631              		.section	.text.HAL_PWR_PVDCallback,"ax",%progbits
 632              		.align	1
 633              		.weak	HAL_PWR_PVDCallback
 634              		.syntax unified
 635              		.thumb
 636              		.thumb_func
 637              		.fpu fpv4-sp-d16
 639              	HAL_PWR_PVDCallback:
 640              	.LFB138:
 643:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** }
 644:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 645:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 646:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 647:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 648:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 649:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** /**
 650:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @brief PWR PVD interrupt callback
 651:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @retval None
 652:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   */
 653:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** __weak void HAL_PWR_PVDCallback(void)
 654:../../core/ST/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** {
 641              		.loc 1 654 0
 642              		.cfi_startproc
 643              		@ args = 0, pretend = 0, frame = 0
 644              		@ frame_needed = 0, uses_anonymous_args = 0
 645              		@ link register save eliminated.
 646 0000 7047     		bx	lr
 647              		.cfi_endproc
 648              	.LFE138:
 650              		.text
 651              	.Letext0:
 652              		.file 3 "/usr/include/newlib/machine/_default_types.h"
 653              		.file 4 "/usr/include/newlib/sys/_stdint.h"
 654              		.file 5 "../../core/ST/CMSIS/Include/core_cm4.h"
 655              		.file 6 "../../core/ST/CMSIS/Device/ST/STM32L4xx/Include/system_stm32l4xx.h"
 656              		.file 7 "../../core/ST/CMSIS/Device/ST/STM32L4xx/Include/stm32l496xx.h"
 657              		.file 8 "../../core/ST/CMSIS/Device/ST/STM32L4xx/Include/stm32l4xx.h"
 658              		.file 9 "../../core/ST/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_def.h"
 659              		.file 10 "../../core/ST/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_pwr.h"
 660              		.file 11 "../../core/ST/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal.h"
 661              		.file 12 "../../core/ST/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_pwr_ex.h"
ARM GAS  /tmp/cccTYOyd.s 			page 31


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32l4xx_hal_pwr.c
     /tmp/cccTYOyd.s:18     .text.HAL_PWR_DeInit:0000000000000000 $t
     /tmp/cccTYOyd.s:25     .text.HAL_PWR_DeInit:0000000000000000 HAL_PWR_DeInit
     /tmp/cccTYOyd.s:46     .text.HAL_PWR_DeInit:0000000000000014 $d
     /tmp/cccTYOyd.s:51     .text.HAL_PWR_EnableBkUpAccess:0000000000000000 $t
     /tmp/cccTYOyd.s:58     .text.HAL_PWR_EnableBkUpAccess:0000000000000000 HAL_PWR_EnableBkUpAccess
     /tmp/cccTYOyd.s:74     .text.HAL_PWR_EnableBkUpAccess:000000000000000c $d
     /tmp/cccTYOyd.s:79     .text.HAL_PWR_DisableBkUpAccess:0000000000000000 $t
     /tmp/cccTYOyd.s:86     .text.HAL_PWR_DisableBkUpAccess:0000000000000000 HAL_PWR_DisableBkUpAccess
     /tmp/cccTYOyd.s:102    .text.HAL_PWR_DisableBkUpAccess:000000000000000c $d
     /tmp/cccTYOyd.s:107    .text.HAL_PWR_ConfigPVD:0000000000000000 $t
     /tmp/cccTYOyd.s:114    .text.HAL_PWR_ConfigPVD:0000000000000000 HAL_PWR_ConfigPVD
     /tmp/cccTYOyd.s:193    .text.HAL_PWR_ConfigPVD:000000000000007c $d
     /tmp/cccTYOyd.s:199    .text.HAL_PWR_EnablePVD:0000000000000000 $t
     /tmp/cccTYOyd.s:206    .text.HAL_PWR_EnablePVD:0000000000000000 HAL_PWR_EnablePVD
     /tmp/cccTYOyd.s:222    .text.HAL_PWR_EnablePVD:000000000000000c $d
     /tmp/cccTYOyd.s:227    .text.HAL_PWR_DisablePVD:0000000000000000 $t
     /tmp/cccTYOyd.s:234    .text.HAL_PWR_DisablePVD:0000000000000000 HAL_PWR_DisablePVD
     /tmp/cccTYOyd.s:250    .text.HAL_PWR_DisablePVD:000000000000000c $d
     /tmp/cccTYOyd.s:255    .text.HAL_PWR_EnableWakeUpPin:0000000000000000 $t
     /tmp/cccTYOyd.s:262    .text.HAL_PWR_EnableWakeUpPin:0000000000000000 HAL_PWR_EnableWakeUpPin
     /tmp/cccTYOyd.s:286    .text.HAL_PWR_EnableWakeUpPin:000000000000001c $d
     /tmp/cccTYOyd.s:291    .text.HAL_PWR_DisableWakeUpPin:0000000000000000 $t
     /tmp/cccTYOyd.s:298    .text.HAL_PWR_DisableWakeUpPin:0000000000000000 HAL_PWR_DisableWakeUpPin
     /tmp/cccTYOyd.s:317    .text.HAL_PWR_DisableWakeUpPin:0000000000000010 $d
     /tmp/cccTYOyd.s:322    .text.HAL_PWR_EnterSLEEPMode:0000000000000000 $t
     /tmp/cccTYOyd.s:329    .text.HAL_PWR_EnterSLEEPMode:0000000000000000 HAL_PWR_EnterSLEEPMode
     /tmp/cccTYOyd.s:426    .text.HAL_PWR_EnterSLEEPMode:0000000000000044 $d
     /tmp/cccTYOyd.s:434    .text.HAL_PWR_EnterSTOPMode:0000000000000000 $t
     /tmp/cccTYOyd.s:441    .text.HAL_PWR_EnterSTOPMode:0000000000000000 HAL_PWR_EnterSTOPMode
     /tmp/cccTYOyd.s:474    .text.HAL_PWR_EnterSTANDBYMode:0000000000000000 $t
     /tmp/cccTYOyd.s:481    .text.HAL_PWR_EnterSTANDBYMode:0000000000000000 HAL_PWR_EnterSTANDBYMode
     /tmp/cccTYOyd.s:512    .text.HAL_PWR_EnterSTANDBYMode:000000000000001c $d
     /tmp/cccTYOyd.s:520    .text.HAL_PWR_EnableSleepOnExit:0000000000000000 $t
     /tmp/cccTYOyd.s:527    .text.HAL_PWR_EnableSleepOnExit:0000000000000000 HAL_PWR_EnableSleepOnExit
     /tmp/cccTYOyd.s:543    .text.HAL_PWR_EnableSleepOnExit:000000000000000c $d
     /tmp/cccTYOyd.s:548    .text.HAL_PWR_DisableSleepOnExit:0000000000000000 $t
     /tmp/cccTYOyd.s:555    .text.HAL_PWR_DisableSleepOnExit:0000000000000000 HAL_PWR_DisableSleepOnExit
     /tmp/cccTYOyd.s:571    .text.HAL_PWR_DisableSleepOnExit:000000000000000c $d
     /tmp/cccTYOyd.s:576    .text.HAL_PWR_EnableSEVOnPend:0000000000000000 $t
     /tmp/cccTYOyd.s:583    .text.HAL_PWR_EnableSEVOnPend:0000000000000000 HAL_PWR_EnableSEVOnPend
     /tmp/cccTYOyd.s:599    .text.HAL_PWR_EnableSEVOnPend:000000000000000c $d
     /tmp/cccTYOyd.s:604    .text.HAL_PWR_DisableSEVOnPend:0000000000000000 $t
     /tmp/cccTYOyd.s:611    .text.HAL_PWR_DisableSEVOnPend:0000000000000000 HAL_PWR_DisableSEVOnPend
     /tmp/cccTYOyd.s:627    .text.HAL_PWR_DisableSEVOnPend:000000000000000c $d
     /tmp/cccTYOyd.s:632    .text.HAL_PWR_PVDCallback:0000000000000000 $t
     /tmp/cccTYOyd.s:639    .text.HAL_PWR_PVDCallback:0000000000000000 HAL_PWR_PVDCallback
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_PWREx_DisableLowPowerRunMode
HAL_PWREx_EnableLowPowerRunMode
HAL_PWREx_EnterSTOP0Mode
HAL_PWREx_EnterSTOP1Mode
