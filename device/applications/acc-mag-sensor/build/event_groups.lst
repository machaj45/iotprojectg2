ARM GAS  /tmp/cc7aTtvB.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"event_groups.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.prvTestWaitCondition,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv4-sp-d16
  24              	prvTestWaitCondition:
  25              	.LFB14:
  26              		.file 1 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c"
   1:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*
   2:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * FreeRTOS Kernel V10.0.1
   3:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  *
   5:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * the Software without restriction, including without limitation the rights to
   8:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * subject to the following conditions:
  11:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  *
  12:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * The above copyright notice and this permission notice shall be included in all
  13:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * copies or substantial portions of the Software.
  14:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  *
  15:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  *
  22:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * http://www.FreeRTOS.org
  23:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * http://aws.amazon.com/freertos
  24:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  *
  25:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * 1 tab == 4 spaces!
  26:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  */
  27:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  28:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /* Standard includes. */
  29:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #include <stdlib.h>
  30:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  31:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  32:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** all the API functions to use the MPU wrappers.  That should only be done when
ARM GAS  /tmp/cc7aTtvB.s 			page 2


  33:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** task.h is included from an application file. */
  34:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  35:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  36:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /* FreeRTOS includes. */
  37:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #include "FreeRTOS.h"
  38:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #include "task.h"
  39:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #include "timers.h"
  40:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #include "event_groups.h"
  41:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  42:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  43:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  44:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** header files above, but not in this file, in order to generate the correct
  45:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** privileged Vs unprivileged linkage and placement. */
  46:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
  47:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  48:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /* The following bit fields convey control information in a task's event list
  49:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** item value.  It is important they don't clash with the
  50:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** taskEVENT_LIST_ITEM_VALUE_IN_USE definition. */
  51:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #if configUSE_16_BIT_TICKS == 1
  52:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#define eventCLEAR_EVENTS_ON_EXIT_BIT	0x0100U
  53:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#define eventUNBLOCKED_DUE_TO_BIT_SET	0x0200U
  54:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#define eventWAIT_FOR_ALL_BITS			0x0400U
  55:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#define eventEVENT_BITS_CONTROL_BYTES	0xff00U
  56:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #else
  57:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#define eventCLEAR_EVENTS_ON_EXIT_BIT	0x01000000UL
  58:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#define eventUNBLOCKED_DUE_TO_BIT_SET	0x02000000UL
  59:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#define eventWAIT_FOR_ALL_BITS			0x04000000UL
  60:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#define eventEVENT_BITS_CONTROL_BYTES	0xff000000UL
  61:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #endif
  62:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  63:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** typedef struct xEventGroupDefinition
  64:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
  65:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	EventBits_t uxEventBits;
  66:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	List_t xTasksWaitingForBits;		/*< List of tasks waiting for a bit to be set. */
  67:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  68:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#if( configUSE_TRACE_FACILITY == 1 )
  69:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		UBaseType_t uxEventGroupNumber;
  70:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#endif
  71:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  72:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
  73:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		uint8_t ucStaticallyAllocated; /*< Set to pdTRUE if the event group is statically allocated to en
  74:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#endif
  75:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** } EventGroup_t;
  76:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  77:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
  78:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  79:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*
  80:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * Test the bits set in uxCurrentEventBits to see if the wait condition is met.
  81:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * The wait condition is defined by xWaitForAllBits.  If xWaitForAllBits is
  82:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * pdTRUE then the wait condition is met if all the bits set in uxBitsToWaitFor
  83:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * are also set in uxCurrentEventBits.  If xWaitForAllBits is pdFALSE then the
  84:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * wait condition is met if any of the bits set in uxBitsToWait for are also set
  85:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * in uxCurrentEventBits.
  86:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  */
  87:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxB
  88:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  89:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/cc7aTtvB.s 			page 3


  90:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  91:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
  92:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  93:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
  94:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
  95:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	EventGroup_t *pxEventBits;
  96:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  97:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* A StaticEventGroup_t object must be provided. */
  98:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		configASSERT( pxEventGroupBuffer );
  99:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 100:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		#if( configASSERT_DEFINED == 1 )
 101:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 102:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* Sanity check that the size of the structure used to declare a
 103:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			variable of type StaticEventGroup_t equals the size of the real
 104:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			event group structure. */
 105:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			volatile size_t xSize = sizeof( StaticEventGroup_t );
 106:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			configASSERT( xSize == sizeof( EventGroup_t ) );
 107:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 108:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		#endif /* configASSERT_DEFINED */
 109:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 110:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* The user has provided a statically allocated event group - use it. */
 111:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 EventGroup_t and StaticEventGro
 112:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 113:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( pxEventBits != NULL )
 114:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 115:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			pxEventBits->uxEventBits = 0;
 116:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 117:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 118:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 119:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 120:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* Both static and dynamic allocation can be used, so note that
 121:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				this event group was created statically in case the event group
 122:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				is later deleted. */
 123:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				pxEventBits->ucStaticallyAllocated = pdTRUE;
 124:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 125:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 126:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 127:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			traceEVENT_GROUP_CREATE( pxEventBits );
 128:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 129:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 130:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 131:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			traceEVENT_GROUP_CREATE_FAILED();
 132:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 133:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 134:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		return ( EventGroupHandle_t ) pxEventBits;
 135:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 136:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 137:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 138:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 139:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 140:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 141:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 142:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	EventGroupHandle_t xEventGroupCreate( void )
 143:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 144:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	EventGroup_t *pxEventBits;
 145:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 146:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* Allocate the event group. */
ARM GAS  /tmp/cc7aTtvB.s 			page 4


 147:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 148:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 149:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( pxEventBits != NULL )
 150:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 151:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			pxEventBits->uxEventBits = 0;
 152:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 153:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 154:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 155:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 156:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* Both static and dynamic allocation can be used, so note this
 157:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				event group was allocated statically in case the event group is
 158:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				later deleted. */
 159:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				pxEventBits->ucStaticallyAllocated = pdFALSE;
 160:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 161:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 162:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 163:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			traceEVENT_GROUP_CREATE( pxEventBits );
 164:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 165:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 166:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 167:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			traceEVENT_GROUP_CREATE_FAILED();
 168:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 169:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 170:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		return ( EventGroupHandle_t ) pxEventBits;
 171:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 172:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 173:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 174:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 175:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 176:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t xEventGroupSync( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, const E
 177:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 178:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t uxOriginalBitValue, uxReturn;
 179:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 180:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** BaseType_t xAlreadyYielded;
 181:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** BaseType_t xTimeoutOccurred = pdFALSE;
 182:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 183:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 184:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( uxBitsToWaitFor != 0 );
 185:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 186:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 187:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
 188:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 189:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#endif
 190:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 191:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	vTaskSuspendAll();
 192:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 193:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		uxOriginalBitValue = pxEventBits->uxEventBits;
 194:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
 196:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 197:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
 198:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 199:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* All the rendezvous bits are now set - no need to block. */
 200:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			uxReturn = ( uxOriginalBitValue | uxBitsToSet );
 201:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 202:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* Rendezvous always clear the bits.  They will have been cleared
 203:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			already unless this is the only task in the rendezvous. */
ARM GAS  /tmp/cc7aTtvB.s 			page 5


 204:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 205:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 206:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xTicksToWait = 0;
 207:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 208:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 209:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 210:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			if( xTicksToWait != ( TickType_t ) 0 )
 211:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 212:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				traceEVENT_GROUP_SYNC_BLOCK( xEventGroup, uxBitsToSet, uxBitsToWaitFor );
 213:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 214:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* Store the bits that the calling task is waiting for in the
 215:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				task's event list item so the kernel knows when a match is
 216:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				found.  Then enter the blocked state. */
 217:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | eve
 218:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 219:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* This assignment is obsolete as uxReturn will get set after
 220:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				the task unblocks, but some compilers mistakenly generate a
 221:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				warning about uxReturn being returned without being set if the
 222:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				assignment is omitted. */
 223:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				uxReturn = 0;
 224:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 225:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			else
 226:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 227:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* The rendezvous bits were not set, but no block time was
 228:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				specified - just return the current event bit value. */
 229:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				uxReturn = pxEventBits->uxEventBits;
 230:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				xTimeoutOccurred = pdTRUE;
 231:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 232:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 233:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 234:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	xAlreadyYielded = xTaskResumeAll();
 235:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 236:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	if( xTicksToWait != ( TickType_t ) 0 )
 237:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 238:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( xAlreadyYielded == pdFALSE )
 239:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 240:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			portYIELD_WITHIN_API();
 241:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 242:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 243:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 244:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			mtCOVERAGE_TEST_MARKER();
 245:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 246:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 247:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* The task blocked to wait for its required bits to be set - at this
 248:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		point either the required bits were set or the block time expired.  If
 249:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		the required bits were set they will have been stored in the task's
 250:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		event list item, and they should now be retrieved then cleared. */
 251:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		uxReturn = uxTaskResetEventItemValue();
 252:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 253:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 254:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 255:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* The task timed out, just return the current event bit value. */
 256:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			taskENTER_CRITICAL();
 257:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 258:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				uxReturn = pxEventBits->uxEventBits;
 259:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 260:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* Although the task got here because it timed out before the
ARM GAS  /tmp/cc7aTtvB.s 			page 6


 261:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				bits it was waiting for were set, it is possible that since it
 262:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				unblocked another task has set the bits.  If this is the case
 263:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				then it needs to clear the bits before exiting. */
 264:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				if( ( uxReturn & uxBitsToWaitFor ) == uxBitsToWaitFor )
 265:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 266:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 267:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 268:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				else
 269:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 270:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					mtCOVERAGE_TEST_MARKER();
 271:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 272:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 273:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			taskEXIT_CRITICAL();
 274:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 275:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xTimeoutOccurred = pdTRUE;
 276:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 277:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 278:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 279:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* The task unblocked because the bits were set. */
 280:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 281:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 282:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* Control bits might be set as the task had blocked should not be
 283:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		returned. */
 284:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 285:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 286:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 287:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	traceEVENT_GROUP_SYNC_END( xEventGroup, uxBitsToSet, uxBitsToWaitFor, xTimeoutOccurred );
 288:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 289:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	/* Prevent compiler warnings when trace macros are not used. */
 290:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	( void ) xTimeoutOccurred;
 291:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 292:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	return uxReturn;
 293:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 294:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 295:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 296:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor,
 297:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 298:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 299:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t uxReturn, uxControlBits = 0;
 300:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** BaseType_t xWaitConditionMet, xAlreadyYielded;
 301:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** BaseType_t xTimeoutOccurred = pdFALSE;
 302:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 303:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	/* Check the user is not attempting to wait on the bits used by the kernel
 304:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	itself, and that at least one bit is being requested. */
 305:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( xEventGroup );
 306:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 307:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( uxBitsToWaitFor != 0 );
 308:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 309:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 310:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
 311:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 312:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#endif
 313:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 314:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	vTaskSuspendAll();
 315:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 316:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 317:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
ARM GAS  /tmp/cc7aTtvB.s 			page 7


 318:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* Check to see if the wait condition is already met or not. */
 319:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 320:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 321:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( xWaitConditionMet != pdFALSE )
 322:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 323:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* The wait condition has already been met so there is no need to
 324:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			block. */
 325:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			uxReturn = uxCurrentEventBits;
 326:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xTicksToWait = ( TickType_t ) 0;
 327:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 328:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* Clear the wait bits if requested to do so. */
 329:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			if( xClearOnExit != pdFALSE )
 330:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 331:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 332:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 333:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			else
 334:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 335:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				mtCOVERAGE_TEST_MARKER();
 336:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 337:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 338:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else if( xTicksToWait == ( TickType_t ) 0 )
 339:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 340:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* The wait condition has not been met, but no block time was
 341:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			specified, so just return the current value. */
 342:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			uxReturn = uxCurrentEventBits;
 343:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xTimeoutOccurred = pdTRUE;
 344:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 345:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 346:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 347:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* The task is going to block to wait for its required bits to be
 348:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			set.  uxControlBits are used to remember the specified behaviour of
 349:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			this call to xEventGroupWaitBits() - for use when the event bits
 350:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			unblock the task. */
 351:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			if( xClearOnExit != pdFALSE )
 352:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 353:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 354:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 355:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			else
 356:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 357:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				mtCOVERAGE_TEST_MARKER();
 358:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 359:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 360:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			if( xWaitForAllBits != pdFALSE )
 361:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 362:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 363:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 364:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			else
 365:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 366:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				mtCOVERAGE_TEST_MARKER();
 367:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 368:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 369:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* Store the bits that the calling task is waiting for in the
 370:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			task's event list item so the kernel knows when a match is
 371:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			found.  Then enter the blocked state. */
 372:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxCo
 373:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 374:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* This is obsolete as it will get set after the task unblocks, but
ARM GAS  /tmp/cc7aTtvB.s 			page 8


 375:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			some compilers mistakenly generate a warning about the variable
 376:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			being returned without being set if it is not done. */
 377:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			uxReturn = 0;
 378:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 379:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
 380:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 381:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 382:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	xAlreadyYielded = xTaskResumeAll();
 383:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 384:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	if( xTicksToWait != ( TickType_t ) 0 )
 385:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 386:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( xAlreadyYielded == pdFALSE )
 387:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 388:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			portYIELD_WITHIN_API();
 389:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 390:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 391:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 392:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			mtCOVERAGE_TEST_MARKER();
 393:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 394:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 395:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* The task blocked to wait for its required bits to be set - at this
 396:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		point either the required bits were set or the block time expired.  If
 397:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		the required bits were set they will have been stored in the task's
 398:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		event list item, and they should now be retrieved then cleared. */
 399:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		uxReturn = uxTaskResetEventItemValue();
 400:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 401:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 402:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 403:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			taskENTER_CRITICAL();
 404:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 405:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* The task timed out, just return the current event bit value. */
 406:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				uxReturn = pxEventBits->uxEventBits;
 407:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 408:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* It is possible that the event bits were updated between this
 409:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				task leaving the Blocked state and running again. */
 410:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 411:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 412:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					if( xClearOnExit != pdFALSE )
 413:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					{
 414:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 415:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					}
 416:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					else
 417:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					{
 418:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 						mtCOVERAGE_TEST_MARKER();
 419:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					}
 420:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 421:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				else
 422:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 423:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					mtCOVERAGE_TEST_MARKER();
 424:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 425:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				xTimeoutOccurred = pdTRUE;
 426:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 427:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			taskEXIT_CRITICAL();
 428:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 429:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 430:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 431:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* The task unblocked because the bits were set. */
ARM GAS  /tmp/cc7aTtvB.s 			page 9


 432:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 433:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 434:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* The task blocked so control bits may have been set. */
 435:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 436:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 437:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );
 438:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 439:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	/* Prevent compiler warnings when trace macros are not used. */
 440:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	( void ) xTimeoutOccurred;
 441:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 442:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	return uxReturn;
 443:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 444:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 445:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 446:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
 447:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 448:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 449:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t uxReturn;
 450:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 451:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	/* Check the user is not attempting to clear the bits used by the kernel
 452:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	itself. */
 453:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( xEventGroup );
 454:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 455:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 456:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	taskENTER_CRITICAL();
 457:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 458:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );
 459:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 460:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* The value returned is the event group value prior to the bits being
 461:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		cleared. */
 462:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		uxReturn = pxEventBits->uxEventBits;
 463:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 464:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* Clear the bits. */
 465:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		pxEventBits->uxEventBits &= ~uxBitsToClear;
 466:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 467:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	taskEXIT_CRITICAL();
 468:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 469:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	return uxReturn;
 470:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 471:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 472:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 473:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_T
 474:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 475:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsTo
 476:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 477:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		BaseType_t xReturn;
 478:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 479:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
 480:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( 
 481:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 482:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		return xReturn;
 483:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 484:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 485:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #endif
 486:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 487:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 488:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
ARM GAS  /tmp/cc7aTtvB.s 			page 10


 489:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 490:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** UBaseType_t uxSavedInterruptStatus;
 491:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 492:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t uxReturn;
 493:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 494:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 495:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 496:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		uxReturn = pxEventBits->uxEventBits;
 497:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 498:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 499:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 500:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	return uxReturn;
 501:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 502:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 503:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 504:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
 505:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 506:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** ListItem_t *pxListItem, *pxNext;
 507:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** ListItem_t const *pxListEnd;
 508:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** List_t *pxList;
 509:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 510:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 511:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** BaseType_t xMatchFound = pdFALSE;
 512:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 513:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	/* Check the user is not attempting to set the bits used by the kernel
 514:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	itself. */
 515:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( xEventGroup );
 516:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 517:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 518:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	pxList = &( pxEventBits->xTasksWaitingForBits );
 519:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as th
 520:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	vTaskSuspendAll();
 521:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 522:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );
 523:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 524:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		pxListItem = listGET_HEAD_ENTRY( pxList );
 525:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 526:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* Set the bits. */
 527:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		pxEventBits->uxEventBits |= uxBitsToSet;
 528:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 529:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* See if the new bit value should unblock any tasks. */
 530:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		while( pxListItem != pxListEnd )
 531:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 532:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			pxNext = listGET_NEXT( pxListItem );
 533:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 534:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xMatchFound = pdFALSE;
 535:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 536:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* Split the bits waited for from the control bits. */
 537:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 538:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 539:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 540:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 541:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 542:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* Just looking for single bit being set. */
 543:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 544:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 545:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					xMatchFound = pdTRUE;
ARM GAS  /tmp/cc7aTtvB.s 			page 11


 546:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 547:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				else
 548:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 549:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					mtCOVERAGE_TEST_MARKER();
 550:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 551:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 552:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 553:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 554:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* All bits are set. */
 555:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				xMatchFound = pdTRUE;
 556:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 557:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			else
 558:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 559:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* Need all bits to be set, but not all the bits were set. */
 560:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 561:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 562:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			if( xMatchFound != pdFALSE )
 563:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 564:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* The bits match.  Should the bits be cleared on exit? */
 565:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 566:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 567:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					uxBitsToClear |= uxBitsWaitedFor;
 568:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 569:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				else
 570:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 571:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					mtCOVERAGE_TEST_MARKER();
 572:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 573:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 574:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* Store the actual event flag value in the task's event list
 575:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				item before removing the task from the event list.  The
 576:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
 577:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				that is was unblocked due to its required bits matching, rather
 578:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				than because it timed out. */
 579:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO
 580:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 581:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 582:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* Move onto the next list item.  Note pxListItem->pxNext is not
 583:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			used here as the list item may have been removed from the event list
 584:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			and inserted into the ready/pending reading list. */
 585:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			pxListItem = pxNext;
 586:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 587:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 588:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
 589:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		bit was set in the control word. */
 590:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		pxEventBits->uxEventBits &= ~uxBitsToClear;
 591:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 592:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	( void ) xTaskResumeAll();
 593:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 594:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	return pxEventBits->uxEventBits;
 595:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 596:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 597:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 598:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** void vEventGroupDelete( EventGroupHandle_t xEventGroup )
 599:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 600:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 601:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** const List_t *pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
 602:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
ARM GAS  /tmp/cc7aTtvB.s 			page 12


 603:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	vTaskSuspendAll();
 604:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 605:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		traceEVENT_GROUP_DELETE( xEventGroup );
 606:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 607:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 608:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 609:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* Unblock the task, returning 0 as the event list is being deleted
 610:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			and cannot therefore have any bits set. */
 611:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTasksWaiting
 612:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO
 613:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 614:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 615:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
 616:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 617:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* The event group can only have been allocated dynamically - free
 618:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			it again. */
 619:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			vPortFree( pxEventBits );
 620:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 621:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 622:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 623:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* The event group could have been allocated statically or
 624:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			dynamically, so check before attempting to free the memory. */
 625:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			if( pxEventBits->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 626:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 627:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				vPortFree( pxEventBits );
 628:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 629:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			else
 630:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 631:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				mtCOVERAGE_TEST_MARKER();
 632:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 633:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 634:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 635:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 636:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	( void ) xTaskResumeAll();
 637:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 638:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 639:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 640:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /* For internal use only - execute a 'set bits' command that was pended from
 641:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** an interrupt. */
 642:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
 643:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 644:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 645:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 646:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 647:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 648:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /* For internal use only - execute a 'clear bits' command that was pended from
 649:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** an interrupt. */
 650:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
 651:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 652:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
 653:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 654:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 655:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 656:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxB
 657:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
  27              		.loc 1 657 0
  28              		.cfi_startproc
ARM GAS  /tmp/cc7aTtvB.s 			page 13


  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
 658:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** BaseType_t xWaitConditionMet = pdFALSE;
 659:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 660:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	if( xWaitForAllBits == pdFALSE )
  33              		.loc 1 660 0
  34 0000 1AB9     		cbnz	r2, .L2
 661:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 662:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* Task only has to wait for one bit within uxBitsToWaitFor to be
 663:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		set.  Is one already set? */
 664:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
  35              		.loc 1 664 0
  36 0002 0842     		tst	r0, r1
  37 0004 06D1     		bne	.L4
 658:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** BaseType_t xWaitConditionMet = pdFALSE;
  38              		.loc 1 658 0
  39 0006 0020     		movs	r0, #0
  40              	.LVL1:
  41 0008 7047     		bx	lr
  42              	.LVL2:
  43              	.L2:
 665:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 666:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xWaitConditionMet = pdTRUE;
 667:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 668:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 669:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 670:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			mtCOVERAGE_TEST_MARKER();
 671:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 672:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 673:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	else
 674:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 675:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
 676:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		Are they set already? */
 677:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
  44              		.loc 1 677 0
  45 000a 31EA0003 		bics	r3, r1, r0
  46 000e 03D0     		beq	.L5
 658:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  47              		.loc 1 658 0
  48 0010 0020     		movs	r0, #0
  49              	.LVL3:
  50 0012 7047     		bx	lr
  51              	.LVL4:
  52              	.L4:
 666:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
  53              		.loc 1 666 0
  54 0014 0120     		movs	r0, #1
  55              	.LVL5:
  56 0016 7047     		bx	lr
  57              	.LVL6:
  58              	.L5:
 678:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 679:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xWaitConditionMet = pdTRUE;
  59              		.loc 1 679 0
  60 0018 0120     		movs	r0, #1
ARM GAS  /tmp/cc7aTtvB.s 			page 14


  61              	.LVL7:
 680:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 681:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 682:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 683:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			mtCOVERAGE_TEST_MARKER();
 684:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 685:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 686:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 687:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	return xWaitConditionMet;
 688:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
  62              		.loc 1 688 0
  63 001a 7047     		bx	lr
  64              		.cfi_endproc
  65              	.LFE14:
  67              		.section	.text.xEventGroupCreate,"ax",%progbits
  68              		.align	1
  69              		.global	xEventGroupCreate
  70              		.syntax unified
  71              		.thumb
  72              		.thumb_func
  73              		.fpu fpv4-sp-d16
  75              	xEventGroupCreate:
  76              	.LFB5:
 143:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	EventGroup_t *pxEventBits;
  77              		.loc 1 143 0
  78              		.cfi_startproc
  79              		@ args = 0, pretend = 0, frame = 0
  80              		@ frame_needed = 0, uses_anonymous_args = 0
  81 0000 10B5     		push	{r4, lr}
  82              	.LCFI0:
  83              		.cfi_def_cfa_offset 8
  84              		.cfi_offset 4, -8
  85              		.cfi_offset 14, -4
 147:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  86              		.loc 1 147 0
  87 0002 1820     		movs	r0, #24
  88 0004 FFF7FEFF 		bl	pvPortMalloc
  89              	.LVL8:
 149:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
  90              		.loc 1 149 0
  91 0008 0446     		mov	r4, r0
  92 000a 20B1     		cbz	r0, .L7
 151:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
  93              		.loc 1 151 0
  94 000c 0023     		movs	r3, #0
  95 000e 40F8043B 		str	r3, [r0], #4
  96              	.LVL9:
 152:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  97              		.loc 1 152 0
  98 0012 FFF7FEFF 		bl	vListInitialise
  99              	.LVL10:
 100              	.L7:
 171:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 101              		.loc 1 171 0
 102 0016 2046     		mov	r0, r4
 103 0018 10BD     		pop	{r4, pc}
 104              		.cfi_endproc
ARM GAS  /tmp/cc7aTtvB.s 			page 15


 105              	.LFE5:
 107              		.section	.text.xEventGroupWaitBits,"ax",%progbits
 108              		.align	1
 109              		.global	xEventGroupWaitBits
 110              		.syntax unified
 111              		.thumb
 112              		.thumb_func
 113              		.fpu fpv4-sp-d16
 115              	xEventGroupWaitBits:
 116              	.LFB7:
 297:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 117              		.loc 1 297 0
 118              		.cfi_startproc
 119              		@ args = 4, pretend = 0, frame = 0
 120              		@ frame_needed = 0, uses_anonymous_args = 0
 121              	.LVL11:
 122 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 123              	.LCFI1:
 124              		.cfi_def_cfa_offset 32
 125              		.cfi_offset 4, -32
 126              		.cfi_offset 5, -28
 127              		.cfi_offset 6, -24
 128              		.cfi_offset 7, -20
 129              		.cfi_offset 8, -16
 130              		.cfi_offset 9, -12
 131              		.cfi_offset 10, -8
 132              		.cfi_offset 14, -4
 133 0004 DDF82090 		ldr	r9, [sp, #32]
 134              	.LVL12:
 305:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 135              		.loc 1 305 0
 136 0008 60B1     		cbz	r0, .L33
 137 000a 0646     		mov	r6, r0
 306:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( uxBitsToWaitFor != 0 );
 138              		.loc 1 306 0
 139 000c 11F07F4A 		ands	r10, r1, #-16777216
 140 0010 11D0     		beq	.L12
 141              	.LBB31:
 142              	.LBB32:
 143              		.file 2 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
   1:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*
   2:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * FreeRTOS Kernel V10.0.1
   3:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
   5:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * subject to the following conditions:
  11:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  12:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * copies or substantial portions of the Software.
  14:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  15:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
ARM GAS  /tmp/cc7aTtvB.s 			page 16


  18:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  22:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * http://www.FreeRTOS.org
  23:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * http://aws.amazon.com/freertos
  24:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  25:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * 1 tab == 4 spaces!
  26:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  27:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  28:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  29:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
  30:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define PORTMACRO_H
  31:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  32:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef __cplusplus
  33:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern "C" {
  34:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  35:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  36:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  37:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  38:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  39:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  41:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  42:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  43:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  44:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  45:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  46:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  47:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCHAR		char
  48:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portFLOAT		float
  49:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDOUBLE		double
  50:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portLONG		long
  51:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSHORT		short
  52:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_TYPE	uint32_t
  53:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBASE_TYPE	long
  54:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  55:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef long BaseType_t;
  57:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef unsigned long UBaseType_t;
  58:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  59:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint16_t TickType_t;
  61:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #else
  63:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint32_t TickType_t;
  64:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  66:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	not need to be guarded with a critical section. */
  68:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  70:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  71:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  72:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
  73:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
ARM GAS  /tmp/cc7aTtvB.s 			page 17


  75:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  77:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  78:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
  79:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD() 															\
  80:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {																				\
  81:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 																				\
  84:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "isb" );													\
  88:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
  89:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  90:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  95:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  96:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
  97:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortEnterCritical( void );
  98:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortExitCritical( void );
  99:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 102:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 103:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 106:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 107:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 108:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 110:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** (which build with all the ports) will build. */
 111:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 114:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 115:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 116:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 120:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 121:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 122:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 123:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 126:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 127:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 129:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Generic helper function. */
 130:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
ARM GAS  /tmp/cc7aTtvB.s 			page 18


 132:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	uint8_t ucReturn;
 133:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 134:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 136:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 137:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 138:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Check the configuration. */
 139:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 140:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#endif
 142:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 143:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 147:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 149:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 151:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 152:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 153:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 154:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 155:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef configASSERT
 156:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 159:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 160:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 161:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNOP()
 162:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 163:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portINLINE	__inline
 164:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 165:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portFORCE_INLINE
 166:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 167:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 168:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 169:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 170:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 171:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulCurrentInterrupt;
 172:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** BaseType_t xReturn;
 173:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 174:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 175:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 176:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 177:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 178:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 179:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdFALSE;
 180:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 181:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	else
 182:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 183:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdTRUE;
 184:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 185:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 186:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return xReturn;
 187:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 188:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
ARM GAS  /tmp/cc7aTtvB.s 			page 19


 189:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 190:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 191:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 192:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 193:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulNewBASEPRI;
 194:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 144              		.loc 2 195 0
 145              		.syntax unified
 146              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 147 0012 4FF01003 			mov r3, #16												
 148 0016 83F31188 		msr basepri, r3											
 149 001a BFF36F8F 		isb														
 150 001e BFF34F8F 		dsb														
 151              	
 152              	@ 0 "" 2
 153              	.LVL13:
 154              		.thumb
 155              		.syntax unified
 156              	.L13:
 157 0022 FEE7     		b	.L13
 158              	.LVL14:
 159              	.L33:
 160              	.LBE32:
 161              	.LBE31:
 162              	.LBB33:
 163              	.LBB34:
 164              		.syntax unified
 165              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 166 0024 4FF01003 			mov r3, #16												
 167 0028 83F31188 		msr basepri, r3											
 168 002c BFF36F8F 		isb														
 169 0030 BFF34F8F 		dsb														
 170              	
 171              	@ 0 "" 2
 172              	.LVL15:
 173              		.thumb
 174              		.syntax unified
 175              	.L11:
 176 0034 FEE7     		b	.L11
 177              	.LVL16:
 178              	.L12:
 179              	.LBE34:
 180              	.LBE33:
 307:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 181              		.loc 1 307 0
 182 0036 41B9     		cbnz	r1, .L14
 183              	.LBB35:
 184              	.LBB36:
 185              		.loc 2 195 0
 186              		.syntax unified
 187              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 188 0038 4FF01003 			mov r3, #16												
 189 003c 83F31188 		msr basepri, r3											
 190 0040 BFF36F8F 		isb														
 191 0044 BFF34F8F 		dsb														
 192              	
ARM GAS  /tmp/cc7aTtvB.s 			page 20


 193              	@ 0 "" 2
 194              	.LVL17:
 195              		.thumb
 196              		.syntax unified
 197              	.L15:
 198 0048 FEE7     		b	.L15
 199              	.LVL18:
 200              	.L14:
 201 004a 9846     		mov	r8, r3
 202 004c 1746     		mov	r7, r2
 203 004e 0D46     		mov	r5, r1
 204              	.LBE36:
 205              	.LBE35:
 310:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 206              		.loc 1 310 0
 207 0050 FFF7FEFF 		bl	xTaskGetSchedulerState
 208              	.LVL19:
 209 0054 68B9     		cbnz	r0, .L27
 310:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 210              		.loc 1 310 0 is_stmt 0 discriminator 2
 211 0056 B9F1000F 		cmp	r9, #0
 212 005a 0CD1     		bne	.L28
 310:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 213              		.loc 1 310 0
 214 005c 0123     		movs	r3, #1
 215              	.L16:
 310:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 216              		.loc 1 310 0 discriminator 6
 217 005e 63B9     		cbnz	r3, .L17
 218              	.LBB37:
 219              	.LBB38:
 220              		.loc 2 195 0 is_stmt 1
 221              		.syntax unified
 222              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 223 0060 4FF01003 			mov r3, #16												
 224 0064 83F31188 		msr basepri, r3											
 225 0068 BFF36F8F 		isb														
 226 006c BFF34F8F 		dsb														
 227              	
 228              	@ 0 "" 2
 229              	.LVL20:
 230              		.thumb
 231              		.syntax unified
 232              	.L18:
 233 0070 FEE7     		b	.L18
 234              	.L27:
 235              	.LBE38:
 236              	.LBE37:
 310:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 237              		.loc 1 310 0
 238 0072 0123     		movs	r3, #1
 239 0074 F3E7     		b	.L16
 240              	.L28:
 241 0076 0023     		movs	r3, #0
 242 0078 F1E7     		b	.L16
 243              	.L17:
 314:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
ARM GAS  /tmp/cc7aTtvB.s 			page 21


 244              		.loc 1 314 0
 245 007a FFF7FEFF 		bl	vTaskSuspendAll
 246              	.LVL21:
 247              	.LBB39:
 316:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 248              		.loc 1 316 0
 249 007e 3468     		ldr	r4, [r6]
 250              	.LVL22:
 319:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 251              		.loc 1 319 0
 252 0080 4246     		mov	r2, r8
 253 0082 2946     		mov	r1, r5
 254 0084 2046     		mov	r0, r4
 255 0086 FFF7FEFF 		bl	prvTestWaitCondition
 256              	.LVL23:
 321:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 257              		.loc 1 321 0
 258 008a 58B3     		cbz	r0, .L19
 259              	.LVL24:
 329:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 260              		.loc 1 329 0
 261 008c 17B1     		cbz	r7, .L20
 331:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 262              		.loc 1 331 0
 263 008e 24EA0503 		bic	r3, r4, r5
 264 0092 3360     		str	r3, [r6]
 265              	.LVL25:
 266              	.L20:
 267              	.LBE39:
 382:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 268              		.loc 1 382 0
 269 0094 FFF7FEFF 		bl	xTaskResumeAll
 270              	.LVL26:
 384:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 271              		.loc 1 384 0
 272 0098 BAF1000F 		cmp	r10, #0
 273 009c 1FD0     		beq	.L9
 386:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 274              		.loc 1 386 0
 275 009e 38B9     		cbnz	r0, .L24
 388:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 276              		.loc 1 388 0
 277 00a0 4FF08052 		mov	r2, #268435456
 278 00a4 1B4B     		ldr	r3, .L34
 279 00a6 1A60     		str	r2, [r3]
 280              		.syntax unified
 281              	@ 388 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c" 1
 282 00a8 BFF34F8F 		dsb
 283              	@ 0 "" 2
 284              	@ 388 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c" 1
 285 00ac BFF36F8F 		isb
 286              	@ 0 "" 2
 287              		.thumb
 288              		.syntax unified
 289              	.L24:
 399:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 290              		.loc 1 399 0
ARM GAS  /tmp/cc7aTtvB.s 			page 22


 291 00b0 FFF7FEFF 		bl	uxTaskResetEventItemValue
 292              	.LVL27:
 293 00b4 0446     		mov	r4, r0
 294              	.LVL28:
 401:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 295              		.loc 1 401 0
 296 00b6 10F0007F 		tst	r0, #33554432
 297 00ba 0ED1     		bne	.L25
 403:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 298              		.loc 1 403 0
 299 00bc FFF7FEFF 		bl	vPortEnterCritical
 300              	.LVL29:
 406:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 301              		.loc 1 406 0
 302 00c0 3468     		ldr	r4, [r6]
 303              	.LVL30:
 410:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 304              		.loc 1 410 0
 305 00c2 4246     		mov	r2, r8
 306 00c4 2946     		mov	r1, r5
 307 00c6 2046     		mov	r0, r4
 308 00c8 FFF7FEFF 		bl	prvTestWaitCondition
 309              	.LVL31:
 310 00cc 18B1     		cbz	r0, .L26
 412:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					{
 311              		.loc 1 412 0
 312 00ce 17B1     		cbz	r7, .L26
 414:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					}
 313              		.loc 1 414 0
 314 00d0 24EA0505 		bic	r5, r4, r5
 315              	.LVL32:
 316 00d4 3560     		str	r5, [r6]
 317              	.L26:
 318              	.LVL33:
 427:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 319              		.loc 1 427 0
 320 00d6 FFF7FEFF 		bl	vPortExitCritical
 321              	.LVL34:
 322              	.L25:
 435:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 323              		.loc 1 435 0
 324 00da 24F07F44 		bic	r4, r4, #-16777216
 325              	.LVL35:
 326              	.L9:
 443:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 327              		.loc 1 443 0
 328 00de 2046     		mov	r0, r4
 329 00e0 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 330              	.LVL36:
 331              	.L19:
 332              	.LBB40:
 338:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 333              		.loc 1 338 0
 334 00e4 B9F1000F 		cmp	r9, #0
 335 00e8 11D0     		beq	.L30
 351:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 336              		.loc 1 351 0
ARM GAS  /tmp/cc7aTtvB.s 			page 23


 337 00ea 6FB9     		cbnz	r7, .L31
 338              	.LBE40:
 299:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** BaseType_t xWaitConditionMet, xAlreadyYielded;
 339              		.loc 1 299 0
 340 00ec 0021     		movs	r1, #0
 341              	.L21:
 342              	.LVL37:
 343              	.LBB41:
 360:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 344              		.loc 1 360 0
 345 00ee B8F1000F 		cmp	r8, #0
 346 00f2 01D0     		beq	.L22
 362:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 347              		.loc 1 362 0
 348 00f4 41F08061 		orr	r1, r1, #67108864
 349              	.LVL38:
 350              	.L22:
 372:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 351              		.loc 1 372 0
 352 00f8 4A46     		mov	r2, r9
 353 00fa 2943     		orrs	r1, r1, r5
 354              	.LVL39:
 355 00fc 301D     		adds	r0, r6, #4
 356              	.LVL40:
 357 00fe FFF7FEFF 		bl	vTaskPlaceOnUnorderedEventList
 358              	.LVL41:
 359 0102 CA46     		mov	r10, r9
 377:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 360              		.loc 1 377 0
 361 0104 0024     		movs	r4, #0
 362              	.LVL42:
 363 0106 C5E7     		b	.L20
 364              	.LVL43:
 365              	.L31:
 353:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 366              		.loc 1 353 0
 367 0108 4FF08071 		mov	r1, #16777216
 368 010c EFE7     		b	.L21
 369              	.L30:
 370 010e CA46     		mov	r10, r9
 371 0110 C0E7     		b	.L20
 372              	.L35:
 373 0112 00BF     		.align	2
 374              	.L34:
 375 0114 04ED00E0 		.word	-536810236
 376              	.LBE41:
 377              		.cfi_endproc
 378              	.LFE7:
 380              		.section	.text.xEventGroupClearBits,"ax",%progbits
 381              		.align	1
 382              		.global	xEventGroupClearBits
 383              		.syntax unified
 384              		.thumb
 385              		.thumb_func
 386              		.fpu fpv4-sp-d16
 388              	xEventGroupClearBits:
 389              	.LFB8:
ARM GAS  /tmp/cc7aTtvB.s 			page 24


 447:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 390              		.loc 1 447 0
 391              		.cfi_startproc
 392              		@ args = 0, pretend = 0, frame = 0
 393              		@ frame_needed = 0, uses_anonymous_args = 0
 394              	.LVL44:
 453:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 395              		.loc 1 453 0
 396 0000 68B1     		cbz	r0, .L43
 447:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 397              		.loc 1 447 0
 398 0002 70B5     		push	{r4, r5, r6, lr}
 399              	.LCFI2:
 400              		.cfi_def_cfa_offset 16
 401              		.cfi_offset 4, -16
 402              		.cfi_offset 5, -12
 403              		.cfi_offset 6, -8
 404              		.cfi_offset 14, -4
 405 0004 0546     		mov	r5, r0
 454:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 406              		.loc 1 454 0
 407 0006 11F07F4F 		tst	r1, #-16777216
 408 000a 11D0     		beq	.L39
 409              	.LBB42:
 410              	.LBB43:
 411              		.loc 2 195 0
 412              		.syntax unified
 413              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 414 000c 4FF01003 			mov r3, #16												
 415 0010 83F31188 		msr basepri, r3											
 416 0014 BFF36F8F 		isb														
 417 0018 BFF34F8F 		dsb														
 418              	
 419              	@ 0 "" 2
 420              	.LVL45:
 421              		.thumb
 422              		.syntax unified
 423              	.L40:
 424 001c FEE7     		b	.L40
 425              	.L43:
 426              	.LCFI3:
 427              		.cfi_def_cfa_offset 0
 428              		.cfi_restore 4
 429              		.cfi_restore 5
 430              		.cfi_restore 6
 431              		.cfi_restore 14
 432              	.LBE43:
 433              	.LBE42:
 434              	.LBB44:
 435              	.LBB45:
 436              		.syntax unified
 437              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 438 001e 4FF01003 			mov r3, #16												
 439 0022 83F31188 		msr basepri, r3											
 440 0026 BFF36F8F 		isb														
 441 002a BFF34F8F 		dsb														
 442              	
ARM GAS  /tmp/cc7aTtvB.s 			page 25


 443              	@ 0 "" 2
 444              	.LVL46:
 445              		.thumb
 446              		.syntax unified
 447              	.L38:
 448 002e FEE7     		b	.L38
 449              	.L39:
 450              	.LCFI4:
 451              		.cfi_def_cfa_offset 16
 452              		.cfi_offset 4, -16
 453              		.cfi_offset 5, -12
 454              		.cfi_offset 6, -8
 455              		.cfi_offset 14, -4
 456 0030 0C46     		mov	r4, r1
 457              	.LBE45:
 458              	.LBE44:
 456:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 459              		.loc 1 456 0
 460 0032 FFF7FEFF 		bl	vPortEnterCritical
 461              	.LVL47:
 462:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 462              		.loc 1 462 0
 463 0036 2E68     		ldr	r6, [r5]
 464              	.LVL48:
 465:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 465              		.loc 1 465 0
 466 0038 26EA0404 		bic	r4, r6, r4
 467              	.LVL49:
 468 003c 2C60     		str	r4, [r5]
 467:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 469              		.loc 1 467 0
 470 003e FFF7FEFF 		bl	vPortExitCritical
 471              	.LVL50:
 470:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 472              		.loc 1 470 0
 473 0042 3046     		mov	r0, r6
 474 0044 70BD     		pop	{r4, r5, r6, pc}
 475              		.cfi_endproc
 476              	.LFE8:
 478              		.section	.text.xEventGroupGetBitsFromISR,"ax",%progbits
 479              		.align	1
 480              		.global	xEventGroupGetBitsFromISR
 481              		.syntax unified
 482              		.thumb
 483              		.thumb_func
 484              		.fpu fpv4-sp-d16
 486              	xEventGroupGetBitsFromISR:
 487              	.LFB9:
 489:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** UBaseType_t uxSavedInterruptStatus;
 488              		.loc 1 489 0
 489              		.cfi_startproc
 490              		@ args = 0, pretend = 0, frame = 0
 491              		@ frame_needed = 0, uses_anonymous_args = 0
 492              		@ link register save eliminated.
 493              	.LVL51:
 494              	.LBB46:
 495              	.LBB47:
ARM GAS  /tmp/cc7aTtvB.s 			page 26


 196:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 197:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %0, %1												\n"	\
 198:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %0											\n" \
 199:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 200:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 201:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 202:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 203:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 204:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 205:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 206:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 207:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 208:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 209:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 210:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 211:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 496              		.loc 2 211 0
 497              		.syntax unified
 498              	@ 211 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 499 0000 EFF31183 			mrs r3, basepri											
 500 0004 4FF01002 		mov r2, #16												
 501 0008 82F31188 		msr basepri, r2											
 502 000c BFF36F8F 		isb														
 503 0010 BFF34F8F 		dsb														
 504              	
 505              	@ 0 "" 2
 506              		.thumb
 507              		.syntax unified
 508              	.LBE47:
 509              	.LBE46:
 496:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 510              		.loc 1 496 0
 511 0014 0068     		ldr	r0, [r0]
 512              	.LVL52:
 513              	.LBB48:
 514              	.LBB49:
 212:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 213:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mrs %0, basepri											\n" \
 214:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %1, %2												\n"	\
 215:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %1											\n" \
 216:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 217:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 218:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "
 219:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 220:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 221:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 222:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	warnings. */
 223:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return ulOriginalBASEPRI;
 224:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 225:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 226:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 227:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 228:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 229:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 515              		.loc 2 229 0
 516              		.syntax unified
 517              	@ 229 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
ARM GAS  /tmp/cc7aTtvB.s 			page 27


 518 0016 83F31188 			msr basepri, r3	
 519              	@ 0 "" 2
 520              		.thumb
 521              		.syntax unified
 522              	.LBE49:
 523              	.LBE48:
 501:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 524              		.loc 1 501 0
 525 001a 7047     		bx	lr
 526              		.cfi_endproc
 527              	.LFE9:
 529              		.section	.text.xEventGroupSetBits,"ax",%progbits
 530              		.align	1
 531              		.global	xEventGroupSetBits
 532              		.syntax unified
 533              		.thumb
 534              		.thumb_func
 535              		.fpu fpv4-sp-d16
 537              	xEventGroupSetBits:
 538              	.LFB10:
 505:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** ListItem_t *pxListItem, *pxNext;
 539              		.loc 1 505 0
 540              		.cfi_startproc
 541              		@ args = 0, pretend = 0, frame = 0
 542              		@ frame_needed = 0, uses_anonymous_args = 0
 543              	.LVL53:
 544 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 545              	.LCFI5:
 546              		.cfi_def_cfa_offset 24
 547              		.cfi_offset 3, -24
 548              		.cfi_offset 4, -20
 549              		.cfi_offset 5, -16
 550              		.cfi_offset 6, -12
 551              		.cfi_offset 7, -8
 552              		.cfi_offset 14, -4
 553              	.LVL54:
 515:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 554              		.loc 1 515 0
 555 0002 60B1     		cbz	r0, .L59
 556 0004 0446     		mov	r4, r0
 516:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 557              		.loc 1 516 0
 558 0006 11F07F4F 		tst	r1, #-16777216
 559 000a 11D0     		beq	.L48
 560              	.LBB50:
 561              	.LBB51:
 195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 562              		.loc 2 195 0
 563              		.syntax unified
 564              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 565 000c 4FF01003 			mov r3, #16												
 566 0010 83F31188 		msr basepri, r3											
 567 0014 BFF36F8F 		isb														
 568 0018 BFF34F8F 		dsb														
 569              	
 570              	@ 0 "" 2
 571              	.LVL55:
ARM GAS  /tmp/cc7aTtvB.s 			page 28


 572              		.thumb
 573              		.syntax unified
 574              	.L49:
 575 001c FEE7     		b	.L49
 576              	.L59:
 577              	.LBE51:
 578              	.LBE50:
 579              	.LBB52:
 580              	.LBB53:
 581              		.syntax unified
 582              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 583 001e 4FF01003 			mov r3, #16												
 584 0022 83F31188 		msr basepri, r3											
 585 0026 BFF36F8F 		isb														
 586 002a BFF34F8F 		dsb														
 587              	
 588              	@ 0 "" 2
 589              	.LVL56:
 590              		.thumb
 591              		.syntax unified
 592              	.L47:
 593 002e FEE7     		b	.L47
 594              	.L48:
 595 0030 0D46     		mov	r5, r1
 596              	.LVL57:
 597              	.LBE53:
 598              	.LBE52:
 519:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	vTaskSuspendAll();
 599              		.loc 1 519 0
 600 0032 00F10C06 		add	r6, r0, #12
 601              	.LVL58:
 520:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 602              		.loc 1 520 0
 603 0036 FFF7FEFF 		bl	vTaskSuspendAll
 604              	.LVL59:
 524:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 605              		.loc 1 524 0
 606 003a 2069     		ldr	r0, [r4, #16]
 607              	.LVL60:
 527:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 608              		.loc 1 527 0
 609 003c 2368     		ldr	r3, [r4]
 610 003e 2B43     		orrs	r3, r3, r5
 611 0040 2360     		str	r3, [r4]
 509:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 612              		.loc 1 509 0
 613 0042 0025     		movs	r5, #0
 614              	.LVL61:
 530:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 615              		.loc 1 530 0
 616 0044 0FE0     		b	.L50
 617              	.LVL62:
 618              	.L51:
 552:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 619              		.loc 1 552 0
 620 0046 2368     		ldr	r3, [r4]
 621 0048 32EA0303 		bics	r3, r2, r3
ARM GAS  /tmp/cc7aTtvB.s 			page 29


 622 004c 03D0     		beq	.L57
 534:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 623              		.loc 1 534 0
 624 004e 0023     		movs	r3, #0
 625 0050 16E0     		b	.L52
 626              	.L56:
 545:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 627              		.loc 1 545 0
 628 0052 0123     		movs	r3, #1
 629 0054 14E0     		b	.L52
 630              	.L57:
 555:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 631              		.loc 1 555 0
 632 0056 0123     		movs	r3, #1
 633 0058 12E0     		b	.L52
 634              	.LVL63:
 635              	.L54:
 579:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 636              		.loc 1 579 0
 637 005a 2168     		ldr	r1, [r4]
 638              	.LVL64:
 639 005c 41F00071 		orr	r1, r1, #33554432
 640 0060 FFF7FEFF 		bl	vTaskRemoveFromUnorderedEventList
 641              	.LVL65:
 642              	.L53:
 534:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 643              		.loc 1 534 0
 644 0064 3846     		mov	r0, r7
 645              	.LVL66:
 646              	.L50:
 530:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 647              		.loc 1 530 0
 648 0066 B042     		cmp	r0, r6
 649 0068 11D0     		beq	.L60
 532:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 650              		.loc 1 532 0
 651 006a 4768     		ldr	r7, [r0, #4]
 652              	.LVL67:
 533:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xMatchFound = pdFALSE;
 653              		.loc 1 533 0
 654 006c 0168     		ldr	r1, [r0]
 655              	.LVL68:
 538:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 656              		.loc 1 538 0
 657 006e 21F07F42 		bic	r2, r1, #-16777216
 658              	.LVL69:
 540:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 659              		.loc 1 540 0
 660 0072 11F0806F 		tst	r1, #67108864
 661 0076 E6D1     		bne	.L51
 543:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 662              		.loc 1 543 0
 663 0078 2368     		ldr	r3, [r4]
 664 007a 1A42     		tst	r2, r3
 665 007c E9D1     		bne	.L56
 534:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 666              		.loc 1 534 0
ARM GAS  /tmp/cc7aTtvB.s 			page 30


 667 007e 0023     		movs	r3, #0
 668              	.L52:
 669              	.LVL70:
 562:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 670              		.loc 1 562 0
 671 0080 002B     		cmp	r3, #0
 672 0082 EFD0     		beq	.L53
 565:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 673              		.loc 1 565 0
 674 0084 11F0807F 		tst	r1, #16777216
 675 0088 E7D0     		beq	.L54
 567:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 676              		.loc 1 567 0
 677 008a 1543     		orrs	r5, r5, r2
 678              	.LVL71:
 679 008c E5E7     		b	.L54
 680              	.LVL72:
 681              	.L60:
 590:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 682              		.loc 1 590 0
 683 008e 2368     		ldr	r3, [r4]
 684 0090 23EA0503 		bic	r3, r3, r5
 685 0094 2360     		str	r3, [r4]
 592:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 686              		.loc 1 592 0
 687 0096 FFF7FEFF 		bl	xTaskResumeAll
 688              	.LVL73:
 595:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 689              		.loc 1 595 0
 690 009a 2068     		ldr	r0, [r4]
 691 009c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 692              		.cfi_endproc
 693              	.LFE10:
 695              		.section	.text.xEventGroupSync,"ax",%progbits
 696              		.align	1
 697              		.global	xEventGroupSync
 698              		.syntax unified
 699              		.thumb
 700              		.thumb_func
 701              		.fpu fpv4-sp-d16
 703              	xEventGroupSync:
 704              	.LFB6:
 177:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t uxOriginalBitValue, uxReturn;
 705              		.loc 1 177 0
 706              		.cfi_startproc
 707              		@ args = 0, pretend = 0, frame = 0
 708              		@ frame_needed = 0, uses_anonymous_args = 0
 709              	.LVL74:
 183:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( uxBitsToWaitFor != 0 );
 710              		.loc 1 183 0
 711 0000 12F07F4F 		tst	r2, #-16777216
 712 0004 08D0     		beq	.L62
 713              	.LBB54:
 714              	.LBB55:
 195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 715              		.loc 2 195 0
 716              		.syntax unified
ARM GAS  /tmp/cc7aTtvB.s 			page 31


 717              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 718 0006 4FF01003 			mov r3, #16												
 719 000a 83F31188 		msr basepri, r3											
 720 000e BFF36F8F 		isb														
 721 0012 BFF34F8F 		dsb														
 722              	
 723              	@ 0 "" 2
 724              	.LVL75:
 725              		.thumb
 726              		.syntax unified
 727              	.L63:
 728 0016 FEE7     		b	.L63
 729              	.LVL76:
 730              	.L62:
 731              	.LBE55:
 732              	.LBE54:
 177:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t uxOriginalBitValue, uxReturn;
 733              		.loc 1 177 0
 734 0018 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 735              	.LCFI6:
 736              		.cfi_def_cfa_offset 24
 737              		.cfi_offset 4, -24
 738              		.cfi_offset 5, -20
 739              		.cfi_offset 6, -16
 740              		.cfi_offset 7, -12
 741              		.cfi_offset 8, -8
 742              		.cfi_offset 14, -4
 743 001c 0646     		mov	r6, r0
 744 001e 8846     		mov	r8, r1
 745 0020 1546     		mov	r5, r2
 746 0022 1F46     		mov	r7, r3
 184:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 747              		.loc 1 184 0
 748 0024 42B9     		cbnz	r2, .L64
 749              	.LBB56:
 750              	.LBB57:
 195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 751              		.loc 2 195 0
 752              		.syntax unified
 753              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 754 0026 4FF01003 			mov r3, #16												
 755 002a 83F31188 		msr basepri, r3											
 756 002e BFF36F8F 		isb														
 757 0032 BFF34F8F 		dsb														
 758              	
 759              	@ 0 "" 2
 760              	.LVL77:
 761              		.thumb
 762              		.syntax unified
 763              	.L65:
 764 0036 FEE7     		b	.L65
 765              	.LVL78:
 766              	.L64:
 767              	.LBE57:
 768              	.LBE56:
 187:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 769              		.loc 1 187 0
ARM GAS  /tmp/cc7aTtvB.s 			page 32


 770 0038 FFF7FEFF 		bl	xTaskGetSchedulerState
 771              	.LVL79:
 772 003c 58B9     		cbnz	r0, .L76
 187:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 773              		.loc 1 187 0 is_stmt 0 discriminator 2
 774 003e 67B9     		cbnz	r7, .L77
 187:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 775              		.loc 1 187 0
 776 0040 0123     		movs	r3, #1
 777              	.L66:
 187:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 778              		.loc 1 187 0 discriminator 6
 779 0042 63B9     		cbnz	r3, .L67
 780              	.LBB58:
 781              	.LBB59:
 195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 782              		.loc 2 195 0 is_stmt 1
 783              		.syntax unified
 784              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 785 0044 4FF01003 			mov r3, #16												
 786 0048 83F31188 		msr basepri, r3											
 787 004c BFF36F8F 		isb														
 788 0050 BFF34F8F 		dsb														
 789              	
 790              	@ 0 "" 2
 791              	.LVL80:
 792              		.thumb
 793              		.syntax unified
 794              	.L68:
 795 0054 FEE7     		b	.L68
 796              	.L76:
 797              	.LBE59:
 798              	.LBE58:
 187:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 799              		.loc 1 187 0
 800 0056 0123     		movs	r3, #1
 801 0058 F3E7     		b	.L66
 802              	.L77:
 803 005a 0023     		movs	r3, #0
 804 005c F1E7     		b	.L66
 805              	.L67:
 191:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 806              		.loc 1 191 0
 807 005e FFF7FEFF 		bl	vTaskSuspendAll
 808              	.LVL81:
 193:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 809              		.loc 1 193 0
 810 0062 3468     		ldr	r4, [r6]
 811              	.LVL82:
 195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 812              		.loc 1 195 0
 813 0064 4146     		mov	r1, r8
 814 0066 3046     		mov	r0, r6
 815 0068 FFF7FEFF 		bl	xEventGroupSetBits
 816              	.LVL83:
 197:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 817              		.loc 1 197 0
ARM GAS  /tmp/cc7aTtvB.s 			page 33


 818 006c 44EA0804 		orr	r4, r4, r8
 819              	.LVL84:
 820 0070 35EA0403 		bics	r3, r5, r4
 821 0074 26D1     		bne	.L69
 822              	.LVL85:
 204:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 823              		.loc 1 204 0
 824 0076 3368     		ldr	r3, [r6]
 825 0078 23EA0503 		bic	r3, r3, r5
 826 007c 3360     		str	r3, [r6]
 827              	.LVL86:
 206:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 828              		.loc 1 206 0
 829 007e 0027     		movs	r7, #0
 830              	.LVL87:
 831              	.L70:
 234:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 832              		.loc 1 234 0
 833 0080 FFF7FEFF 		bl	xTaskResumeAll
 834              	.LVL88:
 236:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 835              		.loc 1 236 0
 836 0084 DFB1     		cbz	r7, .L61
 238:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 837              		.loc 1 238 0
 838 0086 38B9     		cbnz	r0, .L73
 240:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 839              		.loc 1 240 0
 840 0088 4FF08052 		mov	r2, #268435456
 841 008c 134B     		ldr	r3, .L80
 842 008e 1A60     		str	r2, [r3]
 843              		.syntax unified
 844              	@ 240 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c" 1
 845 0090 BFF34F8F 		dsb
 846              	@ 0 "" 2
 847              	@ 240 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c" 1
 848 0094 BFF36F8F 		isb
 849              	@ 0 "" 2
 850              		.thumb
 851              		.syntax unified
 852              	.L73:
 251:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 853              		.loc 1 251 0
 854 0098 FFF7FEFF 		bl	uxTaskResetEventItemValue
 855              	.LVL89:
 856 009c 0446     		mov	r4, r0
 857              	.LVL90:
 253:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 858              		.loc 1 253 0
 859 009e 10F0007F 		tst	r0, #33554432
 860 00a2 0AD1     		bne	.L74
 256:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 861              		.loc 1 256 0
 862 00a4 FFF7FEFF 		bl	vPortEnterCritical
 863              	.LVL91:
 258:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 864              		.loc 1 258 0
ARM GAS  /tmp/cc7aTtvB.s 			page 34


 865 00a8 3468     		ldr	r4, [r6]
 866              	.LVL92:
 264:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 867              		.loc 1 264 0
 868 00aa 35EA0403 		bics	r3, r5, r4
 869 00ae 02D1     		bne	.L75
 266:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 870              		.loc 1 266 0
 871 00b0 24EA0505 		bic	r5, r4, r5
 872              	.LVL93:
 873 00b4 3560     		str	r5, [r6]
 874              	.L75:
 273:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 875              		.loc 1 273 0
 876 00b6 FFF7FEFF 		bl	vPortExitCritical
 877              	.LVL94:
 878              	.L74:
 284:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 879              		.loc 1 284 0
 880 00ba 24F07F44 		bic	r4, r4, #-16777216
 881              	.LVL95:
 882              	.L61:
 293:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 883              		.loc 1 293 0
 884 00be 2046     		mov	r0, r4
 885 00c0 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 886              	.LVL96:
 887              	.L69:
 210:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 888              		.loc 1 210 0
 889 00c4 3FB1     		cbz	r7, .L71
 217:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 890              		.loc 1 217 0
 891 00c6 3A46     		mov	r2, r7
 892 00c8 45F0A061 		orr	r1, r5, #83886080
 893 00cc 301D     		adds	r0, r6, #4
 894 00ce FFF7FEFF 		bl	vTaskPlaceOnUnorderedEventList
 895              	.LVL97:
 223:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 896              		.loc 1 223 0
 897 00d2 0024     		movs	r4, #0
 898 00d4 D4E7     		b	.L70
 899              	.LVL98:
 900              	.L71:
 229:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				xTimeoutOccurred = pdTRUE;
 901              		.loc 1 229 0
 902 00d6 3468     		ldr	r4, [r6]
 903              	.LVL99:
 904 00d8 D2E7     		b	.L70
 905              	.L81:
 906 00da 00BF     		.align	2
 907              	.L80:
 908 00dc 04ED00E0 		.word	-536810236
 909              		.cfi_endproc
 910              	.LFE6:
 912              		.section	.text.vEventGroupDelete,"ax",%progbits
 913              		.align	1
ARM GAS  /tmp/cc7aTtvB.s 			page 35


 914              		.global	vEventGroupDelete
 915              		.syntax unified
 916              		.thumb
 917              		.thumb_func
 918              		.fpu fpv4-sp-d16
 920              	vEventGroupDelete:
 921              	.LFB11:
 599:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 922              		.loc 1 599 0
 923              		.cfi_startproc
 924              		@ args = 0, pretend = 0, frame = 0
 925              		@ frame_needed = 0, uses_anonymous_args = 0
 926              	.LVL100:
 927 0000 10B5     		push	{r4, lr}
 928              	.LCFI7:
 929              		.cfi_def_cfa_offset 8
 930              		.cfi_offset 4, -8
 931              		.cfi_offset 14, -4
 932 0002 0446     		mov	r4, r0
 933              	.LVL101:
 603:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 934              		.loc 1 603 0
 935 0004 FFF7FEFF 		bl	vTaskSuspendAll
 936              	.LVL102:
 937              	.L83:
 607:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 938              		.loc 1 607 0
 939 0008 6368     		ldr	r3, [r4, #4]
 940 000a 93B1     		cbz	r3, .L88
 611:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO
 941              		.loc 1 611 0
 942 000c 2069     		ldr	r0, [r4, #16]
 943 000e 04F10C03 		add	r3, r4, #12
 944 0012 9842     		cmp	r0, r3
 945 0014 04D0     		beq	.L89
 612:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 946              		.loc 1 612 0
 947 0016 4FF00071 		mov	r1, #33554432
 948 001a FFF7FEFF 		bl	vTaskRemoveFromUnorderedEventList
 949              	.LVL103:
 950 001e F3E7     		b	.L83
 951              	.L89:
 952              	.LBB60:
 953              	.LBB61:
 195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 954              		.loc 2 195 0
 955              		.syntax unified
 956              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 957 0020 4FF01003 			mov r3, #16												
 958 0024 83F31188 		msr basepri, r3											
 959 0028 BFF36F8F 		isb														
 960 002c BFF34F8F 		dsb														
 961              	
 962              	@ 0 "" 2
 963              	.LVL104:
 964              		.thumb
 965              		.syntax unified
ARM GAS  /tmp/cc7aTtvB.s 			page 36


 966              	.L85:
 967 0030 FEE7     		b	.L85
 968              	.L88:
 969              	.LBE61:
 970              	.LBE60:
 619:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 971              		.loc 1 619 0
 972 0032 2046     		mov	r0, r4
 973 0034 FFF7FEFF 		bl	vPortFree
 974              	.LVL105:
 636:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 975              		.loc 1 636 0
 976 0038 FFF7FEFF 		bl	xTaskResumeAll
 977              	.LVL106:
 978 003c 10BD     		pop	{r4, pc}
 979              		.cfi_endproc
 980              	.LFE11:
 982              		.section	.text.vEventGroupSetBitsCallback,"ax",%progbits
 983              		.align	1
 984              		.global	vEventGroupSetBitsCallback
 985              		.syntax unified
 986              		.thumb
 987              		.thumb_func
 988              		.fpu fpv4-sp-d16
 990              	vEventGroupSetBitsCallback:
 991              	.LFB12:
 643:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 992              		.loc 1 643 0
 993              		.cfi_startproc
 994              		@ args = 0, pretend = 0, frame = 0
 995              		@ frame_needed = 0, uses_anonymous_args = 0
 996              	.LVL107:
 997 0000 08B5     		push	{r3, lr}
 998              	.LCFI8:
 999              		.cfi_def_cfa_offset 8
 1000              		.cfi_offset 3, -8
 1001              		.cfi_offset 14, -4
 644:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 1002              		.loc 1 644 0
 1003 0002 FFF7FEFF 		bl	xEventGroupSetBits
 1004              	.LVL108:
 1005 0006 08BD     		pop	{r3, pc}
 1006              		.cfi_endproc
 1007              	.LFE12:
 1009              		.section	.text.vEventGroupClearBitsCallback,"ax",%progbits
 1010              		.align	1
 1011              		.global	vEventGroupClearBitsCallback
 1012              		.syntax unified
 1013              		.thumb
 1014              		.thumb_func
 1015              		.fpu fpv4-sp-d16
 1017              	vEventGroupClearBitsCallback:
 1018              	.LFB13:
 651:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
 1019              		.loc 1 651 0
 1020              		.cfi_startproc
 1021              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/cc7aTtvB.s 			page 37


 1022              		@ frame_needed = 0, uses_anonymous_args = 0
 1023              	.LVL109:
 1024 0000 08B5     		push	{r3, lr}
 1025              	.LCFI9:
 1026              		.cfi_def_cfa_offset 8
 1027              		.cfi_offset 3, -8
 1028              		.cfi_offset 14, -4
 652:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 1029              		.loc 1 652 0
 1030 0002 FFF7FEFF 		bl	xEventGroupClearBits
 1031              	.LVL110:
 1032 0006 08BD     		pop	{r3, pc}
 1033              		.cfi_endproc
 1034              	.LFE13:
 1036              		.text
 1037              	.Letext0:
 1038              		.file 3 "/usr/include/newlib/machine/_default_types.h"
 1039              		.file 4 "/usr/include/newlib/sys/lock.h"
 1040              		.file 5 "/usr/include/newlib/sys/_types.h"
 1041              		.file 6 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 1042              		.file 7 "/usr/include/newlib/sys/reent.h"
 1043              		.file 8 "/usr/include/newlib/stdlib.h"
 1044              		.file 9 "/usr/include/newlib/sys/_stdint.h"
 1045              		.file 10 "../../core/platform/octa/inc/FreeRTOSConfig.h"
 1046              		.file 11 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/include/list.h"
 1047              		.file 12 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/include/event_groups.h"
 1048              		.file 13 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 1049              		.file 14 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/include/portable.h"
ARM GAS  /tmp/cc7aTtvB.s 			page 38


DEFINED SYMBOLS
                            *ABS*:0000000000000000 event_groups.c
     /tmp/cc7aTtvB.s:18     .text.prvTestWaitCondition:0000000000000000 $t
     /tmp/cc7aTtvB.s:24     .text.prvTestWaitCondition:0000000000000000 prvTestWaitCondition
     /tmp/cc7aTtvB.s:68     .text.xEventGroupCreate:0000000000000000 $t
     /tmp/cc7aTtvB.s:75     .text.xEventGroupCreate:0000000000000000 xEventGroupCreate
     /tmp/cc7aTtvB.s:108    .text.xEventGroupWaitBits:0000000000000000 $t
     /tmp/cc7aTtvB.s:115    .text.xEventGroupWaitBits:0000000000000000 xEventGroupWaitBits
     /tmp/cc7aTtvB.s:375    .text.xEventGroupWaitBits:0000000000000114 $d
     /tmp/cc7aTtvB.s:381    .text.xEventGroupClearBits:0000000000000000 $t
     /tmp/cc7aTtvB.s:388    .text.xEventGroupClearBits:0000000000000000 xEventGroupClearBits
     /tmp/cc7aTtvB.s:479    .text.xEventGroupGetBitsFromISR:0000000000000000 $t
     /tmp/cc7aTtvB.s:486    .text.xEventGroupGetBitsFromISR:0000000000000000 xEventGroupGetBitsFromISR
     /tmp/cc7aTtvB.s:530    .text.xEventGroupSetBits:0000000000000000 $t
     /tmp/cc7aTtvB.s:537    .text.xEventGroupSetBits:0000000000000000 xEventGroupSetBits
     /tmp/cc7aTtvB.s:696    .text.xEventGroupSync:0000000000000000 $t
     /tmp/cc7aTtvB.s:703    .text.xEventGroupSync:0000000000000000 xEventGroupSync
     /tmp/cc7aTtvB.s:908    .text.xEventGroupSync:00000000000000dc $d
     /tmp/cc7aTtvB.s:913    .text.vEventGroupDelete:0000000000000000 $t
     /tmp/cc7aTtvB.s:920    .text.vEventGroupDelete:0000000000000000 vEventGroupDelete
     /tmp/cc7aTtvB.s:983    .text.vEventGroupSetBitsCallback:0000000000000000 $t
     /tmp/cc7aTtvB.s:990    .text.vEventGroupSetBitsCallback:0000000000000000 vEventGroupSetBitsCallback
     /tmp/cc7aTtvB.s:1010   .text.vEventGroupClearBitsCallback:0000000000000000 $t
     /tmp/cc7aTtvB.s:1017   .text.vEventGroupClearBitsCallback:0000000000000000 vEventGroupClearBitsCallback
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
pvPortMalloc
vListInitialise
xTaskGetSchedulerState
vTaskSuspendAll
xTaskResumeAll
uxTaskResetEventItemValue
vPortEnterCritical
vPortExitCritical
vTaskPlaceOnUnorderedEventList
vTaskRemoveFromUnorderedEventList
vPortFree
