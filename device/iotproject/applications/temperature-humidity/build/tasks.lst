ARM GAS  /tmp/cc60zarx.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"tasks.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv4-sp-d16
  24              	prvTaskIsTaskSuspended:
  25              	.LFB14:
  26              		.file 1 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c"
   1:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
   2:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * FreeRTOS Kernel V10.0.1
   3:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
   5:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the Software without restriction, including without limitation the rights to
   8:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * subject to the following conditions:
  11:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  12:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The above copyright notice and this permission notice shall be included in all
  13:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * copies or substantial portions of the Software.
  14:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  15:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  22:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * http://www.FreeRTOS.org
  23:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * http://aws.amazon.com/freertos
  24:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  25:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * 1 tab == 4 spaces!
  26:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
  27:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  28:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Standard includes. */
  29:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include <stdlib.h>
  30:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include <string.h>
  31:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  32:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
ARM GAS  /tmp/cc60zarx.s 			page 2


  33:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  34:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** task.h is included from an application file. */
  35:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  36:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  37:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* FreeRTOS includes. */
  38:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "FreeRTOS.h"
  39:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "task.h"
  40:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "timers.h"
  41:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "stack_macros.h"
  42:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  43:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  44:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  45:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** header files above, but not in this file, in order to generate the correct
  46:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** privileged Vs unprivileged linkage and placement. */
  47:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
  48:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  49:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  50:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** functions but without including stdio.h here. */
  51:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  52:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
  53:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	to generate human readable text from the raw data generated by the
  54:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
  55:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  56:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#include <stdio.h>
  57:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
  58:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  59:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_PREEMPTION == 0 )
  60:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If the cooperative scheduler is being used then a yield should not be
  61:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed just because a higher priority task has been woken. */
  62:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION()
  63:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
  64:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
  65:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
  66:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  67:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
  68:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskNOT_WAITING_NOTIFICATION	( ( uint8_t ) 0 )
  69:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskWAITING_NOTIFICATION		( ( uint8_t ) 1 )
  70:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskNOTIFICATION_RECEIVED		( ( uint8_t ) 2 )
  71:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  72:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
  73:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
  74:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * is used purely for checking the high water mark for tasks.
  75:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
  76:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
  77:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  78:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Sometimes the FreeRTOSConfig.h settings only allow a task to be created using
  79:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** dynamically allocated RAM, in which case when any task is deleted it is known
  80:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** that both the task's stack and TCB need to be freed.  Sometimes the
  81:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** FreeRTOSConfig.h settings only allow a task to be created using statically
  82:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** allocated RAM, in which case when any task is deleted it is known that neither
  83:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the task's stack or TCB should be freed.  Sometimes the FreeRTOSConfig.h
  84:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** settings allow a task to be created using either statically or dynamically
  85:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** allocated RAM, in which case a member of the TCB is used to record whether the
  86:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** stack and/or TCB were allocated statically or dynamically, so when a task is
  87:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** deleted the RAM that was allocated dynamically is freed again and no attempt is
  88:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** made to free the RAM that was allocated statically.
  89:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE is only true if it is possible for a
ARM GAS  /tmp/cc60zarx.s 			page 3


  90:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** task to be created using either statically or dynamically allocated RAM.  Note
  91:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** that if portUSING_MPU_WRAPPERS is 1 then a protected task can be created with
  92:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** a statically allocated stack and a dynamically allocated TCB.
  93:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** !!!NOTE!!! If the definition of tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE is
  94:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** changed then the definition of StaticTask_t must also be updated. */
  95:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE	( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( c
  96:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB 		( ( uint8_t ) 0 )
  97:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY 			( ( uint8_t ) 1 )
  98:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB		( ( uint8_t ) 2 )
  99:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 100:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* If any of the following are set then task stacks are filled with a known
 101:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** value so the high water mark can be determined.  If none of the following are
 102:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** set then don't fill the stack so there is no unnecessary dependency on memset. */
 103:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTas
 104:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	1
 105:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
 106:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	0
 107:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 108:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 109:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 110:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
 111:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 112:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskRUNNING_CHAR		( 'X' )
 113:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskBLOCKED_CHAR		( 'B' )
 114:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskREADY_CHAR		( 'R' )
 115:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskDELETED_CHAR		( 'D' )
 116:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSUSPENDED_CHAR	( 'S' )
 117:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 118:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 119:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to be
 120:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * global, rather than file scope.
 121:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 122:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 123:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define static
 124:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 125:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 126:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The name allocated to the Idle task.  This can be overridden by defining
 127:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** configIDLE_TASK_NAME in FreeRTOSConfig.h. */
 128:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifndef configIDLE_TASK_NAME
 129:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define configIDLE_TASK_NAME "IDLE"
 130:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 131:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 132:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 133:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 134:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 135:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed in a generic way that is not optimised to any particular
 136:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	microcontroller architecture. */
 137:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 138:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 139:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	state task. */
 140:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )														\
 141:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 142:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )														\
 143:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 144:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxTopReadyPriority = ( uxPriority );														\
 145:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 146:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
ARM GAS  /tmp/cc60zarx.s 			page 4


 147:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 148:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 149:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 150:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()															\
 151:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 152:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority = uxTopReadyPriority;														\
 153:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																										\
 154:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */								\
 155:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) )							\
 156:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 157:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( uxTopPriority );																\
 158:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			--uxTopPriority;																			\
 159:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 160:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																										\
 161:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
 162:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the	same priority get an equal share of the processor time. */									\
 163:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );			\
 164:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxTopReadyPriority = uxTopPriority;																\
 165:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 166:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 167:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 168:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 169:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 170:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	they are only required when a port optimised method of task selection is
 171:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	being used. */
 172:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 173:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 174:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 175:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 176:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 177:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 178:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
 179:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	architecture being used. */
 180:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 181:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 182:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
 183:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 184:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 185:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 186:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 187:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																								\
 188:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority;																		\
 189:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 190:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority list that contains ready tasks. */								\
 191:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 192:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 193:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 194:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 196:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 197:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 198:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 199:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 200:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	or suspended list then it won't be in a ready list. */
 201:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )														\
 202:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 203:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 0 )	\
ARM GAS  /tmp/cc60zarx.s 			page 5


 204:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 205:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
 206:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 207:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 208:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 209:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 210:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 211:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 212:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 213:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 214:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** count overflows. */
 215:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
 216:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {																									\
 217:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	List_t *pxTemp;																					\
 218:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 219:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
 220:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
 221:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 222:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
 223:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
 224:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
 225:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xNumOfOverflows++;																				\
 226:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvResetNextTaskUnblockTime();																	\
 227:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 228:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 229:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 230:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 231:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 232:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 233:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the task.  It is inserted at the end of the list.
 234:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 235:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define prvAddTaskToReadyList( pxTCB )																\
 236:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB );														\
 237:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 238:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem ) );
 239:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 240:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 241:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 242:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 243:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 244:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 245:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 246:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 247:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 248:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? ( TCB_t * ) pxCurrentTCB : ( T
 249:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 250:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 251:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** of the task to which it belongs (coded to allow it to be held in reverse
 252:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** priority order).  However, it is occasionally borrowed for other purposes.  It
 253:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** is important its value is not updated due to a task priority change while it is
 254:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** being used for another purpose.  The following bit definition is used to inform
 255:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the scheduler that the value should not be changed - in which case it is the
 256:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** responsibility of whichever module is using the value to ensure it gets set back
 257:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** to its original value when it is released. */
 258:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_16_BIT_TICKS == 1 )
 259:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
 260:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
ARM GAS  /tmp/cc60zarx.s 			page 6


 261:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
 262:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 263:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 264:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 265:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 266:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * and stores task state information, including a pointer to the task's context
 267:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * (the task's run time environment, including register values)
 268:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 269:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** typedef struct tskTaskControlBlock
 270:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 271:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile StackType_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the task
 272:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 273:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 274:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MU
 275:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 276:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 277:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	ListItem_t			xStateListItem;	/*< The list that the state list item of a task is reference from den
 278:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
 279:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 280:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	StackType_t			*pxStack;			/*< Points to the start of the stack. */
 281:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.
 282:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 283:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( ( portSTACK_GROWTH > 0 ) || ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
 284:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t		*pxEndOfStack;		/*< Points to the highest valid address for the stack. */
 285:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 286:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 287:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 288:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxCriticalNesting;	/*< Holds the critical section nesting depth for ports that do no
 289:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 290:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 291:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 292:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It al
 293:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. *
 294:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 295:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 296:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 297:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxBasePriority;		/*< The priority last assigned to the task - used by the priority i
 298:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxMutexesHeld;
 299:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 300:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 301:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 302:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TaskHookFunction_t pxTaskTag;
 303:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 304:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 305:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 306:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		void			*pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 307:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 308:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 309:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configGENERATE_RUN_TIME_STATS == 1 )
 310:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state
 311:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 312:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 313:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 314:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 315:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Note Newlib support has been included by popular demand, but is not
 316:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 317:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
ARM GAS  /tmp/cc60zarx.s 			page 7


 318:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		newlib and must provide system-wide implementations of the necessary
 319:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
 320:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		implements a system-wide malloc() that must be provided with locks. */
 321:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		struct	_reent xNewLib_reent;
 322:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 323:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 324:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_TASK_NOTIFICATIONS == 1 )
 325:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		volatile uint32_t ulNotifiedValue;
 326:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		volatile uint8_t ucNotifyState;
 327:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 328:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 329:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* See the comments above the definition of
 330:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 331:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for
 332:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint8_t	ucStaticallyAllocated; 		/*< Set to pdTRUE if the task is a statically allocated to ensur
 333:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 334:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 335:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 336:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint8_t ucDelayAborted;
 337:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 338:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 339:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** } tskTCB;
 340:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 341:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 342:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** below to enable the use of older kernel aware debuggers. */
 343:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** typedef tskTCB TCB_t;
 344:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 345:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*lint -save -e956 A manual analysis and inspection has been used to determine
 346:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** which static variables must be declared volatile. */
 347:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 348:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 349:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 350:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Lists for ready and blocked tasks. --------------------*/
 351:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ] = {0};	/*< Prioritised read
 352:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1 = {0};								/*< Delayed tasks. */
 353:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2 = {0};								/*< Delayed tasks (two lists are used
 354:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList = NULL;					/*< Points to the delayed ta
 355:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList = NULL;			/*< Points to the dela
 356:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList = {0};								/*< Tasks that have been readied whil
 357:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 358:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( INCLUDE_vTaskDelete == 1 )
 359:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 360:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xTasksWaitingTermination = {0};					/*< Tasks that have been deleted
 361:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 362:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 363:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 364:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 365:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 366:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 367:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xSuspendedTaskList = {0};						/*< Tasks that are currently suspende
 368:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 369:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 370:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 371:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Other file private variables. --------------------------------*/
 372:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks 	= ( UBaseType_t ) 0U;
 373:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount 				= ( TickType_t ) configINITIAL_TICK_COUNT
 374:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
ARM GAS  /tmp/cc60zarx.s 			page 8


 375:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning 		= pdFALSE;
 376:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxPendedTicks 			= ( UBaseType_t ) 0U;
 377:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending 			= pdFALSE;
 378:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows 			= ( BaseType_t ) 0;
 379:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber 					= ( UBaseType_t ) 0U;
 380:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime		= ( TickType_t ) 0U; /* Initialise
 381:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle					= NULL;			/*< Holds the handle of the idle 
 382:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 383:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 384:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** interrupts must not manipulate the xStateListItem of a TCB, or any of the
 385:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** lists the xStateListItem can be referenced from, if the scheduler is suspended.
 386:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** If an interrupt needs to unblock a task while the scheduler is suspended then it
 387:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** moves the task's event list item into the xPendingReadyList, ready for the
 388:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** kernel to move the task from the pending ready list into the real ready list
 389:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** when the scheduler is unsuspended.  The pending ready list itself can only be
 390:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** accessed from a critical section. */
 391:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended	= ( UBaseType_t ) pdFALSE;
 392:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 393:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 394:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 395:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/counter
 396:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of execution tim
 397:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 398:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 399:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 400:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*lint -restore */
 401:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 402:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 403:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 404:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Callback function prototypes. --------------------------*/
 405:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if(  configCHECK_FOR_STACK_OVERFLOW > 0 )
 406:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
 407:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 408:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 409:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TICK_HOOK > 0 )
 410:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationTickHook( void );
 411:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 412:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 413:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 414:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxI
 415:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 416:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 417:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* File private functions. --------------------------------*/
 418:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 419:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /**
 420:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 421:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 422:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * is in any other state.
 423:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 424:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 425:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 426:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 427:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 428:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 429:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 430:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 431:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
ARM GAS  /tmp/cc60zarx.s 			page 9


 432:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * automatically upon the creation of the first task.
 433:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 434:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 435:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 436:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 437:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 438:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 439:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * creation of the first user task.
 440:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 441:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 442:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 443:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 444:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
 445:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 446:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 447:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 448:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 449:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 450:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 451:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * including the stack pointed to by the TCB.
 452:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 453:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 454:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 455:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 456:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 457:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 458:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB ) PRIVILEGED_FUNCTION;
 459:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 460:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 461:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 462:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 463:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 464:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 465:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * and its TCB deleted.
 466:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 467:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 468:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 469:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 470:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 471:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * either the current or the overflow delayed task list.
 472:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 473:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
 474:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 475:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 476:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 477:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 478:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * a suspended list, etc.).
 479:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 480:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 481:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * NORMAL APPLICATION CODE.
 482:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 483:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 484:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 485:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
 486:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 487:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 488:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cc60zarx.s 			page 10


 489:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 490:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
 491:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 492:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 493:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 494:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 495:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] ) PRIVI
 496:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 497:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 498:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 499:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 500:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 501:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 502:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * determining how much of the stack remains at the original preset value.
 503:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 504:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
 505:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 506:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVILEGED_FUNCTION;
 507:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 508:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 509:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 510:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 511:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 512:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * next move a task from the Blocked state to the Running state.
 513:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 514:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 515:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 516:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 517:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * set to a value other than 1.
 518:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 519:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 520:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 521:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 522:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 523:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 524:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 525:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 526:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 527:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * will exit the Blocked state.
 528:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 529:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void );
 530:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 531:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 532:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 533:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*
 534:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 * Helper function used to pad task names with spaces when printing out
 535:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 * human readable tables of task information.
 536:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 */
 537:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName ) PRIVILEGED_FUNCTION;
 538:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 539:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 540:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 541:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 542:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
 543:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * dynamically to fill in the structure's members.
 544:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 545:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
ARM GAS  /tmp/cc60zarx.s 			page 11


 546:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName, 		/*lint !e971 Unqualified char types are allowed for strings a
 547:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 548:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 549:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 550:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 551:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
 552:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION;
 553:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 554:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 555:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Called after a new task has been created and initialised to place the task
 556:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * under the control of the scheduler.
 557:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 558:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB ) PRIVILEGED_FUNCTION;
 559:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 560:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 561:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * freertos_tasks_c_additions_init() should only be called if the user definable
 562:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is the only macro
 563:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * called by the function.
 564:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 565:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
 566:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 567:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void freertos_tasks_c_additions_init( void ) PRIVILEGED_FUNCTION;
 568:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 569:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 570:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 571:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 572:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 573:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 574:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 575:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskCreateStatic(	TaskFunction_t pxTaskCode,
 576:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 577:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 578:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 579:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 580:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									StackType_t * const puxStackBuffer,
 581:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									StaticTask_t * const pxTaskBuffer )
 582:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 583:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 584:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
 585:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 586:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( puxStackBuffer != NULL );
 587:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 588:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 589:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configASSERT_DEFINED == 1 )
 590:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 591:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Sanity check that the size of the structure used to declare a
 592:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			variable of type StaticTask_t equals the size of the real task
 593:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure. */
 594:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			volatile size_t xSize = sizeof( StaticTask_t );
 595:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( xSize == sizeof( TCB_t ) );
 596:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 597:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configASSERT_DEFINED */
 598:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 599:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 600:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 601:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 602:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The memory used for the task's TCB and stack are passed into this
ARM GAS  /tmp/cc60zarx.s 			page 12


 603:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function - use them. */
 604:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are desig
 605:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 606:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 607:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated f
 608:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 609:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 610:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 611:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 612:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 613:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 614:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 615:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNe
 616:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 617:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 618:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 619:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 620:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = NULL;
 621:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 622:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 623:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 624:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 625:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 626:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 627:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 628:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 629:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 630:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 631:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreateRestrictedStatic( const TaskParameters_t * const pxTaskDefinition, TaskHandl
 632:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 633:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 634:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 635:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 636:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer != NULL );
 637:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->pxTaskBuffer != NULL );
 638:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 639:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTaskDefinition->puxStackBuffer != NULL ) && ( pxTaskDefinition->pxTaskBuffer != NULL ) )
 640:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 641:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 642:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 643:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not static allocation is being used. */
 644:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskDefinition->pxTaskBuffer;
 645:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 646:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Store the stack location in the TCB. */
 647:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 648:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 649:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 650:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 651:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 652:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 653:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 654:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 655:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 656:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 657:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 658:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->pcName,
 659:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									( uint32_t ) pxTaskDefinition->usStackDepth,
ARM GAS  /tmp/cc60zarx.s 			page 13


 660:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->pvParameters,
 661:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->uxPriority,
 662:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxCreatedTask, pxNewTCB,
 663:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->xRegions );
 664:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 665:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 666:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 667:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 668:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 669:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 670:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 671:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 672:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
 673:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 674:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 675:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 676:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 677:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition, TaskHandle_t *p
 678:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 679:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 680:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 681:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 682:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer );
 683:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 684:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskDefinition->puxStackBuffer != NULL )
 685:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 686:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 687:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 688:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not static allocation is being used. */
 689:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 690:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 691:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 692:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 693:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Store the stack location in the TCB. */
 694:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 695:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 696:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 697:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 698:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Tasks can be created statically or dynamically, so note
 699:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task had a statically allocated stack in case it is
 700:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					later deleted.  The TCB was allocated dynamically. */
 701:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 702:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 703:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
 704:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 705:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 706:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pcName,
 707:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										( uint32_t ) pxTaskDefinition->usStackDepth,
 708:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pvParameters,
 709:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->uxPriority,
 710:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxCreatedTask, pxNewTCB,
 711:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->xRegions );
 712:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 713:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddNewTaskToReadyList( pxNewTCB );
 714:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 715:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 716:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/cc60zarx.s 			page 14


 717:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 718:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 719:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 720:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 721:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 722:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 723:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 724:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 725:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 726:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
 727:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and 
 728:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							const configSTACK_DEPTH_TYPE usStackDepth,
 729:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							void * const pvParameters,
 730:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							UBaseType_t uxPriority,
 731:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							TaskHandle_t * const pxCreatedTask )
 732:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 733:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 734:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 735:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 736:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the stack grows down then allocate the stack then the TCB so the stack
 737:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		does not grow into the TCB.  Likewise if the stack grows up then allocate
 738:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the TCB then the stack. */
 739:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( portSTACK_GROWTH > 0 )
 740:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 741:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends on
 742:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the implementation of the port malloc function and whether or not static
 743:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			allocation is being used. */
 744:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 745:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 746:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 747:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 748:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the stack used by the task being created.
 749:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				The base of the stack memory stored in the TCB so the task can
 750:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				be deleted later if required. */
 751:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( Sta
 752:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 753:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB->pxStack == NULL )
 754:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 755:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Could not allocate the stack.  Delete the allocated TCB. */
 756:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vPortFree( pxNewTCB );
 757:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB = NULL;
 758:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 759:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 760:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 761:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else /* portSTACK_GROWTH */
 762:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 763:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxStack;
 764:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 765:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the stack used by the task being created. */
 766:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) 
 767:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 768:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxStack != NULL )
 769:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 770:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the TCB. */
 771:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the cas
 772:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 773:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB != NULL )
ARM GAS  /tmp/cc60zarx.s 			page 15


 774:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 775:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Store the stack location in the TCB. */
 776:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB->pxStack = pxStack;
 777:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 778:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
 779:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 780:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The stack cannot be used as the TCB was not created.  Free
 781:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it again. */
 782:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vPortFree( pxStack );
 783:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 784:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 785:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
 786:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 787:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB = NULL;
 788:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 789:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 790:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* portSTACK_GROWTH */
 791:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 792:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxNewTCB != NULL )
 793:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 794:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated f
 795:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 796:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 797:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created dynamically in case it is later deleted. */
 798:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 799:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 800:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 801:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 802:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, p
 803:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 804:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 805:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 806:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 807:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 808:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 809:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 810:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 811:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 812:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 813:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 814:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 815:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 816:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 817:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 818:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 819:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 820:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 821:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 822:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 823:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
 824:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions )
 825:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 826:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** StackType_t *pxTopOfStack;
 827:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t x;
 828:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 829:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 830:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Should the task be created in privileged mode? */
ARM GAS  /tmp/cc60zarx.s 			page 16


 831:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		BaseType_t xRunPrivileged;
 832:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 833:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 834:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdTRUE;
 835:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 836:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 837:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 838:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdFALSE;
 839:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 840:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxPriority &= ~portPRIVILEGE_BIT;
 841:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS == 1 */
 842:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 843:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Avoid dependency on memset() if it is not required. */
 844:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
 845:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 846:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Fill the stack with a known value to assist debugging. */
 847:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof(
 848:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 849:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* tskSET_NEW_STACKS_TO_KNOWN_VALUE */
 850:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 851:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Calculate the top of stack address.  This depends on whether the stack
 852:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	grows from high memory to low (as per the 80x86) or vice versa.
 853:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portSTACK_GROWTH is used to make the result positive or negative as required
 854:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	by the port. */
 855:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portSTACK_GROWTH < 0 )
 856:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 857:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 858:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 859:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 860:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the calculated top of stack is correct. */
 861:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALI
 862:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 863:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
 864:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 865:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Also record the stack's high address, which may assist
 866:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			debugging. */
 867:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxEndOfStack = pxTopOfStack;
 868:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 869:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configRECORD_STACK_HIGH_ADDRESS */
 870:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 871:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* portSTACK_GROWTH */
 872:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 873:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack;
 874:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 875:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the stack buffer is correct. */
 876:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBYT
 877:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 878:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The other extreme of the stack space is required if stack checking is
 879:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		performed. */
 880:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 881:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 882:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portSTACK_GROWTH */
 883:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 884:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the task name in the TCB. */
 885:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 886:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 887:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
ARM GAS  /tmp/cc60zarx.s 			page 17


 888:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 889:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 890:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configMAX_TASK_NAME_LEN characters just in case the memory after the
 891:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		string is not accessible (extremely unlikely). */
 892:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pcName[ x ] == 0x00 )
 893:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 894:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			break;
 895:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 896:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 897:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 898:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 899:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 900:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 901:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 902:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure the name string is terminated in the case that the string length
 903:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	was greater or equal to configMAX_TASK_NAME_LEN. */
 904:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 905:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 906:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
 907:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	remove the privilege bit if one is present. */
 908:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 909:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 910:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 911:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 912:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
 913:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 914:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 915:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 916:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 917:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxNewTCB->uxPriority = uxPriority;
 918:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 919:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 920:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxBasePriority = uxPriority;
 921:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 922:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 923:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_MUTEXES */
 924:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 925:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 926:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 927:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 928:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
 929:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
 930:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 931:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 932:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Event lists are always in priority order. */
 933:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( Ti
 934:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 935:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 936:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 937:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 938:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 939:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 940:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
 941:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 942:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 943:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 944:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTaskTag = NULL;
ARM GAS  /tmp/cc60zarx.s 			page 18


 945:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 946:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
 947:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 948:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 949:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 950:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulRunTimeCounter = 0UL;
 951:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 952:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
 953:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 954:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 955:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 956:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth
 957:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 958:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else
 959:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 960:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Avoid compiler warning about unreferenced parameter. */
 961:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xRegions;
 962:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 963:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 964:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 965:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
 966:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 967:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 968:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 969:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 970:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 971:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 972:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 973:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 974:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
 975:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 976:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulNotifiedValue = 0;
 977:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 978:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 979:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 980:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 981:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 982:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 983:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Initialise this task's Newlib reent structure. */
 984:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 985:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 986:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 987:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 988:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 989:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 990:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucDelayAborted = pdFALSE;
 991:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 992:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 993:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 994:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Initialize the TCB stack to look as if the task was already running,
 995:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	but had been interrupted by the scheduler.  The return address is set
 996:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	to the start of the task function. Once the stack has been initialised
 997:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the top of stack variable is updated. */
 998:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 999:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1000:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivi
1001:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
ARM GAS  /tmp/cc60zarx.s 			page 19


1002:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
1003:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1004:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
1005:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1006:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
1007:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1008:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( ( void * ) pxCreatedTask != NULL )
1009:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1010:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Pass the handle out in an anonymous way.  The handle can be used to
1011:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		change the created task's priority, delete the created task, etc.*/
1012:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1013:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1014:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
1015:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1016:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1017:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1018:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
1019:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1020:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1021:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
1022:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
1023:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
1024:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	updated. */
1025:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
1026:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1027:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxCurrentNumberOfTasks++;
1028:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB == NULL )
1029:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1030:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are no other tasks, or all the other tasks are in
1031:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the suspended state - make this the current task. */
1032:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB = pxNewTCB;
1033:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1034:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1035:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1036:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* This is the first task to be created so do the preliminary
1037:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				initialisation required.  We will not recover if this call
1038:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				fails, but we will report the failure. */
1039:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvInitialiseTaskLists();
1040:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1041:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1042:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1043:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1044:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1045:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1046:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1047:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1048:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the scheduler is not already running, make this task the
1049:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			current task if it is the highest priority task to be created
1050:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			so far. */
1051:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning == pdFALSE )
1052:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1053:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1054:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1055:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = pxNewTCB;
1056:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1057:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1058:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  /tmp/cc60zarx.s 			page 20


1059:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1060:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1061:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1062:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1063:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1064:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1065:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1066:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1067:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1068:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxTaskNumber++;
1069:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1070:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TRACE_FACILITY == 1 )
1071:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1072:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add a counter into the TCB for tracing only. */
1073:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->uxTCBNumber = uxTaskNumber;
1074:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1075:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TRACE_FACILITY */
1076:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_CREATE( pxNewTCB );
1077:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1078:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxNewTCB );
1079:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1080:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portSETUP_TCB( pxNewTCB );
1081:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1082:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
1083:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1084:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( xSchedulerRunning != pdFALSE )
1085:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1086:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the created task is of a higher priority than the current task
1087:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		then it should run now. */
1088:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1089:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1090:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskYIELD_IF_USING_PREEMPTION();
1091:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1092:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1093:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1094:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1095:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1096:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1097:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
1098:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1099:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1100:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1101:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
1102:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1103:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1104:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1105:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1106:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelete( TaskHandle_t xTaskToDelete )
1107:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1108:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1109:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1110:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1111:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1112:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the calling task that is
1113:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being deleted. */
1114:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
1115:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cc60zarx.s 			page 21


1116:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready list. */
1117:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1118:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1119:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1120:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1121:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1122:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1123:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1124:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1125:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1126:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1127:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1128:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1129:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1130:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1131:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1132:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1133:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1134:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1135:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1136:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Increment the uxTaskNumber also so kernel aware debuggers can
1137:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			detect that the task lists need re-generating.  This is done before
1138:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1139:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not return. */
1140:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxTaskNumber++;
1141:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1142:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1143:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1144:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task is deleting itself.  This cannot complete within the
1145:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task itself, as a context switch to another task is required.
1146:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				Place the task in the termination list.  The idle task will
1147:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				check the termination list and free up any memory allocated by
1148:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the scheduler for the TCB and stack of the deleted task. */
1149:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
1150:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1151:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Increment the ucTasksDeleted variable so the idle task knows
1152:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				there is a task that has been deleted and that it should therefore
1153:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				check the xTasksWaitingTermination list. */
1154:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				++uxDeletedTasksWaitingCleanUp;
1155:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1156:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The pre-delete hook is primarily for the Windows simulator,
1157:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				in which Windows specific clean up operations are performed,
1158:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				after which it is not possible to yield away from this task -
1159:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				hence xYieldPending is used to latch that a context switch is
1160:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				required. */
1161:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1162:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1163:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1164:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1165:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
1166:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
1167:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1168:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Reset the next expected unblock time in case it referred to
1169:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task that has just been deleted. */
1170:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
1171:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1172:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cc60zarx.s 			page 22


1173:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_DELETE( pxTCB );
1174:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1175:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1176:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1177:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if it is the currently running task that has just
1178:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been deleted. */
1179:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1180:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1181:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1182:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1183:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1184:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
1185:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1186:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1187:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1188:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1189:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1190:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1191:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1192:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1193:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1194:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1196:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
1197:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1198:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
1199:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1200:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xTimeToWake;
1201:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
1202:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1203:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxPreviousWakeTime );
1204:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
1205:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
1206:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1207:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
1208:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1209:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1210:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			block. */
1211:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
1212:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1213:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
1214:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1215:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1216:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
1217:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1218:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The tick count has overflowed since this function was
1219:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				lasted called.  In this case the only time we should ever
1220:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				actually delay is if the wake time has also	overflowed,
1221:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				and the wake time is greater than the tick time.  When this
1222:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is the case it is as if neither time had overflowed. */
1223:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1224:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1225:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
1226:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1227:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1228:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1229:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
ARM GAS  /tmp/cc60zarx.s 			page 23


1230:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1231:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1232:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1233:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1234:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
1235:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				delay if either the wake time has overflowed, and/or the
1236:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				tick time is less than the wake time. */
1237:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1238:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1239:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
1240:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1241:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1242:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1243:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1244:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1245:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1246:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1247:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Update the wake time ready for the next call. */
1248:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
1249:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1250:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xShouldDelay != pdFALSE )
1251:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1252:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY_UNTIL( xTimeToWake );
1253:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1254:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* prvAddCurrentTaskToDelayedList() needs the block time, not
1255:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the time to wake, so subtract the current tick count. */
1256:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1257:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1258:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1259:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1260:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1261:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1262:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1263:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
1264:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1265:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1266:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1267:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1268:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1269:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
1270:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1271:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1272:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1273:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1274:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1275:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1276:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1277:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
1278:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1279:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1280:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1281:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1282:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelay( const TickType_t xTicksToDelay )
1283:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1284:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
1285:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1286:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
ARM GAS  /tmp/cc60zarx.s 			page 24


1287:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTicksToDelay > ( TickType_t ) 0U )
1288:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1289:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( uxSchedulerSuspended == 0 );
1290:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
1291:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1292:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY();
1293:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1294:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task that is removed from the event list while the
1295:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				scheduler is suspended will not get placed in the ready
1296:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				list or removed from the blocked list until the scheduler
1297:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is resumed.
1298:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1299:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				This task cannot be in an event list as it is the currently
1300:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				executing task. */
1301:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1302:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1303:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
1304:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1305:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1306:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1307:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1308:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1309:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1310:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1311:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1312:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1313:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1314:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
1315:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1316:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1317:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1318:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1319:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1320:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1321:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1322:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1323:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1324:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1325:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) )
1326:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1327:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eTaskGetState( TaskHandle_t xTask )
1328:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1329:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eReturn;
1330:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	List_t *pxStateList;
1331:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
1332:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1333:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
1334:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1335:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1336:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1337:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task calling this function is querying its own state. */
1338:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eRunning;
1339:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1340:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1341:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1342:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1343:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  /tmp/cc60zarx.s 			page 25


1344:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
1345:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1346:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1347:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1348:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
1349:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1350:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
1351:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				lists. */
1352:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eBlocked;
1353:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1354:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1355:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1356:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
1357:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1358:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the suspended
1359:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					list.  Is it genuinely suspended or is it block
1360:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					indefinitely? */
1361:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
1362:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1363:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						eReturn = eSuspended;
1364:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1365:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1366:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1367:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						eReturn = eBlocked;
1368:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1369:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1370:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1371:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1372:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1373:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
1374:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1375:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the deleted
1376:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					tasks list, or it is not referenced from any lists at
1377:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					all. */
1378:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					eReturn = eDeleted;
1379:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1380:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1381:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1382:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
1383:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1384:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task is not in any other state, it must be in the
1385:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				Ready (including pending ready) state. */
1386:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eReady;
1387:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1388:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1389:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1390:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return eReturn;
1391:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1392:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1393:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1394:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1395:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1396:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1397:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1398:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
1399:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1400:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
ARM GAS  /tmp/cc60zarx.s 			page 26


1401:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
1402:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1403:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1404:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1405:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the that
1406:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			called uxTaskPriorityGet() that is being queried. */
1407:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1408:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1409:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1410:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1411:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1412:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
1413:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1414:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1415:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1416:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1417:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1418:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1419:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1420:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGetFromISR( TaskHandle_t xTask )
1421:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1422:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1423:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
1424:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1425:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1426:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1427:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1428:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1429:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1430:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1431:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1432:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1433:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1434:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1435:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1436:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1437:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1438:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1439:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1440:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1441:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1442:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1443:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
1444:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1445:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1446:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is being queried. */
1447:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1448:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1449:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1450:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1451:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1452:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
1453:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1454:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1455:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1456:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1457:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cc60zarx.s 			page 27


1458:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1459:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1460:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
1461:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1462:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1463:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1464:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1465:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1466:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
1467:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1468:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Ensure the new priority is valid. */
1469:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1470:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1471:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1472:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1473:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1474:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1475:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1476:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1477:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1478:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1479:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1480:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1481:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is being changed. */
1482:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1483:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1484:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1485:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1486:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
1487:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1488:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
1489:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1490:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
1491:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1492:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
1493:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1494:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1495:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1496:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
1497:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1498:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The priority change may have readied a task of higher
1499:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				priority than the calling task. */
1500:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
1501:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1502:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB != pxCurrentTCB )
1503:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1504:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The priority of a task other than the currently
1505:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						running task is being raised.  Is the priority being
1506:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						raised above that of the running task? */
1507:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
1508:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1509:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xYieldRequired = pdTRUE;
1510:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1511:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
1512:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1513:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1514:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
ARM GAS  /tmp/cc60zarx.s 			page 28


1515:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1516:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1517:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1518:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The priority of the running task is being raised,
1519:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						but the running task must already be the highest
1520:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						priority task able to run so no yield is required. */
1521:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1522:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1523:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( pxTCB == pxCurrentTCB )
1524:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1525:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of the running task down means
1526:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					there may now be another task of higher priority that
1527:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is ready to execute. */
1528:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xYieldRequired = pdTRUE;
1529:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1530:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1531:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1532:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of any other task down does not
1533:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					require a yield as the running task must be above the
1534:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					new priority of the task being modified. */
1535:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1536:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1537:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remember the ready list the task might be referenced from
1538:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				before its uxPriority member is changed so the
1539:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
1540:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
1541:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1542:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
1543:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1544:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Only change the priority being used if the task is not
1545:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					currently using an inherited priority. */
1546:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
1547:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1548:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
1549:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1550:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1551:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1552:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1553:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1554:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1555:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The base priority gets set whatever. */
1556:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
1557:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1558:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
1559:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1560:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
1561:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1562:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
1563:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1564:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only reset the event list item value if the value is not
1565:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				being used for anything else. */
1566:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
1567:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1568:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - (
1569:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1570:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1571:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  /tmp/cc60zarx.s 			page 29


1572:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1573:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1574:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1575:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1576:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				nothing more than change its priority variable. However, if
1577:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task is in a ready list it needs to be removed and placed
1578:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				in the list appropriate to its new priority. */
1579:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateL
1580:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1581:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is currently in its ready list - remove before
1582:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					adding it to it's new ready list.  As we are in a critical
1583:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section we can do this even if the scheduler is suspended. */
1584:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1585:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1586:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is known that the task is in its ready list so
1587:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						there is no need to check again and the port level
1588:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						reset macro can be called directly. */
1589:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
1590:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1591:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1592:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1593:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1594:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1595:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1596:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1597:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1598:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1599:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1600:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1601:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1602:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xYieldRequired != pdFALSE )
1603:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1604:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
1605:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1606:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1607:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1608:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1609:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1610:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1611:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remove compiler warning about unused variables when the port
1612:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				optimised task selection is not being used. */
1613:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxPriorityUsedOnEntry;
1614:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1615:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1616:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1617:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1618:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1619:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1620:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1621:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1622:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1623:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1624:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1625:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1626:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1627:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1628:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
ARM GAS  /tmp/cc60zarx.s 			page 30


1629:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1630:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the running task that is
1631:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being suspended. */
1632:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
1633:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1634:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
1635:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1636:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready/delayed list and place in the
1637:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			suspended list. */
1638:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1639:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1640:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1641:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1642:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1643:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1644:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1645:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1646:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1647:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1648:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1649:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1650:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1651:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1652:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1653:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1654:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1655:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1656:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1657:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
1658:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1659:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( configUSE_TASK_NOTIFICATIONS == 1 )
1660:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1661:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
1662:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1663:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task was blocked to wait for a notification, but is
1664:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					now suspended, so no notification was received. */
1665:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1666:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1667:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1668:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1669:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1670:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1671:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1672:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1673:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1674:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Reset the next expected unblock time in case it referred to the
1675:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is now in the Suspended state. */
1676:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1677:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1678:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
1679:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1680:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1681:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1682:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1683:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1684:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1685:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/cc60zarx.s 			page 31


1686:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1687:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1688:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1689:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
1690:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1691:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The current task has just been suspended. */
1692:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1693:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
1694:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1695:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1696:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1697:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
1698:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1699:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				must be adjusted to point to a different task. */
1700:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
1701:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1702:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1703:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1704:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be set to point to it no matter what its relative priority
1705:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is. */
1706:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = NULL;
1707:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1708:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1709:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1710:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vTaskSwitchContext();
1711:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1712:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1713:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1714:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1715:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1716:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1717:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1718:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1719:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1720:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1721:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1722:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1723:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1724:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1725:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1726:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
  27              		.loc 1 1726 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
1727:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
1728:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
1729:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1730:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Accesses xPendingReadyList so must be called from a critical
1731:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		section. */
1732:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1733:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1734:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTask );
  33              		.loc 1 1734 0
  34 0000 0246     		mov	r2, r0
ARM GAS  /tmp/cc60zarx.s 			page 32


  35 0002 70B1     		cbz	r0, .L12
1735:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1736:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Is the task being resumed actually in the suspended list? */
1737:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
  36              		.loc 1 1737 0
  37 0004 4169     		ldr	r1, [r0, #20]
  38 0006 0F4B     		ldr	r3, .L15
  39 0008 9942     		cmp	r1, r3
  40 000a 13D0     		beq	.L13
  41 000c 0023     		movs	r3, #0
  42              	.L4:
  43              		.loc 1 1737 0 is_stmt 0 discriminator 4
  44 000e ABB1     		cbz	r3, .L8
1738:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1739:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1740:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
  45              		.loc 1 1740 0 is_stmt 1
  46 0010 926A     		ldr	r2, [r2, #40]
  47 0012 0D49     		ldr	r1, .L15+4
  48 0014 8A42     		cmp	r2, r1
  49 0016 13D0     		beq	.L9
1741:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1742:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Is it in the suspended list because it is in the	Suspended
1743:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				state, or because is is blocked with no timeout? */
1744:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The
  50              		.loc 1 1744 0
  51 0018 02B1     		cbz	r2, .L6
  52 001a 0023     		movs	r3, #0
  53              	.L6:
  54              		.loc 1 1744 0 is_stmt 0 discriminator 4
  55 001c 63B1     		cbz	r3, .L14
1745:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1746:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
  56              		.loc 1 1746 0 is_stmt 1
  57 001e 0120     		movs	r0, #1
  58              	.LVL1:
1747:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1748:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1749:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1750:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1751:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1752:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1753:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1754:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1755:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1756:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1757:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1758:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1759:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1760:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1761:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1762:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1763:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
1764:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
  59              		.loc 1 1764 0
  60 0020 7047     		bx	lr
  61              	.LVL2:
ARM GAS  /tmp/cc60zarx.s 			page 33


  62              	.L12:
  63              	.LBB96:
  64              	.LBB97:
  65              		.file 2 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
   1:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*
   2:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * FreeRTOS Kernel V10.0.1
   3:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
   5:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * subject to the following conditions:
  11:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  12:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * copies or substantial portions of the Software.
  14:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  15:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  22:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * http://www.FreeRTOS.org
  23:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * http://aws.amazon.com/freertos
  24:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  25:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * 1 tab == 4 spaces!
  26:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  27:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  28:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  29:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
  30:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define PORTMACRO_H
  31:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  32:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef __cplusplus
  33:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern "C" {
  34:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  35:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  36:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  37:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  38:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  39:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  41:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  42:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  43:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  44:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  45:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  46:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  47:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCHAR		char
  48:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portFLOAT		float
  49:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDOUBLE		double
  50:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portLONG		long
  51:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSHORT		short
  52:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_TYPE	uint32_t
  53:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBASE_TYPE	long
ARM GAS  /tmp/cc60zarx.s 			page 34


  54:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  55:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef long BaseType_t;
  57:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef unsigned long UBaseType_t;
  58:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  59:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint16_t TickType_t;
  61:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #else
  63:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint32_t TickType_t;
  64:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  66:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	not need to be guarded with a critical section. */
  68:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  70:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  71:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  72:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
  73:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  77:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  78:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
  79:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD() 															\
  80:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {																				\
  81:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 																				\
  84:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "isb" );													\
  88:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
  89:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  90:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  95:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  96:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
  97:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortEnterCritical( void );
  98:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortExitCritical( void );
  99:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 102:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 103:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 106:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 107:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 108:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 110:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** (which build with all the ports) will build. */
ARM GAS  /tmp/cc60zarx.s 			page 35


 111:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 114:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 115:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 116:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 120:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 121:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 122:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 123:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 126:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 127:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 129:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Generic helper function. */
 130:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 132:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	uint8_t ucReturn;
 133:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 134:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 136:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 137:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 138:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Check the configuration. */
 139:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 140:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#endif
 142:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 143:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 147:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 149:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 151:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 152:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 153:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 154:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 155:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef configASSERT
 156:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 159:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 160:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 161:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNOP()
 162:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 163:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portINLINE	__inline
 164:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 165:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portFORCE_INLINE
 166:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 167:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
ARM GAS  /tmp/cc60zarx.s 			page 36


 168:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 169:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 170:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 171:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulCurrentInterrupt;
 172:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** BaseType_t xReturn;
 173:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 174:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 175:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 176:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 177:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 178:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 179:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdFALSE;
 180:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 181:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	else
 182:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 183:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdTRUE;
 184:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 185:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 186:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return xReturn;
 187:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 188:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 189:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 190:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 191:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 192:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 193:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulNewBASEPRI;
 194:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
  66              		.loc 2 195 0
  67              		.syntax unified
  68              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
  69 0022 4FF01003 			mov r3, #16												
  70 0026 83F31188 		msr basepri, r3											
  71 002a BFF36F8F 		isb														
  72 002e BFF34F8F 		dsb														
  73              	
  74              	@ 0 "" 2
  75              	.LVL3:
  76              		.thumb
  77              		.syntax unified
  78              	.L3:
  79 0032 FEE7     		b	.L3
  80              	.L13:
  81              	.LBE97:
  82              	.LBE96:
1737:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
  83              		.loc 1 1737 0
  84 0034 0123     		movs	r3, #1
  85 0036 EAE7     		b	.L4
  86              	.L14:
1727:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
  87              		.loc 1 1727 0
  88 0038 0020     		movs	r0, #0
  89              	.LVL4:
  90 003a 7047     		bx	lr
  91              	.LVL5:
  92              	.L8:
ARM GAS  /tmp/cc60zarx.s 			page 37


  93 003c 0020     		movs	r0, #0
  94              	.LVL6:
  95 003e 7047     		bx	lr
  96              	.LVL7:
  97              	.L9:
  98 0040 0020     		movs	r0, #0
  99              	.LVL8:
 100 0042 7047     		bx	lr
 101              	.L16:
 102              		.align	2
 103              	.L15:
 104 0044 00000000 		.word	.LANCHOR0
 105 0048 00000000 		.word	.LANCHOR1
 106              		.cfi_endproc
 107              	.LFE14:
 109              		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
 110              		.align	1
 111              		.syntax unified
 112              		.thumb
 113              		.thumb_func
 114              		.fpu fpv4-sp-d16
 116              	prvResetNextTaskUnblockTime:
 117              	.LFB40:
1765:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1766:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1767:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1768:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1769:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1770:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1771:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskResume( TaskHandle_t xTaskToResume )
1772:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1773:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
1774:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1775:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to resume the calling task. */
1776:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
1777:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1778:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1779:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		currently executing task. */
1780:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
1781:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1782:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1783:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1784:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1785:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1786:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_RESUME( pxTCB );
1787:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1788:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The ready list can be accessed even if the scheduler is
1789:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					suspended because this is inside a critical section. */
1790:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
1791:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1792:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1793:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A higher priority task may have just been resumed. */
1794:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1795:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1796:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* This yield may not cause the task just resumed to run,
1797:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						but will leave the lists in the correct state for the
1798:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						next yield. */
ARM GAS  /tmp/cc60zarx.s 			page 38


1799:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskYIELD_IF_USING_PREEMPTION();
1800:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1801:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1802:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1803:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1804:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1805:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1806:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1807:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1808:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1809:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1810:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1811:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1812:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1813:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1814:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1815:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1816:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1817:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1818:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1819:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1820:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1821:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1822:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1823:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1824:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1825:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1826:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1827:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1828:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
1829:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
1830:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1831:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
1832:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1833:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1834:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1835:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1836:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1837:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1838:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1839:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1840:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1841:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1842:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1843:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1844:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1845:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1846:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1847:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1848:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1849:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1850:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1851:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1852:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1853:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1854:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1855:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
ARM GAS  /tmp/cc60zarx.s 			page 39


1856:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1857:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Check the ready lists can be accessed. */
1858:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1859:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1860:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Ready lists can be accessed so move the task from the
1861:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					suspended list to the ready list directly. */
1862:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1863:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1864:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldRequired = pdTRUE;
1865:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1866:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1867:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1868:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1869:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1870:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1871:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1872:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1873:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1874:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1875:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1876:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed or ready lists cannot be accessed so the task
1877:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is held in the pending ready list until the scheduler is
1878:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					unsuspended. */
1879:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
1880:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1881:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1882:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1883:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1884:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1885:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1886:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1887:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1888:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1889:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xYieldRequired;
1890:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1891:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1892:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1893:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1894:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1895:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskStartScheduler( void )
1896:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
1897:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
1898:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1899:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Add the idle task at the lowest priority. */
1900:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
1901:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1902:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1903:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
1904:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t ulIdleTaskStackSize;
1905:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1906:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The Idle task is created using user provided RAM - obtain the
1907:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		address of the RAM then create the idle task. */
1908:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize
1909:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1910:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												configIDLE_TASK_NAME,
1911:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												ulIdleTaskStackSize,
1912:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
ARM GAS  /tmp/cc60zarx.s 			page 40


1913:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
1914:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												pxIdleTaskStackBuffer,
1915:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant
1916:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1917:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIdleTaskHandle != NULL )
1918:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1919:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
1920:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1921:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1922:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1923:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
1924:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1925:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1926:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else
1927:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1928:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The Idle task is being created using dynamically allocated RAM. */
1929:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = xTaskCreate(	prvIdleTask,
1930:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								configIDLE_TASK_NAME,
1931:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								configMINIMAL_STACK_SIZE,
1932:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								( void * ) NULL,
1933:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
1934:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								&xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explic
1935:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1936:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configSUPPORT_STATIC_ALLOCATION */
1937:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1938:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
1939:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1940:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xReturn == pdPASS )
1941:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1942:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTimerCreateTimerTask();
1943:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1944:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1945:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1946:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1947:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1948:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1949:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_TIMERS */
1950:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1951:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( xReturn == pdPASS )
1952:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1953:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* freertos_tasks_c_additions_init() should only be called if the user
1954:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		definable macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is
1955:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the only macro called by the function. */
1956:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
1957:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1958:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			freertos_tasks_c_additions_init();
1959:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1960:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
1961:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1962:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
1963:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
1964:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the created tasks contain a status word with interrupts switched on
1965:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
1966:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		starts to run. */
1967:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
1968:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1969:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
ARM GAS  /tmp/cc60zarx.s 			page 41


1970:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1971:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
1972:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure specific to the task that will run first. */
1973:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
1974:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1975:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
1976:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1977:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
1978:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
1979:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = ( TickType_t ) 0U;
1980:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1981:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
1982:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
1983:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
1984:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is set to 0 and the following line fails to build then ensure you do not
1985:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
1986:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		FreeRTOSConfig.h file. */
1987:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
1988:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1989:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
1990:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portable interface. */
1991:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
1992:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1993:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Should not reach here as if the scheduler is running the
1994:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function will not return. */
1995:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1996:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1997:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1998:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
1999:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2000:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2001:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2002:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2003:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This line will only be reached if the kernel could not be started,
2004:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
2005:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		or the timer task. */
2006:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
2007:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2008:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2009:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
2010:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	meaning xIdleTaskHandle is not used anywhere else. */
2011:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) xIdleTaskHandle;
2012:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2013:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2014:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2015:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskEndScheduler( void )
2016:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2017:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
2018:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
2019:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
2020:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portDISABLE_INTERRUPTS();
2021:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xSchedulerRunning = pdFALSE;
2022:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
2023:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2024:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2025:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2026:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSuspendAll( void )
ARM GAS  /tmp/cc60zarx.s 			page 42


2027:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2028:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
2029:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t.  Please read Richard Barry's reply in the following link to a
2030:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	post in the FreeRTOS support forum before reporting this as a bug! -
2031:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	http://goo.gl/wu4acr */
2032:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	++uxSchedulerSuspended;
2033:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2034:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2035:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2036:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2037:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2038:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void )
2039:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2040:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xReturn;
2041:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
2042:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2043:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxHigherPriorityReadyTasks takes care of the case where
2044:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
2045:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		task that are in the Ready state, even though the idle task is
2046:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		running. */
2047:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
2048:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2049:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > tskIDLE_PRIORITY )
2050:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2051:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2052:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2053:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2054:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
2055:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2056:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
2057:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2058:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* When port optimised task selection is used the uxTopReadyPriority
2059:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			variable is used as a bit map.  If bits other than the least
2060:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			significant bit are set then there are tasks that have a priority
2061:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			above the idle priority that are in the Ready state.  This takes
2062:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			care of the case where the co-operative scheduler is in use. */
2063:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > uxLeastSignificantBit )
2064:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2065:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2066:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2067:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2068:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2069:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2070:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
2071:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2072:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2073:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2074:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
2075:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2076:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
2077:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			time slicing is used then the very next tick interrupt must be
2078:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			processed. */
2079:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2080:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2081:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( uxHigherPriorityReadyTasks != pdFALSE )
2082:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2083:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are tasks in the Ready state that have a priority above the
ARM GAS  /tmp/cc60zarx.s 			page 43


2084:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			idle priority.  This path can only be reached if
2085:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configUSE_PREEMPTION is 0. */
2086:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2087:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2088:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2089:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2090:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
2091:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2092:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2093:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2094:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2095:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2096:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2097:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2098:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2099:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskResumeAll( void )
2100:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2101:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB = NULL;
2102:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
2103:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2104:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
2105:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	previous call to vTaskSuspendAll(). */
2106:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended );
2107:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2108:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
2109:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
2110:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
2111:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
2112:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tasks from this list into their appropriate ready list. */
2113:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
2114:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2115:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		--uxSchedulerSuspended;
2116:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2117:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2118:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2119:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
2120:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2121:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Move any readied tasks from the pending list into the
2122:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				appropriate ready list. */
2123:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
2124:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2125:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
2126:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2127:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2128:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2129:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2130:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the moved task has a priority higher than the current
2131:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					task then a yield must be performed. */
2132:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2133:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2134:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
2135:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2136:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2137:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2138:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2139:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2140:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
ARM GAS  /tmp/cc60zarx.s 			page 44


2141:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2142:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
2143:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2144:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task was unblocked while the scheduler was suspended,
2145:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					which may have prevented the next unblock time from being
2146:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					re-calculated, in which case re-calculate it now.  Mainly
2147:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					important for low power tickless implementations, where
2148:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this can prevent an unnecessary exit from low power
2149:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					state. */
2150:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
2151:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2152:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2153:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
2154:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				they should be processed now.  This ensures the tick count does
2155:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				not	slip, and that any delayed tasks are resumed at the correct
2156:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				time. */
2157:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2158:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
2159:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2160:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxPendedCounts > ( UBaseType_t ) 0U )
2161:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2162:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						do
2163:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2164:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( xTaskIncrementTick() != pdFALSE )
2165:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
2166:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								xYieldPending = pdTRUE;
2167:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
2168:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							else
2169:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
2170:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								mtCOVERAGE_TEST_MARKER();
2171:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
2172:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							--uxPendedCounts;
2173:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						} while( uxPendedCounts > ( UBaseType_t ) 0U );
2174:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2175:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						uxPendedTicks = 0;
2176:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2177:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2178:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2179:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2180:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2181:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2182:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2183:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xYieldPending != pdFALSE )
2184:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2185:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#if( configUSE_PREEMPTION != 0 )
2186:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2187:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xAlreadyYielded = pdTRUE;
2188:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2189:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#endif
2190:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
2191:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2192:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2193:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2194:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2196:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2197:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/cc60zarx.s 			page 45


2198:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2199:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2200:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2201:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2202:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2203:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
2204:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2205:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xAlreadyYielded;
2206:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2207:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2208:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2209:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCount( void )
2210:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2211:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTicks;
2212:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2213:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
2214:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_ENTER_CRITICAL();
2215:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2216:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTicks = xTickCount;
2217:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2218:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_EXIT_CRITICAL();
2219:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2220:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xTicks;
2221:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2222:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2223:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2224:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2225:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2226:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xReturn;
2227:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxSavedInterruptStatus;
2228:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2229:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
2230:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
2231:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	above the maximum system call priority are kept permanently enabled, even
2232:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
2233:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2234:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2235:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
2236:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	assigned a priority above the configured maximum system call priority.
2237:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
2238:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
2239:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
2240:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
2241:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
2242:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
2243:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
2244:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2245:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
2246:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2247:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = xTickCount;
2248:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2249:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2250:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2251:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
2252:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2253:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2254:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cc60zarx.s 			page 46


2255:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2256:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2257:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
2258:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t. */
2259:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return uxCurrentNumberOfTasks;
2260:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2261:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2262:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2263:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed fo
2264:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2265:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
2266:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2267:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If null is passed in here then the name of the calling task is being
2268:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	queried. */
2269:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
2270:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
2271:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
2272:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2273:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2274:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2275:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2276:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2277:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
2278:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2279:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
2280:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t x;
2281:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char cNextChar;
2282:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2283:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function is called with the scheduler suspended. */
2284:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2285:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
2286:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2287:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
2288:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2289:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
2290:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2291:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
2292:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2293:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Check each character in the name looking for a match or
2294:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mismatch. */
2295:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2296:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2297:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					cNextChar = pxNextTCB->pcTaskName[ x ];
2298:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2299:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( cNextChar != pcNameToQuery[ x ] )
2300:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2301:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Characters didn't match. */
2302:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
2303:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2304:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else if( cNextChar == 0x00 )
2305:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2306:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Both strings terminated, a match must have been
2307:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						found. */
2308:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxReturn = pxNextTCB;
2309:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
2310:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2311:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
ARM GAS  /tmp/cc60zarx.s 			page 47


2312:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2313:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2314:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2315:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2316:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2317:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxReturn != NULL )
2318:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2319:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The handle has been found. */
2320:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2321:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2322:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2323:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
2324:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2325:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2326:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2327:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2328:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2329:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2330:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxReturn;
2331:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2332:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2333:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2334:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2335:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2336:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2337:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2338:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are a
2339:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2340:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxQueue = configMAX_PRIORITIES;
2341:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t* pxTCB;
2342:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2343:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2344:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
2345:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2346:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2347:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2348:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Search the ready lists. */
2349:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
2350:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2351:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxQueue--;
2352:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNam
2353:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2354:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
2355:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2356:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Found the handle. */
2357:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2358:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2359:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2360:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts
2361:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2362:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Search the delayed lists. */
2363:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
2364:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2365:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
2366:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2367:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2368:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
ARM GAS  /tmp/cc60zarx.s 			page 48


2369:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2370:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery
2371:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2372:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2373:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
2374:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2375:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2376:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2377:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Search the suspended list. */
2378:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
2379:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2380:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2381:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2382:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2383:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( INCLUDE_vTaskDelete == 1 )
2384:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2385:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2386:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2387:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Search the deleted list. */
2388:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
2389:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2390:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2391:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2392:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2393:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2394:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2395:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ( TaskHandle_t ) pxTCB;
2396:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2397:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2398:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2399:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2400:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2401:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2402:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2403:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArra
2404:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2405:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
2406:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2407:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2408:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2409:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is there a space in the array for each task in the system? */
2410:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
2411:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2412:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2413:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task in the Ready state. */
2414:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				do
2415:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2416:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxQueue--;
2417:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
2418:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2419:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the cast
2420:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2421:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2422:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task in the Blocked state. */
2423:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelaye
2424:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
2425:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cc60zarx.s 			page 49


2426:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
2427:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2428:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2429:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					each task that has been deleted but not yet cleaned up. */
2430:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermin
2431:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2432:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2433:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2434:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
2435:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2436:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2437:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					each task in the Suspended state. */
2438:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList,
2439:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2440:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2441:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2442:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
2443:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2444:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2445:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2446:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2447:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2448:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
2449:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2450:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
2451:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2452:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2453:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
2454:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2455:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2456:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2457:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pulTotalRunTime = 0;
2458:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2459:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2460:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2461:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2462:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2463:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2464:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2465:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2466:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2467:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2468:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2469:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxTask;
2470:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2471:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2472:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2473:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2474:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2475:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2476:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2477:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetIdleTaskHandle( void )
2478:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2479:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2480:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
2481:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
2482:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xIdleTaskHandle;
ARM GAS  /tmp/cc60zarx.s 			page 50


2483:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2484:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2485:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2486:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2487:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2488:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
2489:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
2490:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2491:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 1. */
2492:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2493:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2494:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskStepTick( const TickType_t xTicksToJump )
2495:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2496:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Correct the tick count value after a period during which the tick
2497:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
2498:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		each stepped tick. */
2499:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2500:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount += xTicksToJump;
2501:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
2502:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2503:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2504:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2505:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2506:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2507:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2508:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2509:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2510:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2511:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB = ( TCB_t * ) xTask;
2512:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
2513:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2514:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
2515:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2516:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2517:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2518:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task can only be prematurely removed from the Blocked state if
2519:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			it is actually in the Blocked state. */
2520:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( eTaskGetState( xTask ) == eBlocked )
2521:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2522:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
2523:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2524:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remove the reference to the task from the blocked list.  An
2525:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				interrupt won't touch the xStateListItem because the
2526:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				scheduler is suspended. */
2527:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2528:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2529:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Is the task waiting on an event also?  If so remove it from
2530:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the event list too.  Interrupts can touch the event list item,
2531:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				even though the scheduler is suspended, so a critical section
2532:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is used. */
2533:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskENTER_CRITICAL();
2534:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2535:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2536:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2537:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2538:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ucDelayAborted = pdTRUE;
2539:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
ARM GAS  /tmp/cc60zarx.s 			page 51


2540:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2541:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2542:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2543:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2544:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2545:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskEXIT_CRITICAL();
2546:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2547:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Place the unblocked task into the appropriate ready list. */
2548:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
2549:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2550:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task being unblocked cannot cause an immediate context
2551:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				switch if preemption is turned off. */
2552:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if (  configUSE_PREEMPTION == 1 )
2553:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2554:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Preemption is on, but a context switch should only be
2555:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					performed if the unblocked task has a priority that is
2556:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					equal to or higher than the currently executing task. */
2557:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2558:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2559:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Pend the yield to be performed when the scheduler
2560:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						is unsuspended. */
2561:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
2562:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2563:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2564:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2565:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2566:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2567:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2568:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* configUSE_PREEMPTION */
2569:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2570:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2571:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2572:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFAIL;
2573:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2574:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2575:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2576:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2577:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2578:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2579:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2580:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
2581:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2582:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2583:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskIncrementTick( void )
2584:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2585:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t * pxTCB;
2586:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xItemValue;
2587:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
2588:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2589:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
2590:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
2591:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tasks to be unblocked. */
2592:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
2593:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2594:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2595:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this
2596:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		block. */
ARM GAS  /tmp/cc60zarx.s 			page 52


2597:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
2598:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2599:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
2600:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		delayed lists if it wraps to 0. */
2601:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = xConstTickCount;
2602:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2603:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as
2604:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2605:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskSWITCH_DELAYED_LISTS();
2606:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2607:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2608:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2609:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2610:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2611:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2612:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* See if this tick has made a timeout expire.  Tasks are stored in
2613:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the	queue in the order of their wake time - meaning once one task
2614:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		has been found whose block time has not expired there is no need to
2615:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		look any further down the list. */
2616:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount >= xNextTaskUnblockTime )
2617:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2618:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for( ;; )
2619:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2620:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
2621:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2622:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed list is empty.  Set xNextTaskUnblockTime
2623:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					to the maximum possible value so it is extremely
2624:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					unlikely that the
2625:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xTickCount >= xNextTaskUnblockTime ) test will pass
2626:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					next time through. */
2627:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redun
2628:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2629:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2630:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2631:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2632:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed list is not empty, get the value of the
2633:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					item at the head of the delayed list.  This is the time
2634:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					at which the task at the head of the delayed list must
2635:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be removed from the Blocked state. */
2636:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
2637:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
2638:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2639:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xConstTickCount < xItemValue )
2640:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2641:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is not time to unblock this item yet, but the
2642:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						item value is the time at which the task at the head
2643:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						of the blocked list must be removed from the Blocked
2644:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						state -	so record the item value in
2645:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime. */
2646:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime = xItemValue;
2647:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
2648:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2649:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2650:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2651:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2652:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2653:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cc60zarx.s 			page 53


2654:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* It is time to remove the item from the Blocked state. */
2655:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2656:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2657:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Is the task waiting on an event also?  If so remove
2658:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it from the event list. */
2659:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2660:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2661:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2662:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2663:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2664:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2665:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2666:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2667:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2668:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Place the unblocked task into the appropriate ready
2669:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					list. */
2670:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2671:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2672:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task being unblocked cannot cause an immediate
2673:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					context switch if preemption is turned off. */
2674:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#if (  configUSE_PREEMPTION == 1 )
2675:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2676:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Preemption is on, but a context switch should
2677:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						only be performed if the unblocked task has a
2678:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						priority that is equal to or higher than the
2679:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						currently executing task. */
2680:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2681:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2682:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xSwitchRequired = pdTRUE;
2683:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
2684:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
2685:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2686:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
2687:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
2688:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2689:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#endif /* configUSE_PREEMPTION */
2690:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2691:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2692:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2693:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2694:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Tasks of equal priority to the currently running task will share
2695:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		processing time (time slice) if preemption is on, and the application
2696:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		writer has not explicitly turned time slicing off. */
2697:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2698:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2699:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_
2700:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2701:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xSwitchRequired = pdTRUE;
2702:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2703:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2704:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2705:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2706:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2707:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2708:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2709:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2710:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
ARM GAS  /tmp/cc60zarx.s 			page 54


2711:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2712:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Guard against the tick hook being called when the pended tick
2713:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
2714:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxPendedTicks == ( UBaseType_t ) 0U )
2715:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2716:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vApplicationTickHook();
2717:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2718:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2719:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2720:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2721:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2722:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2723:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICK_HOOK */
2724:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2725:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2726:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2727:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		++uxPendedTicks;
2728:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2729:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
2730:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		scheduler is locked. */
2731:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2732:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2733:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vApplicationTickHook();
2734:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2735:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2736:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2737:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2738:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_PREEMPTION == 1 )
2739:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2740:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xYieldPending != pdFALSE )
2741:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2742:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xSwitchRequired = pdTRUE;
2743:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2744:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2745:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2746:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2747:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2748:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2749:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_PREEMPTION */
2750:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2751:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xSwitchRequired;
2752:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2753:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2754:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2755:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2756:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2757:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
2758:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2759:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2760:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2761:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then it is the task hook of the calling task that is
2762:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		getting set. */
2763:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2764:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2765:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2766:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2767:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
ARM GAS  /tmp/cc60zarx.s 			page 55


2768:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2769:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2770:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2771:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2772:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2773:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2774:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2775:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
2776:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2777:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2778:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2779:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2780:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2781:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2782:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2783:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2784:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2785:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2786:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2787:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xReturn;
2788:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2789:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are setting our own task hook. */
2790:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2791:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2792:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2793:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2794:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2795:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2796:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2797:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2798:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2799:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2800:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2801:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2802:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2803:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag;
2804:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2805:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2806:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2807:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2808:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2809:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2810:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2811:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2812:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2813:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2814:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2815:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
2816:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2817:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2818:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
2819:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2820:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
2821:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2822:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2823:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2824:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/cc60zarx.s 			page 56


2825:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2826:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2827:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2828:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2829:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2830:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
2831:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2832:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
2833:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2834:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2835:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2836:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
2837:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2838:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2839:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2840:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2841:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2842:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2843:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2844:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2845:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSwitchContext( void )
2846:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2847:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
2848:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2849:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
2850:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		switch. */
2851:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
2852:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2853:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2854:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2855:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdFALSE;
2856:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
2857:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2858:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
2859:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2860:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2861:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
2862:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
2863:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2864:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2865:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2866:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Add the amount of time the task has been running to the
2867:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				accumulated time so far.  The time the task started running was
2868:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				stored in ulTaskSwitchedInTime.  Note that there is no overflow
2869:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				protection here so count values are only valid until the timer
2870:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				overflows.  The guard against negative values is to protect
2871:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				against suspect run time stat counter implementations - which
2872:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				are provided by the application, not the kernel. */
2873:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ulTotalRunTime > ulTaskSwitchedInTime )
2874:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2875:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
2876:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2877:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2878:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2879:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2880:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2881:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				ulTaskSwitchedInTime = ulTotalRunTime;
ARM GAS  /tmp/cc60zarx.s 			page 57


2882:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2883:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
2884:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2885:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check for stack overflow, if configured. */
2886:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskCHECK_FOR_STACK_OVERFLOW();
2887:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2888:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Select a new task to run using either the generic C or port
2889:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		optimised asm code. */
2890:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK();
2891:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
2892:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2893:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
2894:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2895:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2896:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure specific to this task. */
2897:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2898:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2899:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2900:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2901:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2902:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2903:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2904:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
2905:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2906:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
2907:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2908:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
2909:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
2910:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2911:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
2912:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	This is placed in the list in priority order so the highest priority task
2913:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is the first to be woken by the event.  The queue that contains the event
2914:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list is locked, preventing simultaneous access from interrupts. */
2915:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2916:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2917:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
2918:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2919:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2920:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2921:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickT
2922:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2923:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
2924:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2925:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
2926:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the event groups implementation. */
2927:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != 0 );
2928:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2929:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the item value in the event list item.  It is safe to access the
2930:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event list item here as interrupts won't access the event list item of a
2931:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	task that is not in the Blocked state. */
2932:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE
2933:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2934:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB at the end of the appropriate event
2935:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list.  It is safe to access the event list here because it is part of an
2936:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event group implementation - and interrupts don't access event groups
2937:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	directly (instead they access them indirectly by pending function calls to
2938:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the task level). */
ARM GAS  /tmp/cc60zarx.s 			page 58


2939:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2940:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2941:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
2942:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2943:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2944:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2945:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TIMERS == 1 )
2946:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2947:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const B
2948:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2949:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxEventList );
2950:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2951:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function should not be called by application code hence the
2952:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
2953:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
2954:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		it should be called with the scheduler suspended. */
2955:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2956:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2957:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
2958:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		In this case it is assume that this is the only task that is going to
2959:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
2960:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		can be used in place of vListInsert. */
2961:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2962:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2963:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the task should block indefinitely then set the block time to a
2964:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value that will be recognised as an indefinite delay inside the
2965:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList() function. */
2966:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xWaitIndefinitely != pdFALSE )
2967:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2968:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTicksToWait = portMAX_DELAY;
2969:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2970:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2971:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
2972:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
2973:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2974:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2975:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TIMERS */
2976:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2977:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2978:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
2979:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2980:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
2981:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
2982:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2983:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
2984:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	called from a critical section within an ISR. */
2985:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2986:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The event list is sorted in priority order, so the first in the list can
2987:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	be removed as it is known to be the highest priority.  Remove the TCB from
2988:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the delayed list, and add it to the ready list.
2989:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2990:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	If an event is for a queue that is locked then this function will never
2991:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
2992:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	means exclusive access to the event list is guaranteed here.
2993:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2994:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	This function assumes that a check has already been made to ensure that
2995:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxEventList is not empty. */
ARM GAS  /tmp/cc60zarx.s 			page 59


2996:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
2997:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
2998:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
2999:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3000:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3001:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3002:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
3003:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
3004:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3005:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3006:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3007:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The delayed and ready lists cannot be accessed, so hold this task
3008:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pending until the scheduler is resumed. */
3009:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
3010:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3011:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3012:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3013:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3014:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return true if the task removed from the event list has a higher
3015:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority than the calling task.  This allows the calling task to know if
3016:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		it should force a context switch now. */
3017:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdTRUE;
3018:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3019:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
3020:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
3021:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
3022:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3023:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3024:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3025:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdFALSE;
3026:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3027:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3028:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_TICKLESS_IDLE != 0 )
3029:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3030:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If a task is blocked on a kernel object then xNextTaskUnblockTime
3031:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		might be set to the blocked task's time out time.  If the task is
3032:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		unblocked for a reason other than a timeout xNextTaskUnblockTime is
3033:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		normally left unchanged, because it is automatically reset to a new
3034:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value when the tick count equals xNextTaskUnblockTime.  However if
3035:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		tickless idling is used it might be more important to enter sleep mode
3036:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		at the earliest possible time - so reset xNextTaskUnblockTime here to
3037:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		ensure it is updated at the earliest possible time. */
3038:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvResetNextTaskUnblockTime();
3039:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3040:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
3041:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3042:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
3043:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3044:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3045:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3046:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
3047:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3048:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
3049:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3050:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3051:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the event flags implementation. */
3052:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != pdFALSE );
ARM GAS  /tmp/cc60zarx.s 			page 60


3053:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3054:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the new item value in the event list. */
3055:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
3056:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3057:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the event list form the event flag.  Interrupts do not access
3058:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event flags. */
3059:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
3060:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
3061:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
3062:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3063:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the delayed list and add it to the ready list.  The
3064:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	scheduler is suspended so interrupts will not be accessing the ready
3065:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	lists. */
3066:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
3067:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
3068:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3069:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3070:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3071:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The unblocked task has a priority above that of the calling task, so
3072:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		a context switch is required.  This function is called with the
3073:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		scheduler suspended so xYieldPending is set so the context switch
3074:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		occurs immediately that the scheduler is resumed (unsuspended). */
3075:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
3076:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3077:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3078:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3079:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3080:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3081:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3082:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
3083:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
3084:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3085:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xOverflowCount = xNumOfOverflows;
3086:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
3087:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3088:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
3089:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3090:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3091:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3092:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
3093:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3094:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* For internal use only as it does not use a critical section. */
3095:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
3096:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
3097:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3098:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3099:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3100:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
3101:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3102:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
3103:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3104:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
3105:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
3106:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3107:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
3108:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3109:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
ARM GAS  /tmp/cc60zarx.s 			page 61


3110:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount;
3111:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
3112:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3113:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( INCLUDE_xTaskAbortDelay == 1 )
3114:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucDelayAborted != pdFALSE )
3115:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3116:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The delay was aborted, which is not the same as a time out,
3117:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				but has the same result. */
3118:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucDelayAborted = pdFALSE;
3119:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
3120:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3121:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3122:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3123:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3124:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3125:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
3126:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3127:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
3128:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				specified is the maximum block time then the task should block
3129:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				indefinitely, and therefore never time out. */
3130:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
3131:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3132:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3133:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3134:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3135:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
3136:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3137:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The tick count is greater than the time at which
3138:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeout() was called, but has also overflowed since
3139:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeOut() was called.  It must have wrapped all the way
3140:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			around and gone past again. This passed since vTaskSetTimeout()
3141:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			was called. */
3142:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
3143:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3144:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with som
3145:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3146:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
3147:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxTicksToWait -= xElapsedTime;
3148:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
3149:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFALSE;
3150:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3151:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3152:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3153:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxTicksToWait = 0;
3154:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
3155:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3156:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3157:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
3158:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3159:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
3160:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3161:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3162:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3163:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskMissedYield( void )
3164:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3165:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xYieldPending = pdTRUE;
3166:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
ARM GAS  /tmp/cc60zarx.s 			page 62


3167:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3168:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3169:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3170:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3171:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3172:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3173:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3174:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3175:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3176:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
3177:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3178:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
3179:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
3180:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3181:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3182:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3183:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = 0U;
3184:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3185:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3186:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3187:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3188:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3189:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3190:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3191:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3192:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3193:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3194:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
3195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3196:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3197:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3198:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
3199:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3200:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
3201:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
3202:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3203:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3204:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3205:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3206:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3207:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
3208:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * -----------------------------------------------------------
3209:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The Idle task.
3210:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * ----------------------------------------------------------
3211:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3212:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3213:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
3214:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3215:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
3216:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3217:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
3218:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3219:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3220:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop warnings. */
3221:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) pvParameters;
3222:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3223:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
ARM GAS  /tmp/cc60zarx.s 			page 63


3224:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	SCHEDULER IS STARTED. **/
3225:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3226:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* In case a task that has a secure context deletes itself, in which case
3227:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the idle task is responsible for deleting the task's secure context, if
3228:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	any. */
3229:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTASK_CALLS_SECURE_FUNCTIONS();
3230:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3231:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( ;; )
3232:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3233:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* See if any tasks have deleted themselves - if so then the idle task
3234:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is responsible for freeing the deleted task's TCB and stack. */
3235:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvCheckTasksWaitingTermination();
3236:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3237:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
3238:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3239:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
3240:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			see if any other task has become available.  If we are using
3241:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			preemption we don't need to do this as any task becoming available
3242:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			will automatically get the processor anyway. */
3243:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskYIELD();
3244:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3245:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_PREEMPTION */
3246:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3247:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3248:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3249:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* When using preemption tasks of equal priority will be
3250:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
3251:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			to run then the idle task should yield before the end of the
3252:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			timeslice.
3253:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3254:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			A critical region is not required here as we are just reading from
3255:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
3256:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the ready list at the idle priority contains more than one task
3257:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then a task other than the idle task is ready to execute. */
3258:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
3259:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3260:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskYIELD();
3261:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3262:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3263:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3264:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3265:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3266:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3267:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3268:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3269:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
3270:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3271:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			extern void vApplicationIdleHook( void );
3272:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3273:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Call the user defined function from within the idle task.  This
3274:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			allows the application designer to add background functionality
3275:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			without the overhead of a separate task.
3276:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3277:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
3278:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vApplicationIdleHook();
3279:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3280:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
ARM GAS  /tmp/cc60zarx.s 			page 64


3281:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3282:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
3283:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3284:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		user defined low power mode	implementations require
3285:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3286:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
3287:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3288:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TickType_t xExpectedIdleTime;
3289:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3290:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
3291:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
3292:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			test of the expected idle time is performed without the
3293:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			scheduler suspended.  The result here is not necessarily
3294:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			valid. */
3295:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
3296:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3297:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3298:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3299:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskSuspendAll();
3300:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3301:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
3302:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					time can be sampled again, and this time its value can
3303:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be used. */
3304:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
3305:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
3306:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3307:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Define the following macro to set xExpectedIdleTime to 0
3308:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if the application does not want
3309:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
3310:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );
3311:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3312:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3313:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3314:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
3315:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3316:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_END();
3317:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3318:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3319:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3320:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3321:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3322:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3323:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) xTaskResumeAll();
3324:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3325:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3326:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3327:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3328:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3329:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3330:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
3331:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3332:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3333:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3334:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3335:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
3336:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3337:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
ARM GAS  /tmp/cc60zarx.s 			page 65


3338:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3339:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The idle task exists in addition to the application tasks. */
3340:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const UBaseType_t uxNonApplicationTasks = 1;
3341:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
3342:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3343:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3344:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3345:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
3346:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3347:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3348:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( xYieldPending != pdFALSE )
3349:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3350:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
3351:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3352:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3353:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3354:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3355:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If all the tasks are in the suspended list (which might mean they
3356:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			have an infinite block time rather than actually being suspended)
3357:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then it is safe to turn all clocks off and just wait for external
3358:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupts. */
3359:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicatio
3360:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3361:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eNoTasksWaitingTimeout;
3362:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3363:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3364:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3365:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3366:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3367:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3368:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3369:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return eReturn;
3370:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3371:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3372:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3373:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3374:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3375:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3376:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3377:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue 
3378:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3379:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3380:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3381:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3382:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3383:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSet );
3384:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
3385:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3386:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3387:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3388:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3389:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3390:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3391:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3392:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3393:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
3394:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  /tmp/cc60zarx.s 			page 66


3395:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvReturn = NULL;
3396:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3397:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3398:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3399:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3400:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
3401:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
3402:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3403:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3404:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3405:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pvReturn = NULL;
3406:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3407:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3408:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pvReturn;
3409:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3410:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3411:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3412:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3413:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3414:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3415:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3416:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
3417:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3418:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3419:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3420:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then we are modifying the MPU settings of
3421:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the calling task. */
3422:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
3423:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3424:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3425:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3426:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3427:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3428:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3429:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3430:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void )
3431:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3432:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxPriority;
3433:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3434:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriorit
3435:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3436:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
3437:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3438:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3439:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
3440:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
3441:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
3442:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3443:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3444:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3445:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
3446:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3447:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3448:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3449:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
3450:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3451:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xSuspendedTaskList );
ARM GAS  /tmp/cc60zarx.s 			page 67


3452:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3453:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
3454:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3455:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3456:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	using list2. */
3457:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
3458:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
3459:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3460:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3461:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3462:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3463:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3464:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3465:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3466:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3467:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3468:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3469:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TCB_t *pxTCB;
3470:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3471:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
3472:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		being called too often in the idle task. */
3473:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
3474:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3475:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
3476:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3477:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
3478:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
3479:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
3480:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
3481:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3482:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
3483:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3484:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvDeleteTCB( pxTCB );
3485:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3486:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3487:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3488:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3489:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3490:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3491:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TRACE_FACILITY == 1 )
3492:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3493:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, 
3494:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3495:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3496:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3497:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* xTask is NULL then get the state of the calling task. */
3498:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3499:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3500:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
3501:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
3502:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
3503:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
3504:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
3505:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3506:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_MUTEXES == 1 )
3507:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3508:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
ARM GAS  /tmp/cc60zarx.s 			page 68


3509:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3510:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3511:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3512:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = 0;
3513:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3514:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3515:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3516:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3517:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3518:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
3519:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3520:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3521:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3522:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = 0;
3523:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3524:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3525:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3526:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Obtaining the task state is a little fiddly, so is only done if the
3527:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value of eState passed into this function is eInvalid - otherwise the
3528:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		state is just set to whatever is passed in. */
3529:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( eState != eInvalid )
3530:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3531:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
3532:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3533:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->eCurrentState = eRunning;
3534:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3535:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3536:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3537:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->eCurrentState = eState;
3538:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3539:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
3540:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3541:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the task is in the suspended list then there is a
3542:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					chance it is actually just blocked indefinitely - so really
3543:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it should be reported as being in the Blocked state. */
3544:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( eState == eSuspended )
3545:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3546:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						vTaskSuspendAll();
3547:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
3548:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
3549:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
3550:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								pxTaskStatus->eCurrentState = eBlocked;
3551:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
3552:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
3553:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) xTaskResumeAll();
3554:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3555:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3556:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* INCLUDE_vTaskSuspend */
3557:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3558:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3559:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3560:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3561:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
3562:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3563:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3564:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3565:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		parameter is provided to allow it to be skipped. */
ARM GAS  /tmp/cc60zarx.s 			page 69


3566:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xGetFreeStackSpace != pdFALSE )
3567:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3568:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( portSTACK_GROWTH > 0 )
3569:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3570:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfSt
3571:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3572:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
3573:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3574:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack )
3575:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3576:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
3577:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3578:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3579:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3580:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->usStackHighWaterMark = 0;
3581:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3582:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3583:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3584:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3585:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3586:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3587:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3588:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3589:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
3590:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3591:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
3592:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0;
3593:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3594:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
3595:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3596:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
3597:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3598:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Populate an TaskStatus_t structure within the
3599:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
3600:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxList.  See the definition of TaskStatus_t in task.h for the
3601:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			meaning of each TaskStatus_t structure member. */
3602:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
3603:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3604:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
3605:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
3606:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask++;
3607:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
3608:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3609:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3610:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3611:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3612:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3613:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3614:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxTask;
3615:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3616:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3617:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3618:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3619:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3620:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
3621:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3622:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
ARM GAS  /tmp/cc60zarx.s 			page 70


3623:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3624:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulCount = 0U;
3625:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3626:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
3627:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3628:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
3629:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulCount++;
3630:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3631:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3632:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller a
3633:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3634:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ( uint16_t ) ulCount;
3635:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3636:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3637:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) */
3638:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3639:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3640:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3641:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3642:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3643:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3644:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3645:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t *pucEndOfStack;
3646:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3647:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3648:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3649:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3650:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if portSTACK_GROWTH < 0
3651:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3652:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3653:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3654:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3655:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3656:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3657:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3658:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3659:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3660:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
3661:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3662:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3663:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3664:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3665:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3666:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3667:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3668:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3669:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3670:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB )
3671:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3672:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
3673:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
3674:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		want to allocate and clean RAM statically. */
3675:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
3676:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3677:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up
3678:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		to the task to free any memory allocated at the application level. */
3679:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
ARM GAS  /tmp/cc60zarx.s 			page 71


3680:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3681:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
3682:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3683:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3684:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3685:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( p
3686:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3687:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task can only have been allocated dynamically - free both
3688:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the stack and TCB. */
3689:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB->pxStack );
3690:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB );
3691:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3692:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated 
3693:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3694:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task could have been allocated statically or dynamically, so
3695:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			check what was statically allocated before trying to free the
3696:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			memory. */
3697:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
3698:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3699:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Both the stack and TCB were allocated dynamically, so both
3700:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				must be freed. */
3701:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB->pxStack );
3702:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
3703:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3704:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
3705:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3706:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only the stack was statically allocated, so the TCB is the
3707:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				only memory that must be freed. */
3708:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
3709:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3710:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3711:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3712:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Neither the stack nor the TCB were allocated dynamically, so
3713:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				nothing needs to be freed. */
3714:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
3715:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3716:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3717:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3718:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
3719:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3720:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3721:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3722:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3723:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3724:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void )
3725:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 118              		.loc 1 3725 0
 119              		.cfi_startproc
 120              		@ args = 0, pretend = 0, frame = 0
 121              		@ frame_needed = 0, uses_anonymous_args = 0
 122              		@ link register save eliminated.
3726:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
3727:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3728:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 123              		.loc 1 3728 0
 124 0000 0A4B     		ldr	r3, .L23
 125 0002 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/cc60zarx.s 			page 72


 126 0004 1B68     		ldr	r3, [r3]
 127 0006 4BB9     		cbnz	r3, .L21
 128 0008 0123     		movs	r3, #1
 129              	.L18:
 130              		.loc 1 3728 0 is_stmt 0 discriminator 4
 131 000a 4BB9     		cbnz	r3, .L22
3729:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3730:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
3731:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the maximum possible value so it is	extremely unlikely that the
3732:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3733:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		there is an item in the delayed list. */
3734:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
3735:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3736:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3737:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3738:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is not empty, get the value of
3739:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the item at the head of the delayed list.  This is the time at
3740:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		which the task at the head of the delayed list should be removed
3741:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from the Blocked state. */
3742:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 132              		.loc 1 3742 0 is_stmt 1
 133 000c 074B     		ldr	r3, .L23
 134 000e 1B68     		ldr	r3, [r3]
 135 0010 DB68     		ldr	r3, [r3, #12]
 136 0012 DB68     		ldr	r3, [r3, #12]
 137              	.LVL9:
3743:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 138              		.loc 1 3743 0
 139 0014 5A68     		ldr	r2, [r3, #4]
 140 0016 064B     		ldr	r3, .L23+4
 141              	.LVL10:
 142 0018 1A60     		str	r2, [r3]
 143 001a 7047     		bx	lr
 144              	.L21:
3728:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 145              		.loc 1 3728 0
 146 001c 0023     		movs	r3, #0
 147 001e F4E7     		b	.L18
 148              	.L22:
3734:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 149              		.loc 1 3734 0
 150 0020 4FF0FF32 		mov	r2, #-1
 151 0024 024B     		ldr	r3, .L23+4
 152 0026 1A60     		str	r2, [r3]
 153 0028 7047     		bx	lr
 154              	.L24:
 155 002a 00BF     		.align	2
 156              	.L23:
 157 002c 00000000 		.word	.LANCHOR2
 158 0030 00000000 		.word	.LANCHOR3
 159              		.cfi_endproc
 160              	.LFE40:
 162              		.section	.text.prvDeleteTCB,"ax",%progbits
 163              		.align	1
 164              		.syntax unified
 165              		.thumb
 166              		.thumb_func
ARM GAS  /tmp/cc60zarx.s 			page 73


 167              		.fpu fpv4-sp-d16
 169              	prvDeleteTCB:
 170              	.LFB39:
3671:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
 171              		.loc 1 3671 0
 172              		.cfi_startproc
 173              		@ args = 0, pretend = 0, frame = 0
 174              		@ frame_needed = 0, uses_anonymous_args = 0
 175              	.LVL11:
 176 0000 10B5     		push	{r4, lr}
 177              	.LCFI0:
 178              		.cfi_def_cfa_offset 8
 179              		.cfi_offset 4, -8
 180              		.cfi_offset 14, -4
 181 0002 0446     		mov	r4, r0
3689:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB );
 182              		.loc 1 3689 0
 183 0004 006B     		ldr	r0, [r0, #48]
 184              	.LVL12:
 185 0006 FFF7FEFF 		bl	vPortFree
 186              	.LVL13:
3690:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 187              		.loc 1 3690 0
 188 000a 2046     		mov	r0, r4
 189 000c FFF7FEFF 		bl	vPortFree
 190              	.LVL14:
 191 0010 10BD     		pop	{r4, pc}
 192              		.cfi_endproc
 193              	.LFE39:
 195              		.section	.text.prvInitialiseNewTask,"ax",%progbits
 196              		.align	1
 197              		.syntax unified
 198              		.thumb
 199              		.thumb_func
 200              		.fpu fpv4-sp-d16
 202              	prvInitialiseNewTask:
 203              	.LFB6:
 825:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** StackType_t *pxTopOfStack;
 204              		.loc 1 825 0
 205              		.cfi_startproc
 206              		@ args = 16, pretend = 0, frame = 0
 207              		@ frame_needed = 0, uses_anonymous_args = 0
 208              	.LVL15:
 209 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 210              	.LCFI1:
 211              		.cfi_def_cfa_offset 32
 212              		.cfi_offset 4, -32
 213              		.cfi_offset 5, -28
 214              		.cfi_offset 6, -24
 215              		.cfi_offset 7, -20
 216              		.cfi_offset 8, -16
 217              		.cfi_offset 9, -12
 218              		.cfi_offset 10, -8
 219              		.cfi_offset 14, -4
 220 0004 8046     		mov	r8, r0
 221 0006 9946     		mov	r9, r3
 222 0008 089D     		ldr	r5, [sp, #32]
ARM GAS  /tmp/cc60zarx.s 			page 74


 223 000a 099F     		ldr	r7, [sp, #36]
 224 000c 0A9C     		ldr	r4, [sp, #40]
 857:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 225              		.loc 1 857 0
 226 000e 266B     		ldr	r6, [r4, #48]
 227 0010 02F18042 		add	r2, r2, #1073741824
 228              	.LVL16:
 229 0014 013A     		subs	r2, r2, #1
 230              	.LVL17:
 231 0016 06EB8206 		add	r6, r6, r2, lsl #2
 232              	.LVL18:
 858:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 233              		.loc 1 858 0
 234 001a 26F00706 		bic	r6, r6, #7
 235              	.LVL19:
 885:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 236              		.loc 1 885 0
 237 001e 0023     		movs	r3, #0
 238              	.LVL20:
 239              	.L28:
 885:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 240              		.loc 1 885 0 is_stmt 0 discriminator 1
 241 0020 0F2B     		cmp	r3, #15
 242 0022 07D8     		bhi	.L29
 887:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 243              		.loc 1 887 0 is_stmt 1
 244 0024 C85C     		ldrb	r0, [r1, r3]	@ zero_extendqisi2
 245 0026 E218     		adds	r2, r4, r3
 246 0028 82F83400 		strb	r0, [r2, #52]
 892:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 247              		.loc 1 892 0
 248 002c CA5C     		ldrb	r2, [r1, r3]	@ zero_extendqisi2
 249 002e 0AB1     		cbz	r2, .L29
 885:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 250              		.loc 1 885 0 discriminator 2
 251 0030 0133     		adds	r3, r3, #1
 252              	.LVL21:
 253 0032 F5E7     		b	.L28
 254              	.L29:
 904:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 255              		.loc 1 904 0
 256 0034 0023     		movs	r3, #0
 257              	.LVL22:
 258 0036 84F84330 		strb	r3, [r4, #67]
 908:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 259              		.loc 1 908 0
 260 003a 062D     		cmp	r5, #6
 261 003c 00D9     		bls	.L31
 910:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 262              		.loc 1 910 0
 263 003e 0625     		movs	r5, #6
 264              	.L31:
 265              	.LVL23:
 917:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 266              		.loc 1 917 0
 267 0040 E562     		str	r5, [r4, #44]
 920:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
ARM GAS  /tmp/cc60zarx.s 			page 75


 268              		.loc 1 920 0
 269 0042 6564     		str	r5, [r4, #68]
 921:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 270              		.loc 1 921 0
 271 0044 4FF0000A 		mov	r10, #0
 272 0048 C4F848A0 		str	r10, [r4, #72]
 925:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 273              		.loc 1 925 0
 274 004c 201D     		adds	r0, r4, #4
 275 004e FFF7FEFF 		bl	vListInitialiseItem
 276              	.LVL24:
 926:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 277              		.loc 1 926 0
 278 0052 04F11800 		add	r0, r4, #24
 279 0056 FFF7FEFF 		bl	vListInitialiseItem
 280              	.LVL25:
 930:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 281              		.loc 1 930 0
 282 005a 2461     		str	r4, [r4, #16]
 933:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 283              		.loc 1 933 0
 284 005c C5F10705 		rsb	r5, r5, #7
 285              	.LVL26:
 286 0060 A561     		str	r5, [r4, #24]
 934:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 287              		.loc 1 934 0
 288 0062 6462     		str	r4, [r4, #36]
 976:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 289              		.loc 1 976 0
 290 0064 C4F84CA0 		str	r10, [r4, #76]
 977:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 291              		.loc 1 977 0
 292 0068 84F850A0 		strb	r10, [r4, #80]
1004:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 293              		.loc 1 1004 0
 294 006c 4A46     		mov	r2, r9
 295 006e 4146     		mov	r1, r8
 296 0070 3046     		mov	r0, r6
 297 0072 FFF7FEFF 		bl	pxPortInitialiseStack
 298              	.LVL27:
 299 0076 2060     		str	r0, [r4]
1008:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 300              		.loc 1 1008 0
 301 0078 07B1     		cbz	r7, .L27
1012:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 302              		.loc 1 1012 0
 303 007a 3C60     		str	r4, [r7]
 304              	.L27:
 305 007c BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 306              		.cfi_endproc
 307              	.LFE6:
 309              		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 310              		.align	1
 311              		.syntax unified
 312              		.thumb
 313              		.thumb_func
 314              		.fpu fpv4-sp-d16
ARM GAS  /tmp/cc60zarx.s 			page 76


 316              	prvInitialiseTaskLists:
 317              	.LFB37:
3431:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxPriority;
 318              		.loc 1 3431 0
 319              		.cfi_startproc
 320              		@ args = 0, pretend = 0, frame = 0
 321              		@ frame_needed = 0, uses_anonymous_args = 0
 322 0000 38B5     		push	{r3, r4, r5, lr}
 323              	.LCFI2:
 324              		.cfi_def_cfa_offset 16
 325              		.cfi_offset 3, -16
 326              		.cfi_offset 4, -12
 327              		.cfi_offset 5, -8
 328              		.cfi_offset 14, -4
 329              	.LVL28:
3434:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 330              		.loc 1 3434 0
 331 0002 0024     		movs	r4, #0
 332 0004 07E0     		b	.L36
 333              	.LVL29:
 334              	.L37:
3436:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 335              		.loc 1 3436 0 discriminator 3
 336 0006 04EB8402 		add	r2, r4, r4, lsl #2
 337 000a 9300     		lsls	r3, r2, #2
 338 000c 0E48     		ldr	r0, .L39
 339 000e 1844     		add	r0, r0, r3
 340 0010 FFF7FEFF 		bl	vListInitialise
 341              	.LVL30:
3434:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 342              		.loc 1 3434 0 discriminator 3
 343 0014 0134     		adds	r4, r4, #1
 344              	.LVL31:
 345              	.L36:
3434:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 346              		.loc 1 3434 0 is_stmt 0 discriminator 1
 347 0016 062C     		cmp	r4, #6
 348 0018 F5D9     		bls	.L37
3439:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 349              		.loc 1 3439 0 is_stmt 1
 350 001a 0C4D     		ldr	r5, .L39+4
 351 001c 2846     		mov	r0, r5
 352 001e FFF7FEFF 		bl	vListInitialise
 353              	.LVL32:
3440:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
 354              		.loc 1 3440 0
 355 0022 0B4C     		ldr	r4, .L39+8
 356              	.LVL33:
 357 0024 2046     		mov	r0, r4
 358 0026 FFF7FEFF 		bl	vListInitialise
 359              	.LVL34:
3441:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 360              		.loc 1 3441 0
 361 002a 0A48     		ldr	r0, .L39+12
 362 002c FFF7FEFF 		bl	vListInitialise
 363              	.LVL35:
3445:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
ARM GAS  /tmp/cc60zarx.s 			page 77


 364              		.loc 1 3445 0
 365 0030 0948     		ldr	r0, .L39+16
 366 0032 FFF7FEFF 		bl	vListInitialise
 367              	.LVL36:
3451:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 368              		.loc 1 3451 0
 369 0036 0948     		ldr	r0, .L39+20
 370 0038 FFF7FEFF 		bl	vListInitialise
 371              	.LVL37:
3457:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 372              		.loc 1 3457 0
 373 003c 084B     		ldr	r3, .L39+24
 374 003e 1D60     		str	r5, [r3]
3458:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 375              		.loc 1 3458 0
 376 0040 084B     		ldr	r3, .L39+28
 377 0042 1C60     		str	r4, [r3]
 378 0044 38BD     		pop	{r3, r4, r5, pc}
 379              	.L40:
 380 0046 00BF     		.align	2
 381              	.L39:
 382 0048 00000000 		.word	.LANCHOR4
 383 004c 00000000 		.word	.LANCHOR5
 384 0050 00000000 		.word	.LANCHOR6
 385 0054 00000000 		.word	.LANCHOR1
 386 0058 00000000 		.word	.LANCHOR7
 387 005c 00000000 		.word	.LANCHOR0
 388 0060 00000000 		.word	.LANCHOR2
 389 0064 00000000 		.word	.LANCHOR8
 390              		.cfi_endproc
 391              	.LFE37:
 393              		.section	.text.prvAddNewTaskToReadyList,"ax",%progbits
 394              		.align	1
 395              		.syntax unified
 396              		.thumb
 397              		.thumb_func
 398              		.fpu fpv4-sp-d16
 400              	prvAddNewTaskToReadyList:
 401              	.LFB7:
1022:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
 402              		.loc 1 1022 0
 403              		.cfi_startproc
 404              		@ args = 0, pretend = 0, frame = 0
 405              		@ frame_needed = 0, uses_anonymous_args = 0
 406              	.LVL38:
 407 0000 10B5     		push	{r4, lr}
 408              	.LCFI3:
 409              		.cfi_def_cfa_offset 8
 410              		.cfi_offset 4, -8
 411              		.cfi_offset 14, -4
 412 0002 0446     		mov	r4, r0
1025:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 413              		.loc 1 1025 0
 414 0004 FFF7FEFF 		bl	vPortEnterCritical
 415              	.LVL39:
1027:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB == NULL )
 416              		.loc 1 1027 0
ARM GAS  /tmp/cc60zarx.s 			page 78


 417 0008 204A     		ldr	r2, .L47
 418 000a 1368     		ldr	r3, [r2]
 419 000c 0133     		adds	r3, r3, #1
 420 000e 1360     		str	r3, [r2]
1028:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 421              		.loc 1 1028 0
 422 0010 1F4B     		ldr	r3, .L47+4
 423 0012 1B68     		ldr	r3, [r3]
 424 0014 002B     		cmp	r3, #0
 425 0016 31D0     		beq	.L46
1051:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 426              		.loc 1 1051 0
 427 0018 1E4B     		ldr	r3, .L47+8
 428 001a 1B68     		ldr	r3, [r3]
 429 001c 3BB9     		cbnz	r3, .L43
1053:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 430              		.loc 1 1053 0
 431 001e 1C4B     		ldr	r3, .L47+4
 432 0020 1B68     		ldr	r3, [r3]
 433 0022 DA6A     		ldr	r2, [r3, #44]
 434 0024 E36A     		ldr	r3, [r4, #44]
 435 0026 9A42     		cmp	r2, r3
 436 0028 01D8     		bhi	.L43
1055:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 437              		.loc 1 1055 0
 438 002a 194B     		ldr	r3, .L47+4
 439 002c 1C60     		str	r4, [r3]
 440              	.L43:
1068:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 441              		.loc 1 1068 0
 442 002e 1A4A     		ldr	r2, .L47+12
 443 0030 1368     		ldr	r3, [r2]
 444 0032 0133     		adds	r3, r3, #1
 445 0034 1360     		str	r3, [r2]
1078:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 446              		.loc 1 1078 0
 447 0036 E36A     		ldr	r3, [r4, #44]
 448 0038 0122     		movs	r2, #1
 449 003a 9A40     		lsls	r2, r2, r3
 450 003c 1749     		ldr	r1, .L47+16
 451 003e 0868     		ldr	r0, [r1]
 452 0040 0243     		orrs	r2, r2, r0
 453 0042 0A60     		str	r2, [r1]
 454 0044 03EB8303 		add	r3, r3, r3, lsl #2
 455 0048 9A00     		lsls	r2, r3, #2
 456 004a 211D     		adds	r1, r4, #4
 457 004c 1448     		ldr	r0, .L47+20
 458 004e 1044     		add	r0, r0, r2
 459 0050 FFF7FEFF 		bl	vListInsertEnd
 460              	.LVL40:
1082:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 461              		.loc 1 1082 0
 462 0054 FFF7FEFF 		bl	vPortExitCritical
 463              	.LVL41:
1084:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 464              		.loc 1 1084 0
 465 0058 0E4B     		ldr	r3, .L47+8
ARM GAS  /tmp/cc60zarx.s 			page 79


 466 005a 1B68     		ldr	r3, [r3]
 467 005c 6BB1     		cbz	r3, .L41
1088:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 468              		.loc 1 1088 0
 469 005e 0C4B     		ldr	r3, .L47+4
 470 0060 1B68     		ldr	r3, [r3]
 471 0062 DA6A     		ldr	r2, [r3, #44]
 472 0064 E36A     		ldr	r3, [r4, #44]
 473 0066 9A42     		cmp	r2, r3
 474 0068 07D2     		bcs	.L41
1090:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 475              		.loc 1 1090 0
 476 006a 4FF08052 		mov	r2, #268435456
 477 006e 0D4B     		ldr	r3, .L47+24
 478 0070 1A60     		str	r2, [r3]
 479              		.syntax unified
 480              	@ 1090 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 481 0072 BFF34F8F 		dsb
 482              	@ 0 "" 2
 483              	@ 1090 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 484 0076 BFF36F8F 		isb
 485              	@ 0 "" 2
 486              		.thumb
 487              		.syntax unified
 488              	.L41:
 489 007a 10BD     		pop	{r4, pc}
 490              	.LVL42:
 491              	.L46:
1032:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 492              		.loc 1 1032 0
 493 007c 044B     		ldr	r3, .L47+4
 494 007e 1C60     		str	r4, [r3]
1034:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 495              		.loc 1 1034 0
 496 0080 1368     		ldr	r3, [r2]
 497 0082 012B     		cmp	r3, #1
 498 0084 D3D1     		bne	.L43
1039:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 499              		.loc 1 1039 0
 500 0086 FFF7FEFF 		bl	prvInitialiseTaskLists
 501              	.LVL43:
 502 008a D0E7     		b	.L43
 503              	.L48:
 504              		.align	2
 505              	.L47:
 506 008c 00000000 		.word	.LANCHOR9
 507 0090 00000000 		.word	.LANCHOR10
 508 0094 00000000 		.word	.LANCHOR11
 509 0098 00000000 		.word	.LANCHOR12
 510 009c 00000000 		.word	.LANCHOR13
 511 00a0 00000000 		.word	.LANCHOR4
 512 00a4 04ED00E0 		.word	-536810236
 513              		.cfi_endproc
 514              	.LFE7:
 516              		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 517              		.align	1
 518              		.syntax unified
ARM GAS  /tmp/cc60zarx.s 			page 80


 519              		.thumb
 520              		.thumb_func
 521              		.fpu fpv4-sp-d16
 523              	prvCheckTasksWaitingTermination:
 524              	.LFB38:
3463:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 525              		.loc 1 3463 0
 526              		.cfi_startproc
 527              		@ args = 0, pretend = 0, frame = 0
 528              		@ frame_needed = 0, uses_anonymous_args = 0
 529              	.LBB98:
3473:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 530              		.loc 1 3473 0
 531 0000 0F4B     		ldr	r3, .L56
 532 0002 1B68     		ldr	r3, [r3]
 533 0004 D3B1     		cbz	r3, .L55
 534              	.LBE98:
3463:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 535              		.loc 1 3463 0
 536 0006 10B5     		push	{r4, lr}
 537              	.LCFI4:
 538              		.cfi_def_cfa_offset 8
 539              		.cfi_offset 4, -8
 540              		.cfi_offset 14, -4
 541              	.L51:
 542              	.LBB99:
3475:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 543              		.loc 1 3475 0
 544 0008 FFF7FEFF 		bl	vPortEnterCritical
 545              	.LVL44:
3477:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 546              		.loc 1 3477 0
 547 000c 0D4B     		ldr	r3, .L56+4
 548 000e DB68     		ldr	r3, [r3, #12]
 549 0010 DC68     		ldr	r4, [r3, #12]
 550              	.LVL45:
3478:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
 551              		.loc 1 3478 0
 552 0012 201D     		adds	r0, r4, #4
 553 0014 FFF7FEFF 		bl	uxListRemove
 554              	.LVL46:
3479:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
 555              		.loc 1 3479 0
 556 0018 0B4A     		ldr	r2, .L56+8
 557 001a 1368     		ldr	r3, [r2]
 558 001c 013B     		subs	r3, r3, #1
 559 001e 1360     		str	r3, [r2]
3480:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 560              		.loc 1 3480 0
 561 0020 074A     		ldr	r2, .L56
 562 0022 1368     		ldr	r3, [r2]
 563 0024 013B     		subs	r3, r3, #1
 564 0026 1360     		str	r3, [r2]
3482:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 565              		.loc 1 3482 0
 566 0028 FFF7FEFF 		bl	vPortExitCritical
 567              	.LVL47:
ARM GAS  /tmp/cc60zarx.s 			page 81


3484:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 568              		.loc 1 3484 0
 569 002c 2046     		mov	r0, r4
 570 002e FFF7FEFF 		bl	prvDeleteTCB
 571              	.LVL48:
3473:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 572              		.loc 1 3473 0
 573 0032 034B     		ldr	r3, .L56
 574 0034 1B68     		ldr	r3, [r3]
 575 0036 002B     		cmp	r3, #0
 576 0038 E6D1     		bne	.L51
 577              	.LBE99:
3488:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 578              		.loc 1 3488 0
 579 003a 10BD     		pop	{r4, pc}
 580              	.LVL49:
 581              	.L55:
 582              	.LCFI5:
 583              		.cfi_def_cfa_offset 0
 584              		.cfi_restore 4
 585              		.cfi_restore 14
 586 003c 7047     		bx	lr
 587              	.L57:
 588 003e 00BF     		.align	2
 589              	.L56:
 590 0040 00000000 		.word	.LANCHOR14
 591 0044 00000000 		.word	.LANCHOR7
 592 0048 00000000 		.word	.LANCHOR9
 593              		.cfi_endproc
 594              	.LFE38:
 596              		.section	.text.prvIdleTask,"ax",%progbits
 597              		.align	1
 598              		.syntax unified
 599              		.thumb
 600              		.thumb_func
 601              		.fpu fpv4-sp-d16
 603              	prvIdleTask:
 604              	.LFB36:
3219:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop warnings. */
 605              		.loc 1 3219 0
 606              		.cfi_startproc
 607              		@ Volatile: function does not return.
 608              		@ args = 0, pretend = 0, frame = 0
 609              		@ frame_needed = 0, uses_anonymous_args = 0
 610              	.LVL50:
 611 0000 08B5     		push	{r3, lr}
 612              	.LCFI6:
 613              		.cfi_def_cfa_offset 8
 614              		.cfi_offset 3, -8
 615              		.cfi_offset 14, -4
 616              	.LVL51:
 617              	.L59:
3235:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 618              		.loc 1 3235 0
 619 0002 FFF7FEFF 		bl	prvCheckTasksWaitingTermination
 620              	.LVL52:
3258:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  /tmp/cc60zarx.s 			page 82


 621              		.loc 1 3258 0
 622 0006 064B     		ldr	r3, .L62
 623 0008 1B68     		ldr	r3, [r3]
 624 000a 012B     		cmp	r3, #1
 625 000c F9D9     		bls	.L59
3260:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 626              		.loc 1 3260 0
 627 000e 4FF08052 		mov	r2, #268435456
 628 0012 044B     		ldr	r3, .L62+4
 629 0014 1A60     		str	r2, [r3]
 630              		.syntax unified
 631              	@ 3260 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 632 0016 BFF34F8F 		dsb
 633              	@ 0 "" 2
 634              	@ 3260 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 635 001a BFF36F8F 		isb
 636              	@ 0 "" 2
 637              		.thumb
 638              		.syntax unified
 639 001e F0E7     		b	.L59
 640              	.L63:
 641              		.align	2
 642              	.L62:
 643 0020 00000000 		.word	.LANCHOR4
 644 0024 04ED00E0 		.word	-536810236
 645              		.cfi_endproc
 646              	.LFE36:
 648              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 649              		.align	1
 650              		.syntax unified
 651              		.thumb
 652              		.thumb_func
 653              		.fpu fpv4-sp-d16
 655              	prvAddCurrentTaskToDelayedList:
 656              	.LFB54:
3744:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3745:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3746:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3747:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3748:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
3749:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3750:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetCurrentTaskHandle( void )
3751:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3752:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
3753:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3754:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* A critical section is not required as this is not called from
3755:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		an interrupt and the current TCB will always be the same for any
3756:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		individual execution thread. */
3757:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pxCurrentTCB;
3758:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3759:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
3760:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3761:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3762:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
3763:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3764:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3765:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
ARM GAS  /tmp/cc60zarx.s 			page 83


3766:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3767:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGetSchedulerState( void )
3768:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3769:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
3770:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3771:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
3772:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3773:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
3774:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3775:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3776:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3777:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3778:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3779:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
3780:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3781:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3782:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3783:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
3784:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3785:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3786:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3787:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
3788:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3789:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3790:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
3791:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3792:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3793:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3794:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3795:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
3796:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3797:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
3798:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
3799:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3800:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
3801:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		locked then the mutex holder might now be NULL.  _RB_ Is this still
3802:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		needed as interrupts can no longer use mutexes? */
3803:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
3804:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3805:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the holder of the mutex has a priority below the priority of
3806:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the task attempting to obtain the mutex then it will temporarily
3807:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			inherit the priority of the task attempting to obtain the mutex. */
3808:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
3809:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3810:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Adjust the mutex holder state to account for its new
3811:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				priority.  Only reset the event list item value if the value is
3812:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				not being used for anything else. */
3813:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VA
3814:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3815:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIOR
3816:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3817:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3818:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3819:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3820:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3821:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3822:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task being modified is in the ready state it will need
ARM GAS  /tmp/cc60zarx.s 			page 84


3823:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				to be moved into a new list. */
3824:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutex
3825:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3826:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3827:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3828:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
3829:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3830:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3831:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3832:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3833:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3834:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3835:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
3836:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
3837:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
3838:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3839:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3840:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3841:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Just inherit the priority. */
3842:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
3843:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3844:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3845:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
3846:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3847:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Inheritance occurred. */
3848:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
3849:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3850:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3851:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3852:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
3853:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3854:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The base priority of the mutex holder is lower than the
3855:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority of the task attempting to take the mutex, but the
3856:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					current priority of the mutex holder is not lower than the
3857:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority of the task attempting to take the mutex.
3858:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Therefore the mutex holder must have already inherited a
3859:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority, but inheritance would have occurred if that had
3860:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					not been the case. */
3861:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
3862:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3863:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3864:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3865:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3866:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3867:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3868:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3869:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3870:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3871:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3872:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3873:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3874:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
3875:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3876:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3877:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
3878:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3879:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cc60zarx.s 			page 85


3880:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3881:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3882:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
3883:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3884:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
3885:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
3886:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3887:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
3888:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3889:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task can only have an inherited priority if it holds the mutex.
3890:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			If the mutex is held by a task then it cannot be given from an
3891:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupt, and if a mutex is given by the holding task then it must
3892:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			be the running state task. */
3893:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB == pxCurrentTCB );
3894:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
3895:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
3896:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3897:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Has the holder of the mutex inherited the priority of another
3898:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task? */
3899:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
3900:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3901:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only disinherit if no other mutexes are held. */
3902:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
3903:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3904:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task can only have an inherited priority if it holds
3905:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the mutex.  If the mutex is held by a task then it cannot be
3906:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					given from an interrupt, and if a mutex is given by the
3907:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					holding task then it must be the running state task.  Remove
3908:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the holding task from the ready list. */
3909:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3910:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3911:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
3912:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3913:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3914:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3915:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3916:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3917:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3918:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Disinherit the priority before adding the task into the
3919:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					new	ready list. */
3920:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
3921:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
3922:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3923:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Reset the event list item value.  It cannot be in use for
3924:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					any other purpose if this task is running, and it must be
3925:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					running to give back the mutex. */
3926:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
3927:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
3928:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3929:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Return true to indicate that a context switch is required.
3930:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					This is only actually required in the corner case whereby
3931:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					multiple mutexes were held and the mutexes were given back
3932:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					in an order different to that in which they were taken.
3933:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					If a context switch did not occur when the first mutex was
3934:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					returned, even if a task was waiting on it, then a context
3935:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					switch should occur when the last mutex is returned whether
3936:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					a task is waiting on it or not. */
ARM GAS  /tmp/cc60zarx.s 			page 86


3937:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
3938:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3939:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3940:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3941:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3942:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3943:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3944:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3945:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3946:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3947:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3948:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3949:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3950:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3951:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3952:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3953:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3954:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
3955:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3956:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3957:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
3958:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3959:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3960:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3961:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3962:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestP
3963:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3964:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
3965:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
3966:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
3967:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3968:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
3969:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3970:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If pxMutexHolder is not NULL then the holder must hold at least
3971:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			one mutex. */
3972:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
3973:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3974:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Determine the priority to which the priority of the task that
3975:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			holds the mutex should be set.  This will be the greater of the
3976:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			holding task's base priority and the priority of the highest
3977:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			priority task that is waiting to obtain the mutex. */
3978:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
3979:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3980:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityToUse = uxHighestPriorityWaitingTask;
3981:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3982:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3983:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3984:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityToUse = pxTCB->uxBasePriority;
3985:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3986:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3987:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Does the priority need to change? */
3988:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != uxPriorityToUse )
3989:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3990:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only disinherit if no other mutexes are held.  This is a
3991:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				simplification in the priority inheritance implementation.  If
3992:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task that holds the mutex is also holding other mutexes then
3993:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the other mutexes may have caused the priority inheritance. */
ARM GAS  /tmp/cc60zarx.s 			page 87


3994:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
3995:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3996:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If a task has timed out because it already holds the
3997:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mutex it was trying to obtain then it cannot of inherited
3998:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					its own priority. */
3999:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( pxTCB != pxCurrentTCB );
4000:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4001:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Disinherit the priority, remembering the previous
4002:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority to facilitate determining the subject task's
4003:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					state. */
4004:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4005:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxPriorityUsedOnEntry = pxTCB->uxPriority;
4006:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxPriorityToUse;
4007:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4008:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Only reset the event list item value if the value is not
4009:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					being used for anything else. */
4010:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE
4011:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4012:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( 
4013:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4014:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4015:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4016:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4017:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4018:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4019:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the running task is not the task that holds the mutex
4020:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					then the task that holds the mutex could be in either the
4021:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Ready, Blocked or Suspended states.  Only remove the task
4022:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					from its current state list if it is in the Ready state as
4023:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the task's priority is going to change and there is one
4024:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Ready list per priority. */
4025:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xState
4026:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4027:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
4028:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4029:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
4030:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4031:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
4032:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4033:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
4034:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4035:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4036:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						prvAddTaskToReadyList( pxTCB );
4037:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4038:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4039:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4040:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4041:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4042:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4043:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4044:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4045:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4046:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4047:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4048:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4049:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4050:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
ARM GAS  /tmp/cc60zarx.s 			page 88


4051:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4052:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4053:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4054:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4055:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4056:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4057:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4058:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4059:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4060:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4061:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4062:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4063:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4064:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskEnterCritical( void )
4065:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4066:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
4067:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4068:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4069:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4070:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxCriticalNesting )++;
4071:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4072:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* This is not the interrupt safe version of the enter critical
4073:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function so	assert() if it is being called from an interrupt
4074:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			context.  Only API functions that end in "FromISR" can be used in an
4075:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupt.  Only assert if the critical nesting count is 1 to
4076:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			protect against recursive calls if the assert function also uses a
4077:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			critical section. */
4078:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting == 1 )
4079:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4080:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portASSERT_IF_IN_ISR();
4081:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4082:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4083:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4084:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4085:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4086:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4087:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4088:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4089:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4090:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4091:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4092:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4093:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4094:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskExitCritical( void )
4095:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4096:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4097:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4098:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting > 0U )
4099:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4100:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( pxCurrentTCB->uxCriticalNesting )--;
4101:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4102:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxCriticalNesting == 0U )
4103:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4104:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portENABLE_INTERRUPTS();
4105:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4106:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4107:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  /tmp/cc60zarx.s 			page 89


4108:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4109:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4110:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4111:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4112:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4113:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4114:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4115:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4116:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4117:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4118:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4119:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4120:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4121:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4122:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4123:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4124:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4125:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4126:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4127:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
4128:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4129:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	size_t x;
4130:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4131:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Start by copying the entire string. */
4132:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		strcpy( pcBuffer, pcTaskName );
4133:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4134:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Pad the end of the string with spaces to ensure columns line up when
4135:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		printed out. */
4136:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
4137:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4138:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pcBuffer[ x ] = ' ';
4139:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4140:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4141:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Terminate. */
4142:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pcBuffer[ x ] = 0x00;
4143:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4144:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return the new end of string. */
4145:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return &( pcBuffer[ x ] );
4146:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4147:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4148:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
4149:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4150:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4151:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( config
4152:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4153:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskList( char * pcWriteBuffer )
4154:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4155:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4156:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
4157:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char cStatus;
4158:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4159:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/*
4160:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
4161:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4162:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4163:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4164:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * scheduler.
ARM GAS  /tmp/cc60zarx.s 			page 90


4165:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4166:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
4167:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * uxTaskGetSystemState() output into a human readable table that
4168:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * displays task names, states and stack usage.
4169:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4170:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskList() has a dependency on the sprintf() C library function that
4171:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * might bloat the code size, use a lot of stack, and provide different
4172:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * results on different platforms.  An alternative, tiny, third party,
4173:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * and limited functionality implementation of sprintf() is provided in
4174:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * many of the FreeRTOS/Demo sub-directories in a file called
4175:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
4176:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * snprintf() implementation!).
4177:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4178:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4179:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4180:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskList().
4181:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 */
4182:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4183:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4184:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4185:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = 0x00;
4186:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4187:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4188:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function is executing. */
4189:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4190:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4191:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  if
4192:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4193:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
4194:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
4195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4196:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4197:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4198:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
4199:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
4200:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4201:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Create a human readable table from the binary data. */
4202:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for( x = 0; x < uxArraySize; x++ )
4203:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4204:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				switch( pxTaskStatusArray[ x ].eCurrentState )
4205:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4206:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eRunning:		cStatus = tskRUNNING_CHAR;
4207:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4208:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4209:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eReady:		cStatus = tskREADY_CHAR;
4210:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4211:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4212:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eBlocked:		cStatus = tskBLOCKED_CHAR;
4213:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4214:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4215:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
4216:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4217:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4218:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eDeleted:		cStatus = tskDELETED_CHAR;
4219:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4220:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4221:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					default:			/* Should not get here, but it is included
ARM GAS  /tmp/cc60zarx.s 			page 91


4222:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										to prevent static checking errors. */
4223:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										cStatus = 0x00;
4224:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4225:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4226:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4227:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Write the task name to the string, padding with spaces so it
4228:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				can be printed in tabular form more easily. */
4229:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4230:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4231:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Write the rest of the string. */
4232:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x 
4233:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer );
4234:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4235:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4236:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4237:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4238:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4239:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4240:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4241:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4242:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4243:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4244:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4245:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4246:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( 
4247:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
4248:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4249:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( c
4250:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4251:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskGetRunTimeStats( char *pcWriteBuffer )
4252:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4253:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4254:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
4255:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTotalTime, ulStatsAsPercentage;
4256:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4257:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_TRACE_FACILITY != 1 )
4258:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4259:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTime
4260:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4261:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
4262:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4263:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/*
4264:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
4265:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4266:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4267:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4268:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * scheduler.
4269:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4270:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4271:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the uxTaskGetSystemState() output into a human readable table that
4272:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * displays the amount of time each task has spent in the Running state
4273:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * in both absolute and percentage terms.
4274:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4275:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4276:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * function that might bloat the code size, use a lot of stack, and
4277:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * provide different results on different platforms.  An alternative,
4278:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * tiny, third party, and limited functionality implementation of
ARM GAS  /tmp/cc60zarx.s 			page 92


4279:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4280:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4281:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * a full snprintf() implementation!).
4282:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4283:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4284:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4285:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskGetRunTimeStats().
4286:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 */
4287:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4288:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4289:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = 0x00;
4290:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4291:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4292:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function is executing. */
4293:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4294:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4295:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  If
4296:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4297:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
4298:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
4299:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4300:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4301:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4302:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
4303:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4304:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4305:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* For percentage calculations. */
4306:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulTotalTime /= 100UL;
4307:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4308:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Avoid divide by zero errors. */
4309:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulTotalTime > 0 )
4310:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4311:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Create a human readable table from the binary data. */
4312:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				for( x = 0; x < uxArraySize; x++ )
4313:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4314:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* What percentage of the total run time has the task used?
4315:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					This will always be rounded down to the nearest integer.
4316:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulTotalRunTimeDiv100 has already been divided by 100. */
4317:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4318:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4319:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Write the task name to the string, padding with
4320:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					spaces so it can be printed in tabular form more
4321:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					easily. */
4322:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4323:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4324:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
4325:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4326:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4327:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4328:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulSta
4329:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4330:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
4331:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4332:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4333:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4334:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4335:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
ARM GAS  /tmp/cc60zarx.s 			page 93


4336:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
4337:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4338:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4339:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4340:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* If the percentage is zero here then the task has
4341:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						consumed less than 1% of the total run time. */
4342:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4343:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4344:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
4345:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4346:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
4347:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4348:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4349:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4350:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4351:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4352:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
4353:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4354:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4355:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer += strlen( pcWriteBuffer );
4356:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4357:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4358:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4359:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4360:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4361:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4362:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4363:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4364:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4365:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4366:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4367:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4368:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4369:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4370:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4371:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4372:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4373:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4374:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4375:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4376:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4377:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
4378:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxReturn;
4379:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4380:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
4381:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4382:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Reset the event list item to its normal value - so it can be used with
4383:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	queues and semaphores. */
4384:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES 
4385:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4386:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return uxReturn;
4387:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
4388:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4389:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4390:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4391:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4392:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvTaskIncrementMutexHeldCount( void )
ARM GAS  /tmp/cc60zarx.s 			page 94


4393:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4394:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
4395:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		then pxCurrentTCB will be NULL. */
4396:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB != NULL )
4397:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4398:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxMutexesHeld )++;
4399:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4400:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4401:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxCurrentTCB;
4402:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4403:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4404:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4405:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4406:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4407:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4408:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4409:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
4410:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4411:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
4412:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4413:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4414:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4415:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Only block if the notification count is not already non-zero. */
4416:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
4417:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4418:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4419:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4420:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4421:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4422:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4423:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4424:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
4425:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4426:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4427:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4428:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4429:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4430:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
4431:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4432:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4433:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4434:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4435:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4436:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4437:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4438:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4439:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4440:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4441:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4442:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4443:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4444:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4445:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4446:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_TAKE();
4447:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
4448:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4449:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulReturn != 0UL )
ARM GAS  /tmp/cc60zarx.s 			page 95


4450:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4451:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xClearCountOnExit != pdFALSE )
4452:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4453:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = 0UL;
4454:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4455:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4456:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4457:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
4458:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4459:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4460:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4461:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4462:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4463:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4464:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4465:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4466:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4467:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4468:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4469:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ulReturn;
4470:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4471:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4472:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4473:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4474:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4475:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4476:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4477:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t 
4478:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4479:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
4480:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4481:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4482:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4483:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Only block if a notification is not already pending. */
4484:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4485:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4486:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Clear bits in the task's notification value as bits may get
4487:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				set	by the notifying task or interrupt.  This can be used to
4488:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				clear the value to zero. */
4489:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
4490:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4491:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4492:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4493:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4494:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4495:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4496:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4497:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
4498:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4499:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4500:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4501:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4502:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4503:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
4504:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4505:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4506:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  /tmp/cc60zarx.s 			page 96


4507:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4508:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4509:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4510:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4511:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4512:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4513:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4514:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4515:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4516:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4517:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4518:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4519:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_WAIT();
4520:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4521:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulNotificationValue != NULL )
4522:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4523:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Output the current notification value, which may or may not
4524:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				have changed. */
4525:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
4526:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4527:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4528:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If ucNotifyValue is set then either the task never entered the
4529:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			blocked state (because a notification was already pending) or the
4530:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task unblocked because of a notification.  Otherwise the task
4531:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			unblocked because of a timeout. */
4532:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4533:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4534:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A notification was not received. */
4535:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
4536:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4537:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4538:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4539:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A notification was already pending or a notification was
4540:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				received while the task was waiting. */
4541:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
4542:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
4543:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4544:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4545:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4546:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4547:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4548:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4549:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4550:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4551:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4552:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4553:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4554:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4555:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4556:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4557:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction
4558:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4559:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4560:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
4561:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4562:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4563:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
ARM GAS  /tmp/cc60zarx.s 			page 97


4564:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4565:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4566:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4567:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4568:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4569:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4570:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4571:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4572:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4573:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4574:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4575:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4576:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4577:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			switch( eAction )
4578:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4579:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4580:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4581:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4582:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4583:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4584:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4585:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4586:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4587:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4588:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4589:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4590:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4591:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4592:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4593:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4594:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4595:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4596:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4597:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4598:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4599:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4600:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4601:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4602:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4603:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eNoAction:
4604:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4605:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					updated. */
4606:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4607:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4608:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4609:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY();
4610:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4611:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4612:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4613:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4614:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4615:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4616:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
4617:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4618:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4619:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4620:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cc60zarx.s 			page 98


4621:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( configUSE_TICKLESS_IDLE != 0 )
4622:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4623:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If a task is blocked waiting for a notification then
4624:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime might be set to the blocked task's time
4625:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					out time.  If the task is unblocked for a reason other than
4626:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					a timeout xNextTaskUnblockTime is normally left unchanged,
4627:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					because it will automatically get reset to a new value when
4628:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the tick count equals xNextTaskUnblockTime.  However if
4629:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					tickless idling is used it might be more important to enter
4630:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					sleep mode at the earliest possible time - so reset
4631:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime here to ensure it is updated at the
4632:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					earliest possible time. */
4633:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
4634:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4635:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
4636:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4637:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4638:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4639:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4640:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4641:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
4642:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4643:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4644:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4645:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4646:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4647:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4648:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4649:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4650:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4651:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4652:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4653:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4654:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4655:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4656:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4657:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4658:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4659:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4660:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4661:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4662:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4663:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction 
4664:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4665:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4666:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4667:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
4668:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4669:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4670:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
4671:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4672:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4673:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4674:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4675:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4676:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4677:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
ARM GAS  /tmp/cc60zarx.s 			page 99


4678:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4679:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4680:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4681:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4682:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4683:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4684:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4685:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4686:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
4687:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4688:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4689:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4690:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4691:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4692:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4693:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4694:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4695:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4696:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4697:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4698:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4699:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4700:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4701:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4702:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			switch( eAction )
4703:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4704:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4705:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4706:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4707:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4708:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4709:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4710:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4711:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4712:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4713:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4714:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4715:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4716:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4717:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4718:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4719:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4720:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4721:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4722:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4723:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4724:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4725:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4726:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4727:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4728:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eNoAction :
4729:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4730:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					updated. */
4731:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4732:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4733:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4734:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_FROM_ISR();
ARM GAS  /tmp/cc60zarx.s 			page 100


4735:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4736:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4737:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4738:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4739:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4740:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4741:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4742:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4743:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4744:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4745:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4746:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4747:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4748:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4749:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4750:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4751:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4752:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
4753:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4754:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4755:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4756:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4757:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4758:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4759:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
4760:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4761:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
4762:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4763:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4764:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4765:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Mark that a yield is pending in case the user is not
4766:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						using the "xHigherPriorityTaskWoken" parameter to an ISR
4767:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						safe FreeRTOS function. */
4768:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
4769:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4770:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4771:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4772:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4773:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4774:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4775:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4776:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4777:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4778:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4779:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4780:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4781:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4782:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4783:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4784:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4785:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4786:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4787:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
4788:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4789:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4790:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4791:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
ARM GAS  /tmp/cc60zarx.s 			page 101


4792:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4793:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
4794:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4795:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4796:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4797:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4798:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4799:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4800:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4801:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4802:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4803:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4804:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4805:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4806:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4807:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4808:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4809:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
4810:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4811:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4812:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4813:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4814:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4815:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4816:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4817:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4818:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4819:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4820:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* 'Giving' is equivalent to incrementing a count in a counting
4821:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			semaphore. */
4822:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->ulNotifiedValue )++;
4823:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4824:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_GIVE_FROM_ISR();
4825:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4826:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4827:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4828:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4829:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4830:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4831:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4832:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4833:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4834:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4835:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4836:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4837:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4838:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4839:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4840:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4841:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4842:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
4843:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4844:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4845:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4846:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4847:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4848:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
ARM GAS  /tmp/cc60zarx.s 			page 102


4849:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
4850:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4851:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
4852:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4853:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4854:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4855:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Mark that a yield is pending in case the user is not
4856:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						using the "xHigherPriorityTaskWoken" parameter in an ISR
4857:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						safe FreeRTOS function. */
4858:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
4859:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4860:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4861:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4862:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4863:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4864:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4865:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4866:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4867:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4868:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4869:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4870:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4871:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4872:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4873:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4874:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4875:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4876:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
4877:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4878:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
4879:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
4880:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4881:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
4882:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		its notification state cleared. */
4883:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
4884:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4885:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4886:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4887:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
4888:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4889:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4890:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
4891:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4892:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4893:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4894:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFAIL;
4895:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4896:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4897:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4898:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4899:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4900:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4901:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4902:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4903:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4904:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4905:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cc60zarx.s 			page 103


4906:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
4907:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 657              		.loc 1 4907 0
 658              		.cfi_startproc
 659              		@ args = 0, pretend = 0, frame = 0
 660              		@ frame_needed = 0, uses_anonymous_args = 0
 661              	.LVL53:
 662 0000 70B5     		push	{r4, r5, r6, lr}
 663              	.LCFI7:
 664              		.cfi_def_cfa_offset 16
 665              		.cfi_offset 4, -16
 666              		.cfi_offset 5, -12
 667              		.cfi_offset 6, -8
 668              		.cfi_offset 14, -4
 669 0002 0446     		mov	r4, r0
 670 0004 0E46     		mov	r6, r1
4908:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTimeToWake;
4909:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** const TickType_t xConstTickCount = xTickCount;
 671              		.loc 1 4909 0
 672 0006 1D4B     		ldr	r3, .L72
 673 0008 1D68     		ldr	r5, [r3]
 674              	.LVL54:
4910:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4911:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
4912:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4913:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
4914:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		reset to pdFALSE so it can be detected as having been set to pdTRUE
4915:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		when the task leaves the Blocked state. */
4916:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxCurrentTCB->ucDelayAborted = pdFALSE;
4917:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4918:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
4919:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4920:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the ready list before adding it to the blocked list
4921:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	as the same list item is used for both lists. */
4922:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 675              		.loc 1 4922 0
 676 000a 1D4B     		ldr	r3, .L72+4
 677 000c 1868     		ldr	r0, [r3]
 678              	.LVL55:
 679 000e 0430     		adds	r0, r0, #4
 680 0010 FFF7FEFF 		bl	uxListRemove
 681              	.LVL56:
 682 0014 50B9     		cbnz	r0, .L65
4923:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4924:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
4925:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		check, and the port reset macro can be called directly. */
4926:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 683              		.loc 1 4926 0
 684 0016 1A4B     		ldr	r3, .L72+4
 685 0018 1B68     		ldr	r3, [r3]
 686 001a DA6A     		ldr	r2, [r3, #44]
 687 001c 0123     		movs	r3, #1
 688 001e 03FA02F2 		lsl	r2, r3, r2
 689 0022 1849     		ldr	r1, .L72+8
 690 0024 0B68     		ldr	r3, [r1]
 691 0026 23EA0203 		bic	r3, r3, r2
 692 002a 0B60     		str	r3, [r1]
ARM GAS  /tmp/cc60zarx.s 			page 104


 693              	.L65:
4927:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4928:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
4929:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4930:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
4931:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4932:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4933:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
4934:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4935:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 694              		.loc 1 4935 0
 695 002c B4F1FF3F 		cmp	r4, #-1
 696 0030 13D0     		beq	.L70
 697              	.L66:
4936:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4937:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
4938:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			list to ensure it is not woken by a timing event.  It will block
4939:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			indefinitely. */
4940:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
4941:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4942:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4943:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4944:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
4945:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
4946:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			kernel will manage it correctly. */
4947:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = xConstTickCount + xTicksToWait;
 698              		.loc 1 4947 0
 699 0032 2C44     		add	r4, r4, r5
 700              	.LVL57:
4948:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4949:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The list item will be inserted in wake time order. */
4950:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 701              		.loc 1 4950 0
 702 0034 124B     		ldr	r3, .L72+4
 703 0036 1B68     		ldr	r3, [r3]
 704 0038 5C60     		str	r4, [r3, #4]
4951:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4952:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xTimeToWake < xConstTickCount )
 705              		.loc 1 4952 0
 706 003a A542     		cmp	r5, r4
 707 003c 16D8     		bhi	.L71
4953:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4954:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Wake time has overflowed.  Place this item in the overflow
4955:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				list. */
4956:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
4957:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4958:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4959:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4960:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The wake time has not overflowed, so the current block list
4961:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is used. */
4962:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 708              		.loc 1 4962 0
 709 003e 124B     		ldr	r3, .L72+12
 710 0040 1868     		ldr	r0, [r3]
 711 0042 0F4B     		ldr	r3, .L72+4
 712 0044 1968     		ldr	r1, [r3]
 713 0046 0431     		adds	r1, r1, #4
ARM GAS  /tmp/cc60zarx.s 			page 105


 714 0048 FFF7FEFF 		bl	vListInsert
 715              	.LVL58:
4963:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4964:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task entering the blocked state was placed at the
4965:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				head of the list of blocked tasks then xNextTaskUnblockTime
4966:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				needs to be updated too. */
4967:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTimeToWake < xNextTaskUnblockTime )
 716              		.loc 1 4967 0
 717 004c 0F4B     		ldr	r3, .L72+16
 718 004e 1B68     		ldr	r3, [r3]
 719 0050 9C42     		cmp	r4, r3
 720 0052 01D2     		bcs	.L64
4968:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4969:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = xTimeToWake;
 721              		.loc 1 4969 0
 722 0054 0D4B     		ldr	r3, .L72+16
 723 0056 1C60     		str	r4, [r3]
 724              	.L64:
 725 0058 70BD     		pop	{r4, r5, r6, pc}
 726              	.LVL59:
 727              	.L70:
4935:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 728              		.loc 1 4935 0 discriminator 1
 729 005a 002E     		cmp	r6, #0
 730 005c E9D0     		beq	.L66
4940:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 731              		.loc 1 4940 0
 732 005e 084B     		ldr	r3, .L72+4
 733 0060 1968     		ldr	r1, [r3]
 734 0062 0431     		adds	r1, r1, #4
 735 0064 0A48     		ldr	r0, .L72+20
 736 0066 FFF7FEFF 		bl	vListInsertEnd
 737              	.LVL60:
 738 006a 70BD     		pop	{r4, r5, r6, pc}
 739              	.LVL61:
 740              	.L71:
4956:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 741              		.loc 1 4956 0
 742 006c 094B     		ldr	r3, .L72+24
 743 006e 1868     		ldr	r0, [r3]
 744 0070 034B     		ldr	r3, .L72+4
 745 0072 1968     		ldr	r1, [r3]
 746 0074 0431     		adds	r1, r1, #4
 747 0076 FFF7FEFF 		bl	vListInsert
 748              	.LVL62:
 749 007a 70BD     		pop	{r4, r5, r6, pc}
 750              	.LVL63:
 751              	.L73:
 752              		.align	2
 753              	.L72:
 754 007c 00000000 		.word	.LANCHOR15
 755 0080 00000000 		.word	.LANCHOR10
 756 0084 00000000 		.word	.LANCHOR13
 757 0088 00000000 		.word	.LANCHOR2
 758 008c 00000000 		.word	.LANCHOR3
 759 0090 00000000 		.word	.LANCHOR0
 760 0094 00000000 		.word	.LANCHOR8
ARM GAS  /tmp/cc60zarx.s 			page 106


 761              		.cfi_endproc
 762              	.LFE54:
 764              		.section	.text.xTaskCreate,"ax",%progbits
 765              		.align	1
 766              		.global	xTaskCreate
 767              		.syntax unified
 768              		.thumb
 769              		.thumb_func
 770              		.fpu fpv4-sp-d16
 772              	xTaskCreate:
 773              	.LFB5:
 732:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 774              		.loc 1 732 0
 775              		.cfi_startproc
 776              		@ args = 8, pretend = 0, frame = 0
 777              		@ frame_needed = 0, uses_anonymous_args = 0
 778              	.LVL64:
 779 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 780              	.LCFI8:
 781              		.cfi_def_cfa_offset 28
 782              		.cfi_offset 4, -28
 783              		.cfi_offset 5, -24
 784              		.cfi_offset 6, -20
 785              		.cfi_offset 7, -16
 786              		.cfi_offset 8, -12
 787              		.cfi_offset 9, -8
 788              		.cfi_offset 14, -4
 789 0004 85B0     		sub	sp, sp, #20
 790              	.LCFI9:
 791              		.cfi_def_cfa_offset 48
 792 0006 0646     		mov	r6, r0
 793 0008 0F46     		mov	r7, r1
 794 000a 1546     		mov	r5, r2
 795 000c 9846     		mov	r8, r3
 796              	.LBB100:
 766:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 797              		.loc 1 766 0
 798 000e 9000     		lsls	r0, r2, #2
 799              	.LVL65:
 800 0010 FFF7FEFF 		bl	pvPortMalloc
 801              	.LVL66:
 768:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 802              		.loc 1 768 0
 803 0014 00B3     		cbz	r0, .L78
 804 0016 8146     		mov	r9, r0
 771:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 805              		.loc 1 771 0
 806 0018 5420     		movs	r0, #84
 807              	.LVL67:
 808 001a FFF7FEFF 		bl	pvPortMalloc
 809              	.LVL68:
 773:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 810              		.loc 1 773 0
 811 001e 0446     		mov	r4, r0
 812 0020 B0B1     		cbz	r0, .L76
 776:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 813              		.loc 1 776 0
ARM GAS  /tmp/cc60zarx.s 			page 107


 814 0022 C0F83090 		str	r9, [r0, #48]
 815              	.LVL69:
 816              	.L75:
 817              	.LBE100:
 792:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 818              		.loc 1 792 0
 819 0026 CCB1     		cbz	r4, .L79
 802:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 820              		.loc 1 802 0
 821 0028 0023     		movs	r3, #0
 822 002a 0393     		str	r3, [sp, #12]
 823 002c 0294     		str	r4, [sp, #8]
 824 002e 0D9B     		ldr	r3, [sp, #52]
 825 0030 0193     		str	r3, [sp, #4]
 826 0032 0C9B     		ldr	r3, [sp, #48]
 827 0034 0093     		str	r3, [sp]
 828 0036 4346     		mov	r3, r8
 829 0038 2A46     		mov	r2, r5
 830 003a 3946     		mov	r1, r7
 831 003c 3046     		mov	r0, r6
 832 003e FFF7FEFF 		bl	prvInitialiseNewTask
 833              	.LVL70:
 803:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 834              		.loc 1 803 0
 835 0042 2046     		mov	r0, r4
 836 0044 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 837              	.LVL71:
 804:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 838              		.loc 1 804 0
 839 0048 0120     		movs	r0, #1
 840              	.LVL72:
 841              	.L74:
 812:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 842              		.loc 1 812 0
 843 004a 05B0     		add	sp, sp, #20
 844              	.LCFI10:
 845              		.cfi_remember_state
 846              		.cfi_def_cfa_offset 28
 847              		@ sp needed
 848 004c BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 849              	.LVL73:
 850              	.L76:
 851              	.LCFI11:
 852              		.cfi_restore_state
 853              	.LBB101:
 782:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 854              		.loc 1 782 0
 855 0050 4846     		mov	r0, r9
 856              	.LVL74:
 857 0052 FFF7FEFF 		bl	vPortFree
 858              	.LVL75:
 859 0056 E6E7     		b	.L75
 860              	.LVL76:
 861              	.L78:
 787:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 862              		.loc 1 787 0
 863 0058 0024     		movs	r4, #0
ARM GAS  /tmp/cc60zarx.s 			page 108


 864 005a E4E7     		b	.L75
 865              	.LVL77:
 866              	.L79:
 867              	.LBE101:
 808:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 868              		.loc 1 808 0
 869 005c 4FF0FF30 		mov	r0, #-1
 870              	.LVL78:
 811:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 871              		.loc 1 811 0
 872 0060 F3E7     		b	.L74
 873              		.cfi_endproc
 874              	.LFE5:
 876              		.section	.text.vTaskDelete,"ax",%progbits
 877              		.align	1
 878              		.global	vTaskDelete
 879              		.syntax unified
 880              		.thumb
 881              		.thumb_func
 882              		.fpu fpv4-sp-d16
 884              	vTaskDelete:
 885              	.LFB8:
1107:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 886              		.loc 1 1107 0
 887              		.cfi_startproc
 888              		@ args = 0, pretend = 0, frame = 0
 889              		@ frame_needed = 0, uses_anonymous_args = 0
 890              	.LVL79:
 891 0000 38B5     		push	{r3, r4, r5, lr}
 892              	.LCFI12:
 893              		.cfi_def_cfa_offset 16
 894              		.cfi_offset 3, -16
 895              		.cfi_offset 4, -12
 896              		.cfi_offset 5, -8
 897              		.cfi_offset 14, -4
 898 0002 0446     		mov	r4, r0
1110:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 899              		.loc 1 1110 0
 900 0004 FFF7FEFF 		bl	vPortEnterCritical
 901              	.LVL80:
1114:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 902              		.loc 1 1114 0
 903 0008 002C     		cmp	r4, #0
 904 000a 34D0     		beq	.L92
 905              	.LVL81:
 906              	.L82:
1117:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 907              		.loc 1 1117 0 discriminator 4
 908 000c 251D     		adds	r5, r4, #4
 909 000e 2846     		mov	r0, r5
 910 0010 FFF7FEFF 		bl	uxListRemove
 911              	.LVL82:
 912 0014 70B9     		cbnz	r0, .L83
1119:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 913              		.loc 1 1119 0
 914 0016 E26A     		ldr	r2, [r4, #44]
 915 0018 02EB8201 		add	r1, r2, r2, lsl #2
ARM GAS  /tmp/cc60zarx.s 			page 109


 916 001c 8B00     		lsls	r3, r1, #2
 917 001e 2649     		ldr	r1, .L95
 918 0020 CB58     		ldr	r3, [r1, r3]
 919 0022 3BB9     		cbnz	r3, .L83
1119:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 920              		.loc 1 1119 0 is_stmt 0 discriminator 1
 921 0024 0123     		movs	r3, #1
 922 0026 03FA02F2 		lsl	r2, r3, r2
 923 002a 2449     		ldr	r1, .L95+4
 924 002c 0B68     		ldr	r3, [r1]
 925 002e 23EA0203 		bic	r3, r3, r2
 926 0032 0B60     		str	r3, [r1]
 927              	.L83:
1127:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 928              		.loc 1 1127 0 is_stmt 1
 929 0034 A36A     		ldr	r3, [r4, #40]
 930 0036 1BB1     		cbz	r3, .L84
1129:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 931              		.loc 1 1129 0
 932 0038 04F11800 		add	r0, r4, #24
 933 003c FFF7FEFF 		bl	uxListRemove
 934              	.LVL83:
 935              	.L84:
1140:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 936              		.loc 1 1140 0
 937 0040 1F4A     		ldr	r2, .L95+8
 938 0042 1368     		ldr	r3, [r2]
 939 0044 0133     		adds	r3, r3, #1
 940 0046 1360     		str	r3, [r2]
1142:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 941              		.loc 1 1142 0
 942 0048 1E4B     		ldr	r3, .L95+12
 943 004a 1B68     		ldr	r3, [r3]
 944 004c 9C42     		cmp	r4, r3
 945 004e 15D0     		beq	.L93
1165:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
 946              		.loc 1 1165 0
 947 0050 1D4A     		ldr	r2, .L95+16
 948 0052 1368     		ldr	r3, [r2]
 949 0054 013B     		subs	r3, r3, #1
 950 0056 1360     		str	r3, [r2]
1166:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 951              		.loc 1 1166 0
 952 0058 2046     		mov	r0, r4
 953 005a FFF7FEFF 		bl	prvDeleteTCB
 954              	.LVL84:
1170:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 955              		.loc 1 1170 0
 956 005e FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 957              	.LVL85:
 958              	.L86:
1175:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 959              		.loc 1 1175 0
 960 0062 FFF7FEFF 		bl	vPortExitCritical
 961              	.LVL86:
1179:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 962              		.loc 1 1179 0
ARM GAS  /tmp/cc60zarx.s 			page 110


 963 0066 194B     		ldr	r3, .L95+20
 964 0068 1B68     		ldr	r3, [r3]
 965 006a 1BB1     		cbz	r3, .L81
1181:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 966              		.loc 1 1181 0
 967 006c 154B     		ldr	r3, .L95+12
 968 006e 1B68     		ldr	r3, [r3]
 969 0070 9C42     		cmp	r4, r3
 970 0072 0CD0     		beq	.L94
 971              	.L81:
 972 0074 38BD     		pop	{r3, r4, r5, pc}
 973              	.LVL87:
 974              	.L92:
1114:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 975              		.loc 1 1114 0 discriminator 1
 976 0076 134B     		ldr	r3, .L95+12
 977 0078 1C68     		ldr	r4, [r3]
 978              	.LVL88:
 979 007a C7E7     		b	.L82
 980              	.LVL89:
 981              	.L93:
1149:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 982              		.loc 1 1149 0
 983 007c 2946     		mov	r1, r5
 984 007e 1448     		ldr	r0, .L95+24
 985 0080 FFF7FEFF 		bl	vListInsertEnd
 986              	.LVL90:
1154:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 987              		.loc 1 1154 0
 988 0084 134A     		ldr	r2, .L95+28
 989 0086 1368     		ldr	r3, [r2]
 990 0088 0133     		adds	r3, r3, #1
 991 008a 1360     		str	r3, [r2]
 992 008c E9E7     		b	.L86
 993              	.L94:
1183:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 994              		.loc 1 1183 0
 995 008e 124B     		ldr	r3, .L95+32
 996 0090 1B68     		ldr	r3, [r3]
 997 0092 43B1     		cbz	r3, .L88
 998              	.LBB102:
 999              	.LBB103:
 1000              		.loc 2 195 0
 1001              		.syntax unified
 1002              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1003 0094 4FF01003 			mov r3, #16												
 1004 0098 83F31188 		msr basepri, r3											
 1005 009c BFF36F8F 		isb														
 1006 00a0 BFF34F8F 		dsb														
 1007              	
 1008              	@ 0 "" 2
 1009              	.LVL91:
 1010              		.thumb
 1011              		.syntax unified
 1012              	.L89:
 1013 00a4 FEE7     		b	.L89
 1014              	.L88:
ARM GAS  /tmp/cc60zarx.s 			page 111


 1015              	.LBE103:
 1016              	.LBE102:
1184:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1017              		.loc 1 1184 0
 1018 00a6 4FF08052 		mov	r2, #268435456
 1019 00aa 0C4B     		ldr	r3, .L95+36
 1020 00ac 1A60     		str	r2, [r3]
 1021              		.syntax unified
 1022              	@ 1184 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1023 00ae BFF34F8F 		dsb
 1024              	@ 0 "" 2
 1025              	@ 1184 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1026 00b2 BFF36F8F 		isb
 1027              	@ 0 "" 2
1191:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1028              		.loc 1 1191 0
 1029              		.thumb
 1030              		.syntax unified
 1031 00b6 DDE7     		b	.L81
 1032              	.L96:
 1033              		.align	2
 1034              	.L95:
 1035 00b8 00000000 		.word	.LANCHOR4
 1036 00bc 00000000 		.word	.LANCHOR13
 1037 00c0 00000000 		.word	.LANCHOR12
 1038 00c4 00000000 		.word	.LANCHOR10
 1039 00c8 00000000 		.word	.LANCHOR9
 1040 00cc 00000000 		.word	.LANCHOR11
 1041 00d0 00000000 		.word	.LANCHOR7
 1042 00d4 00000000 		.word	.LANCHOR14
 1043 00d8 00000000 		.word	.LANCHOR16
 1044 00dc 04ED00E0 		.word	-536810236
 1045              		.cfi_endproc
 1046              	.LFE8:
 1048              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 1049              		.align	1
 1050              		.global	uxTaskPriorityGet
 1051              		.syntax unified
 1052              		.thumb
 1053              		.thumb_func
 1054              		.fpu fpv4-sp-d16
 1056              	uxTaskPriorityGet:
 1057              	.LFB10:
1399:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 1058              		.loc 1 1399 0
 1059              		.cfi_startproc
 1060              		@ args = 0, pretend = 0, frame = 0
 1061              		@ frame_needed = 0, uses_anonymous_args = 0
 1062              	.LVL92:
 1063 0000 10B5     		push	{r4, lr}
 1064              	.LCFI13:
 1065              		.cfi_def_cfa_offset 8
 1066              		.cfi_offset 4, -8
 1067              		.cfi_offset 14, -4
 1068 0002 0446     		mov	r4, r0
1403:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1069              		.loc 1 1403 0
ARM GAS  /tmp/cc60zarx.s 			page 112


 1070 0004 FFF7FEFF 		bl	vPortEnterCritical
 1071              	.LVL93:
1407:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1072              		.loc 1 1407 0
 1073 0008 24B1     		cbz	r4, .L101
 1074              	.LVL94:
 1075              	.L98:
1408:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1076              		.loc 1 1408 0 discriminator 4
 1077 000a E46A     		ldr	r4, [r4, #44]
 1078              	.LVL95:
1410:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1079              		.loc 1 1410 0 discriminator 4
 1080 000c FFF7FEFF 		bl	vPortExitCritical
 1081              	.LVL96:
1413:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1082              		.loc 1 1413 0 discriminator 4
 1083 0010 2046     		mov	r0, r4
 1084 0012 10BD     		pop	{r4, pc}
 1085              	.LVL97:
 1086              	.L101:
1407:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1087              		.loc 1 1407 0 discriminator 1
 1088 0014 014B     		ldr	r3, .L102
 1089 0016 1C68     		ldr	r4, [r3]
 1090              	.LVL98:
 1091 0018 F7E7     		b	.L98
 1092              	.L103:
 1093 001a 00BF     		.align	2
 1094              	.L102:
 1095 001c 00000000 		.word	.LANCHOR10
 1096              		.cfi_endproc
 1097              	.LFE10:
 1099              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 1100              		.align	1
 1101              		.global	uxTaskPriorityGetFromISR
 1102              		.syntax unified
 1103              		.thumb
 1104              		.thumb_func
 1105              		.fpu fpv4-sp-d16
 1107              	uxTaskPriorityGetFromISR:
 1108              	.LFB11:
1421:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 1109              		.loc 1 1421 0
 1110              		.cfi_startproc
 1111              		@ args = 0, pretend = 0, frame = 0
 1112              		@ frame_needed = 0, uses_anonymous_args = 0
 1113              	.LVL99:
 1114 0000 10B5     		push	{r4, lr}
 1115              	.LCFI14:
 1116              		.cfi_def_cfa_offset 8
 1117              		.cfi_offset 4, -8
 1118              		.cfi_offset 14, -4
 1119 0002 0446     		mov	r4, r0
1441:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1120              		.loc 1 1441 0
 1121 0004 FFF7FEFF 		bl	vPortValidateInterruptPriority
ARM GAS  /tmp/cc60zarx.s 			page 113


 1122              	.LVL100:
 1123              	.LBB104:
 1124              	.LBB105:
 196:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 197:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %0, %1												\n"	\
 198:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %0											\n" \
 199:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 200:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 201:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 202:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 203:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 204:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 205:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 206:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 207:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 208:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 209:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 210:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 211:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 1125              		.loc 2 211 0
 1126              		.syntax unified
 1127              	@ 211 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1128 0008 EFF31183 			mrs r3, basepri											
 1129 000c 4FF01002 		mov r2, #16												
 1130 0010 82F31188 		msr basepri, r2											
 1131 0014 BFF36F8F 		isb														
 1132 0018 BFF34F8F 		dsb														
 1133              	
 1134              	@ 0 "" 2
 1135              		.thumb
 1136              		.syntax unified
 1137              	.LBE105:
 1138              	.LBE104:
1447:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1139              		.loc 1 1447 0
 1140 001c 1CB1     		cbz	r4, .L108
 1141              	.LVL101:
 1142              	.L105:
1448:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1143              		.loc 1 1448 0 discriminator 4
 1144 001e E06A     		ldr	r0, [r4, #44]
 1145              	.LVL102:
 1146              	.LBB106:
 1147              	.LBB107:
 212:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 213:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mrs %0, basepri											\n" \
 214:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %1, %2												\n"	\
 215:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %1											\n" \
 216:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 217:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 218:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "
 219:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 220:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 221:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 222:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	warnings. */
 223:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return ulOriginalBASEPRI;
 224:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
ARM GAS  /tmp/cc60zarx.s 			page 114


 225:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 226:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 227:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 228:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 229:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 1148              		.loc 2 229 0 discriminator 4
 1149              		.syntax unified
 1150              	@ 229 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1151 0020 83F31188 			msr basepri, r3	
 1152              	@ 0 "" 2
 1153              	.LVL103:
 1154              		.thumb
 1155              		.syntax unified
 1156              	.LBE107:
 1157              	.LBE106:
1453:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1158              		.loc 1 1453 0 discriminator 4
 1159 0024 10BD     		pop	{r4, pc}
 1160              	.LVL104:
 1161              	.L108:
1447:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1162              		.loc 1 1447 0 discriminator 1
 1163 0026 014A     		ldr	r2, .L109
 1164 0028 1468     		ldr	r4, [r2]
 1165              	.LVL105:
 1166 002a F8E7     		b	.L105
 1167              	.L110:
 1168              		.align	2
 1169              	.L109:
 1170 002c 00000000 		.word	.LANCHOR10
 1171              		.cfi_endproc
 1172              	.LFE11:
 1174              		.section	.text.vTaskPrioritySet,"ax",%progbits
 1175              		.align	1
 1176              		.global	vTaskPrioritySet
 1177              		.syntax unified
 1178              		.thumb
 1179              		.thumb_func
 1180              		.fpu fpv4-sp-d16
 1182              	vTaskPrioritySet:
 1183              	.LFB12:
1461:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 1184              		.loc 1 1461 0
 1185              		.cfi_startproc
 1186              		@ args = 0, pretend = 0, frame = 0
 1187              		@ frame_needed = 0, uses_anonymous_args = 0
 1188              	.LVL106:
 1189 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1190              	.LCFI15:
 1191              		.cfi_def_cfa_offset 24
 1192              		.cfi_offset 3, -24
 1193              		.cfi_offset 4, -20
 1194              		.cfi_offset 5, -16
 1195              		.cfi_offset 6, -12
 1196              		.cfi_offset 7, -8
 1197              		.cfi_offset 14, -4
 1198              	.LVL107:
ARM GAS  /tmp/cc60zarx.s 			page 115


1466:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1199              		.loc 1 1466 0
 1200 0002 0629     		cmp	r1, #6
 1201 0004 08D9     		bls	.L112
 1202              	.LBB108:
 1203              	.LBB109:
 195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1204              		.loc 2 195 0
 1205              		.syntax unified
 1206              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1207 0006 4FF01003 			mov r3, #16												
 1208 000a 83F31188 		msr basepri, r3											
 1209 000e BFF36F8F 		isb														
 1210 0012 BFF34F8F 		dsb														
 1211              	
 1212              	@ 0 "" 2
 1213              	.LVL108:
 1214              		.thumb
 1215              		.syntax unified
 1216              	.L113:
 1217 0016 FEE7     		b	.L113
 1218              	.L112:
 1219 0018 0D46     		mov	r5, r1
 1220 001a 0446     		mov	r4, r0
 1221              	.LVL109:
 1222              	.LBE109:
 1223              	.LBE108:
1478:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1224              		.loc 1 1478 0
 1225 001c FFF7FEFF 		bl	vPortEnterCritical
 1226              	.LVL110:
1482:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1227              		.loc 1 1482 0
 1228 0020 0CB9     		cbnz	r4, .L114
1482:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1229              		.loc 1 1482 0 is_stmt 0 discriminator 1
 1230 0022 2D4B     		ldr	r3, .L129
 1231 0024 1C68     		ldr	r4, [r3]
 1232              	.LVL111:
 1233              	.L114:
1488:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1234              		.loc 1 1488 0 is_stmt 1 discriminator 4
 1235 0026 636C     		ldr	r3, [r4, #68]
 1236              	.LVL112:
1496:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1237              		.loc 1 1496 0 discriminator 4
 1238 0028 9D42     		cmp	r5, r3
 1239 002a 44D0     		beq	.L115
1500:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1240              		.loc 1 1500 0
 1241 002c 46D9     		bls	.L116
1502:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1242              		.loc 1 1502 0
 1243 002e 2A4A     		ldr	r2, .L129
 1244 0030 1268     		ldr	r2, [r2]
 1245 0032 9442     		cmp	r4, r2
 1246 0034 48D0     		beq	.L124
ARM GAS  /tmp/cc60zarx.s 			page 116


1507:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
 1247              		.loc 1 1507 0
 1248 0036 284A     		ldr	r2, .L129
 1249 0038 1268     		ldr	r2, [r2]
 1250 003a D26A     		ldr	r2, [r2, #44]
 1251 003c 9542     		cmp	r5, r2
 1252 003e 45D2     		bcs	.L125
1464:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1253              		.loc 1 1464 0
 1254 0040 0026     		movs	r6, #0
 1255              	.L117:
 1256              	.LVL113:
1540:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1257              		.loc 1 1540 0
 1258 0042 E76A     		ldr	r7, [r4, #44]
 1259              	.LVL114:
1546:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1260              		.loc 1 1546 0
 1261 0044 BB42     		cmp	r3, r7
 1262 0046 00D1     		bne	.L118
1548:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1263              		.loc 1 1548 0
 1264 0048 E562     		str	r5, [r4, #44]
 1265              	.L118:
1556:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1266              		.loc 1 1556 0
 1267 004a 6564     		str	r5, [r4, #68]
1566:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1268              		.loc 1 1566 0
 1269 004c A369     		ldr	r3, [r4, #24]
 1270              	.LVL115:
 1271 004e 002B     		cmp	r3, #0
 1272 0050 02DB     		blt	.L119
1568:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1273              		.loc 1 1568 0
 1274 0052 C5F10705 		rsb	r5, r5, #7
 1275              	.LVL116:
 1276 0056 A561     		str	r5, [r4, #24]
 1277              	.L119:
1579:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1278              		.loc 1 1579 0
 1279 0058 6169     		ldr	r1, [r4, #20]
 1280 005a 07EB8703 		add	r3, r7, r7, lsl #2
 1281 005e 9A00     		lsls	r2, r3, #2
 1282 0060 1E4B     		ldr	r3, .L129+4
 1283 0062 1344     		add	r3, r3, r2
 1284 0064 9942     		cmp	r1, r3
 1285 0066 35D1     		bne	.L127
 1286 0068 0123     		movs	r3, #1
 1287              	.L120:
1579:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1288              		.loc 1 1579 0 is_stmt 0 discriminator 4
 1289 006a DBB1     		cbz	r3, .L121
1584:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1290              		.loc 1 1584 0 is_stmt 1
 1291 006c 251D     		adds	r5, r4, #4
 1292 006e 2846     		mov	r0, r5
ARM GAS  /tmp/cc60zarx.s 			page 117


 1293 0070 FFF7FEFF 		bl	uxListRemove
 1294              	.LVL117:
 1295 0074 38B9     		cbnz	r0, .L122
1589:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1296              		.loc 1 1589 0
 1297 0076 0123     		movs	r3, #1
 1298 0078 03FA07F7 		lsl	r7, r3, r7
 1299              	.LVL118:
 1300 007c 184A     		ldr	r2, .L129+8
 1301 007e 1368     		ldr	r3, [r2]
 1302 0080 23EA0703 		bic	r3, r3, r7
 1303 0084 1360     		str	r3, [r2]
 1304              	.L122:
1595:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1305              		.loc 1 1595 0
 1306 0086 E36A     		ldr	r3, [r4, #44]
 1307 0088 0122     		movs	r2, #1
 1308 008a 9A40     		lsls	r2, r2, r3
 1309 008c 1449     		ldr	r1, .L129+8
 1310 008e 0868     		ldr	r0, [r1]
 1311 0090 0243     		orrs	r2, r2, r0
 1312 0092 0A60     		str	r2, [r1]
 1313 0094 03EB8303 		add	r3, r3, r3, lsl #2
 1314 0098 9A00     		lsls	r2, r3, #2
 1315 009a 2946     		mov	r1, r5
 1316 009c 0F48     		ldr	r0, .L129+4
 1317 009e 1044     		add	r0, r0, r2
 1318 00a0 FFF7FEFF 		bl	vListInsertEnd
 1319              	.LVL119:
 1320              	.L121:
1602:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1321              		.loc 1 1602 0
 1322 00a4 3EB1     		cbz	r6, .L115
1604:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1323              		.loc 1 1604 0
 1324 00a6 4FF08052 		mov	r2, #268435456
 1325 00aa 0E4B     		ldr	r3, .L129+12
 1326 00ac 1A60     		str	r2, [r3]
 1327              		.syntax unified
 1328              	@ 1604 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1329 00ae BFF34F8F 		dsb
 1330              	@ 0 "" 2
 1331              	@ 1604 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1332 00b2 BFF36F8F 		isb
 1333              	@ 0 "" 2
 1334              	.LVL120:
 1335              		.thumb
 1336              		.syntax unified
 1337              	.L115:
1616:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1338              		.loc 1 1616 0
 1339 00b6 FFF7FEFF 		bl	vPortExitCritical
 1340              	.LVL121:
 1341 00ba F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1342              	.LVL122:
 1343              	.L116:
1523:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  /tmp/cc60zarx.s 			page 118


 1344              		.loc 1 1523 0
 1345 00bc 064A     		ldr	r2, .L129
 1346 00be 1268     		ldr	r2, [r2]
 1347 00c0 9442     		cmp	r4, r2
 1348 00c2 05D0     		beq	.L126
1464:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1349              		.loc 1 1464 0
 1350 00c4 0026     		movs	r6, #0
 1351 00c6 BCE7     		b	.L117
 1352              	.L124:
 1353 00c8 0026     		movs	r6, #0
 1354 00ca BAE7     		b	.L117
 1355              	.L125:
1509:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
 1356              		.loc 1 1509 0
 1357 00cc 0126     		movs	r6, #1
 1358 00ce B8E7     		b	.L117
 1359              	.L126:
1528:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1360              		.loc 1 1528 0
 1361 00d0 0126     		movs	r6, #1
 1362 00d2 B6E7     		b	.L117
 1363              	.LVL123:
 1364              	.L127:
1579:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1365              		.loc 1 1579 0
 1366 00d4 0023     		movs	r3, #0
 1367 00d6 C8E7     		b	.L120
 1368              	.L130:
 1369              		.align	2
 1370              	.L129:
 1371 00d8 00000000 		.word	.LANCHOR10
 1372 00dc 00000000 		.word	.LANCHOR4
 1373 00e0 00000000 		.word	.LANCHOR13
 1374 00e4 04ED00E0 		.word	-536810236
 1375              		.cfi_endproc
 1376              	.LFE12:
 1378              		.section	.text.vTaskResume,"ax",%progbits
 1379              		.align	1
 1380              		.global	vTaskResume
 1381              		.syntax unified
 1382              		.thumb
 1383              		.thumb_func
 1384              		.fpu fpv4-sp-d16
 1386              	vTaskResume:
 1387              	.LFB15:
1772:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1388              		.loc 1 1772 0
 1389              		.cfi_startproc
 1390              		@ args = 0, pretend = 0, frame = 0
 1391              		@ frame_needed = 0, uses_anonymous_args = 0
 1392              	.LVL124:
 1393 0000 38B5     		push	{r3, r4, r5, lr}
 1394              	.LCFI16:
 1395              		.cfi_def_cfa_offset 16
 1396              		.cfi_offset 3, -16
 1397              		.cfi_offset 4, -12
ARM GAS  /tmp/cc60zarx.s 			page 119


 1398              		.cfi_offset 5, -8
 1399              		.cfi_offset 14, -4
 1400              	.LVL125:
1776:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1401              		.loc 1 1776 0
 1402 0002 68B1     		cbz	r0, .L137
 1403 0004 0446     		mov	r4, r0
1780:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1404              		.loc 1 1780 0 discriminator 1
 1405 0006 1C4B     		ldr	r3, .L139
 1406 0008 1B68     		ldr	r3, [r3]
 1407 000a 9842     		cmp	r0, r3
 1408 000c 07D0     		beq	.L131
1782:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1409              		.loc 1 1782 0
 1410 000e FFF7FEFF 		bl	vPortEnterCritical
 1411              	.LVL126:
1784:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1412              		.loc 1 1784 0
 1413 0012 2046     		mov	r0, r4
 1414 0014 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1415              	.LVL127:
 1416 0018 58B9     		cbnz	r0, .L138
 1417              	.L135:
1811:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1418              		.loc 1 1811 0
 1419 001a FFF7FEFF 		bl	vPortExitCritical
 1420              	.LVL128:
 1421              	.L131:
 1422 001e 38BD     		pop	{r3, r4, r5, pc}
 1423              	.LVL129:
 1424              	.L137:
 1425              	.LBB110:
 1426              	.LBB111:
 195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1427              		.loc 2 195 0
 1428              		.syntax unified
 1429              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1430 0020 4FF01003 			mov r3, #16												
 1431 0024 83F31188 		msr basepri, r3											
 1432 0028 BFF36F8F 		isb														
 1433 002c BFF34F8F 		dsb														
 1434              	
 1435              	@ 0 "" 2
 1436              	.LVL130:
 1437              		.thumb
 1438              		.syntax unified
 1439              	.L133:
 1440 0030 FEE7     		b	.L133
 1441              	.LVL131:
 1442              	.L138:
 1443              	.LBE111:
 1444              	.LBE110:
1790:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1445              		.loc 1 1790 0
 1446 0032 251D     		adds	r5, r4, #4
 1447 0034 2846     		mov	r0, r5
ARM GAS  /tmp/cc60zarx.s 			page 120


 1448 0036 FFF7FEFF 		bl	uxListRemove
 1449              	.LVL132:
1791:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1450              		.loc 1 1791 0
 1451 003a E36A     		ldr	r3, [r4, #44]
 1452 003c 0122     		movs	r2, #1
 1453 003e 9A40     		lsls	r2, r2, r3
 1454 0040 0E49     		ldr	r1, .L139+4
 1455 0042 0868     		ldr	r0, [r1]
 1456 0044 0243     		orrs	r2, r2, r0
 1457 0046 0A60     		str	r2, [r1]
 1458 0048 03EB8303 		add	r3, r3, r3, lsl #2
 1459 004c 9A00     		lsls	r2, r3, #2
 1460 004e 2946     		mov	r1, r5
 1461 0050 0B48     		ldr	r0, .L139+8
 1462 0052 1044     		add	r0, r0, r2
 1463 0054 FFF7FEFF 		bl	vListInsertEnd
 1464              	.LVL133:
1794:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1465              		.loc 1 1794 0
 1466 0058 E26A     		ldr	r2, [r4, #44]
 1467 005a 074B     		ldr	r3, .L139
 1468 005c 1B68     		ldr	r3, [r3]
 1469 005e DB6A     		ldr	r3, [r3, #44]
 1470 0060 9A42     		cmp	r2, r3
 1471 0062 DAD3     		bcc	.L135
1799:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1472              		.loc 1 1799 0
 1473 0064 4FF08052 		mov	r2, #268435456
 1474 0068 064B     		ldr	r3, .L139+12
 1475 006a 1A60     		str	r2, [r3]
 1476              		.syntax unified
 1477              	@ 1799 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1478 006c BFF34F8F 		dsb
 1479              	@ 0 "" 2
 1480              	@ 1799 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1481 0070 BFF36F8F 		isb
 1482              	@ 0 "" 2
 1483              		.thumb
 1484              		.syntax unified
 1485 0074 D1E7     		b	.L135
 1486              	.L140:
 1487 0076 00BF     		.align	2
 1488              	.L139:
 1489 0078 00000000 		.word	.LANCHOR10
 1490 007c 00000000 		.word	.LANCHOR13
 1491 0080 00000000 		.word	.LANCHOR4
 1492 0084 04ED00E0 		.word	-536810236
 1493              		.cfi_endproc
 1494              	.LFE15:
 1496              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 1497              		.align	1
 1498              		.global	xTaskResumeFromISR
 1499              		.syntax unified
 1500              		.thumb
 1501              		.thumb_func
 1502              		.fpu fpv4-sp-d16
ARM GAS  /tmp/cc60zarx.s 			page 121


 1504              	xTaskResumeFromISR:
 1505              	.LFB16:
1826:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1506              		.loc 1 1826 0
 1507              		.cfi_startproc
 1508              		@ args = 0, pretend = 0, frame = 0
 1509              		@ frame_needed = 0, uses_anonymous_args = 0
 1510              	.LVL134:
 1511 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1512              	.LCFI17:
 1513              		.cfi_def_cfa_offset 24
 1514              		.cfi_offset 3, -24
 1515              		.cfi_offset 4, -20
 1516              		.cfi_offset 5, -16
 1517              		.cfi_offset 6, -12
 1518              		.cfi_offset 7, -8
 1519              		.cfi_offset 14, -4
 1520              	.LVL135:
1831:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1521              		.loc 1 1831 0
 1522 0002 0028     		cmp	r0, #0
 1523 0004 32D0     		beq	.L150
 1524 0006 0446     		mov	r4, r0
1849:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1525              		.loc 1 1849 0
 1526 0008 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1527              	.LVL136:
 1528              	.LBB112:
 1529              	.LBB113:
 211:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1530              		.loc 2 211 0
 1531              		.syntax unified
 1532              	@ 211 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1533 000c EFF31187 			mrs r7, basepri											
 1534 0010 4FF01003 		mov r3, #16												
 1535 0014 83F31188 		msr basepri, r3											
 1536 0018 BFF36F8F 		isb														
 1537 001c BFF34F8F 		dsb														
 1538              	
 1539              	@ 0 "" 2
 1540              		.thumb
 1541              		.syntax unified
 1542              	.LBE113:
 1543              	.LBE112:
1853:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1544              		.loc 1 1853 0
 1545 0020 2046     		mov	r0, r4
 1546 0022 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1547              	.LVL137:
 1548 0026 0028     		cmp	r0, #0
 1549 0028 32D0     		beq	.L147
1858:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1550              		.loc 1 1858 0
 1551 002a 1A4B     		ldr	r3, .L152
 1552 002c 1B68     		ldr	r3, [r3]
 1553 002e 43BB     		cbnz	r3, .L145
1862:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
ARM GAS  /tmp/cc60zarx.s 			page 122


 1554              		.loc 1 1862 0
 1555 0030 E26A     		ldr	r2, [r4, #44]
 1556 0032 194B     		ldr	r3, .L152+4
 1557 0034 1B68     		ldr	r3, [r3]
 1558 0036 DB6A     		ldr	r3, [r3, #44]
 1559 0038 9A42     		cmp	r2, r3
 1560 003a 20D3     		bcc	.L151
1864:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1561              		.loc 1 1864 0
 1562 003c 0125     		movs	r5, #1
 1563              	.L146:
 1564              	.LVL138:
1871:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1565              		.loc 1 1871 0
 1566 003e 261D     		adds	r6, r4, #4
 1567 0040 3046     		mov	r0, r6
 1568 0042 FFF7FEFF 		bl	uxListRemove
 1569              	.LVL139:
1872:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1570              		.loc 1 1872 0
 1571 0046 E36A     		ldr	r3, [r4, #44]
 1572 0048 0122     		movs	r2, #1
 1573 004a 9A40     		lsls	r2, r2, r3
 1574 004c 1349     		ldr	r1, .L152+8
 1575 004e 0868     		ldr	r0, [r1]
 1576 0050 0243     		orrs	r2, r2, r0
 1577 0052 0A60     		str	r2, [r1]
 1578 0054 03EB8303 		add	r3, r3, r3, lsl #2
 1579 0058 9A00     		lsls	r2, r3, #2
 1580 005a 3146     		mov	r1, r6
 1581 005c 1048     		ldr	r0, .L152+12
 1582 005e 1044     		add	r0, r0, r2
 1583 0060 FFF7FEFF 		bl	vListInsertEnd
 1584              	.LVL140:
 1585              	.L144:
 1586              	.LBB114:
 1587              	.LBB115:
 1588              		.loc 2 229 0
 1589              		.syntax unified
 1590              	@ 229 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1591 0064 87F31188 			msr basepri, r7	
 1592              	@ 0 "" 2
 1593              	.LVL141:
 1594              		.thumb
 1595              		.syntax unified
 1596              	.LBE115:
 1597              	.LBE114:
1890:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1598              		.loc 1 1890 0
 1599 0068 2846     		mov	r0, r5
 1600 006a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1601              	.LVL142:
 1602              	.L150:
 1603              	.LBB116:
 1604              	.LBB117:
 195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1605              		.loc 2 195 0
ARM GAS  /tmp/cc60zarx.s 			page 123


 1606              		.syntax unified
 1607              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1608 006c 4FF01003 			mov r3, #16												
 1609 0070 83F31188 		msr basepri, r3											
 1610 0074 BFF36F8F 		isb														
 1611 0078 BFF34F8F 		dsb														
 1612              	
 1613              	@ 0 "" 2
 1614              	.LVL143:
 1615              		.thumb
 1616              		.syntax unified
 1617              	.L143:
 1618 007c FEE7     		b	.L143
 1619              	.LVL144:
 1620              	.L151:
 1621              	.LBE117:
 1622              	.LBE116:
1827:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1623              		.loc 1 1827 0
 1624 007e 0025     		movs	r5, #0
 1625 0080 DDE7     		b	.L146
 1626              	.L145:
1879:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1627              		.loc 1 1879 0
 1628 0082 04F11801 		add	r1, r4, #24
 1629 0086 0748     		ldr	r0, .L152+16
 1630 0088 FFF7FEFF 		bl	vListInsertEnd
 1631              	.LVL145:
1827:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1632              		.loc 1 1827 0
 1633 008c 0025     		movs	r5, #0
 1634 008e E9E7     		b	.L144
 1635              	.L147:
 1636 0090 0025     		movs	r5, #0
 1637 0092 E7E7     		b	.L144
 1638              	.L153:
 1639              		.align	2
 1640              	.L152:
 1641 0094 00000000 		.word	.LANCHOR16
 1642 0098 00000000 		.word	.LANCHOR10
 1643 009c 00000000 		.word	.LANCHOR13
 1644 00a0 00000000 		.word	.LANCHOR4
 1645 00a4 00000000 		.word	.LANCHOR1
 1646              		.cfi_endproc
 1647              	.LFE16:
 1649              		.section	.text.vTaskStartScheduler,"ax",%progbits
 1650              		.align	1
 1651              		.global	vTaskStartScheduler
 1652              		.syntax unified
 1653              		.thumb
 1654              		.thumb_func
 1655              		.fpu fpv4-sp-d16
 1657              	vTaskStartScheduler:
 1658              	.LFB17:
1896:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
 1659              		.loc 1 1896 0
 1660              		.cfi_startproc
ARM GAS  /tmp/cc60zarx.s 			page 124


 1661              		@ args = 0, pretend = 0, frame = 0
 1662              		@ frame_needed = 0, uses_anonymous_args = 0
 1663 0000 00B5     		push	{lr}
 1664              	.LCFI18:
 1665              		.cfi_def_cfa_offset 4
 1666              		.cfi_offset 14, -4
 1667 0002 83B0     		sub	sp, sp, #12
 1668              	.LCFI19:
 1669              		.cfi_def_cfa_offset 16
1929:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								configIDLE_TASK_NAME,
 1670              		.loc 1 1929 0
 1671 0004 194B     		ldr	r3, .L163
 1672 0006 0193     		str	r3, [sp, #4]
 1673 0008 0023     		movs	r3, #0
 1674 000a 0093     		str	r3, [sp]
 1675 000c 8022     		movs	r2, #128
 1676 000e 1849     		ldr	r1, .L163+4
 1677 0010 1848     		ldr	r0, .L163+8
 1678 0012 FFF7FEFF 		bl	xTaskCreate
 1679              	.LVL146:
1940:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1680              		.loc 1 1940 0
 1681 0016 0128     		cmp	r0, #1
 1682 0018 07D0     		beq	.L160
 1683              	.L155:
1951:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1684              		.loc 1 1951 0
 1685 001a 0128     		cmp	r0, #1
 1686 001c 08D0     		beq	.L161
2006:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1687              		.loc 1 2006 0
 1688 001e B0F1FF3F 		cmp	r0, #-1
 1689 0022 1AD0     		beq	.L162
 1690              	.LVL147:
 1691              	.L154:
2012:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 1692              		.loc 1 2012 0
 1693 0024 03B0     		add	sp, sp, #12
 1694              	.LCFI20:
 1695              		.cfi_remember_state
 1696              		.cfi_def_cfa_offset 4
 1697              		@ sp needed
 1698 0026 5DF804FB 		ldr	pc, [sp], #4
 1699              	.LVL148:
 1700              	.L160:
 1701              	.LCFI21:
 1702              		.cfi_restore_state
1942:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1703              		.loc 1 1942 0
 1704 002a FFF7FEFF 		bl	xTimerCreateTimerTask
 1705              	.LVL149:
 1706 002e F4E7     		b	.L155
 1707              	.L161:
 1708              	.LBB118:
 1709              	.LBB119:
 195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1710              		.loc 2 195 0
ARM GAS  /tmp/cc60zarx.s 			page 125


 1711              		.syntax unified
 1712              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1713 0030 4FF01003 			mov r3, #16												
 1714 0034 83F31188 		msr basepri, r3											
 1715 0038 BFF36F8F 		isb														
 1716 003c BFF34F8F 		dsb														
 1717              	
 1718              	@ 0 "" 2
 1719              		.thumb
 1720              		.syntax unified
 1721              	.LBE119:
 1722              	.LBE118:
1977:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
 1723              		.loc 1 1977 0
 1724 0040 4FF0FF32 		mov	r2, #-1
 1725 0044 0C4B     		ldr	r3, .L163+12
 1726 0046 1A60     		str	r2, [r3]
1978:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = ( TickType_t ) 0U;
 1727              		.loc 1 1978 0
 1728 0048 0122     		movs	r2, #1
 1729 004a 0C4B     		ldr	r3, .L163+16
 1730 004c 1A60     		str	r2, [r3]
1979:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1731              		.loc 1 1979 0
 1732 004e 0022     		movs	r2, #0
 1733 0050 0B4B     		ldr	r3, .L163+20
 1734 0052 1A60     		str	r2, [r3]
1991:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1735              		.loc 1 1991 0
 1736 0054 FFF7FEFF 		bl	xPortStartScheduler
 1737              	.LVL150:
 1738 0058 E4E7     		b	.L154
 1739              	.LVL151:
 1740              	.L162:
 1741              	.LBB120:
 1742              	.LBB121:
 195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1743              		.loc 2 195 0
 1744              		.syntax unified
 1745              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1746 005a 4FF01003 			mov r3, #16												
 1747 005e 83F31188 		msr basepri, r3											
 1748 0062 BFF36F8F 		isb														
 1749 0066 BFF34F8F 		dsb														
 1750              	
 1751              	@ 0 "" 2
 1752              	.LVL152:
 1753              		.thumb
 1754              		.syntax unified
 1755              	.L158:
 1756 006a FEE7     		b	.L158
 1757              	.L164:
 1758              		.align	2
 1759              	.L163:
 1760 006c 00000000 		.word	.LANCHOR17
 1761 0070 00000000 		.word	.LC0
 1762 0074 00000000 		.word	prvIdleTask
ARM GAS  /tmp/cc60zarx.s 			page 126


 1763 0078 00000000 		.word	.LANCHOR3
 1764 007c 00000000 		.word	.LANCHOR11
 1765 0080 00000000 		.word	.LANCHOR15
 1766              	.LBE121:
 1767              	.LBE120:
 1768              		.cfi_endproc
 1769              	.LFE17:
 1771              		.section	.text.vTaskEndScheduler,"ax",%progbits
 1772              		.align	1
 1773              		.global	vTaskEndScheduler
 1774              		.syntax unified
 1775              		.thumb
 1776              		.thumb_func
 1777              		.fpu fpv4-sp-d16
 1779              	vTaskEndScheduler:
 1780              	.LFB18:
2016:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
 1781              		.loc 1 2016 0
 1782              		.cfi_startproc
 1783              		@ args = 0, pretend = 0, frame = 0
 1784              		@ frame_needed = 0, uses_anonymous_args = 0
 1785 0000 08B5     		push	{r3, lr}
 1786              	.LCFI22:
 1787              		.cfi_def_cfa_offset 8
 1788              		.cfi_offset 3, -8
 1789              		.cfi_offset 14, -4
 1790              	.LBB122:
 1791              	.LBB123:
 195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1792              		.loc 2 195 0
 1793              		.syntax unified
 1794              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1795 0002 4FF01003 			mov r3, #16												
 1796 0006 83F31188 		msr basepri, r3											
 1797 000a BFF36F8F 		isb														
 1798 000e BFF34F8F 		dsb														
 1799              	
 1800              	@ 0 "" 2
 1801              		.thumb
 1802              		.syntax unified
 1803              	.LBE123:
 1804              	.LBE122:
2021:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
 1805              		.loc 1 2021 0
 1806 0012 0022     		movs	r2, #0
 1807 0014 024B     		ldr	r3, .L167
 1808 0016 1A60     		str	r2, [r3]
2022:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 1809              		.loc 1 2022 0
 1810 0018 FFF7FEFF 		bl	vPortEndScheduler
 1811              	.LVL153:
 1812 001c 08BD     		pop	{r3, pc}
 1813              	.L168:
 1814 001e 00BF     		.align	2
 1815              	.L167:
 1816 0020 00000000 		.word	.LANCHOR11
 1817              		.cfi_endproc
ARM GAS  /tmp/cc60zarx.s 			page 127


 1818              	.LFE18:
 1820              		.section	.text.vTaskSuspendAll,"ax",%progbits
 1821              		.align	1
 1822              		.global	vTaskSuspendAll
 1823              		.syntax unified
 1824              		.thumb
 1825              		.thumb_func
 1826              		.fpu fpv4-sp-d16
 1828              	vTaskSuspendAll:
 1829              	.LFB19:
2027:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
 1830              		.loc 1 2027 0
 1831              		.cfi_startproc
 1832              		@ args = 0, pretend = 0, frame = 0
 1833              		@ frame_needed = 0, uses_anonymous_args = 0
 1834              		@ link register save eliminated.
2032:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 1835              		.loc 1 2032 0
 1836 0000 024A     		ldr	r2, .L170
 1837 0002 1368     		ldr	r3, [r2]
 1838 0004 0133     		adds	r3, r3, #1
 1839 0006 1360     		str	r3, [r2]
 1840 0008 7047     		bx	lr
 1841              	.L171:
 1842 000a 00BF     		.align	2
 1843              	.L170:
 1844 000c 00000000 		.word	.LANCHOR16
 1845              		.cfi_endproc
 1846              	.LFE19:
 1848              		.section	.text.xTaskGetTickCount,"ax",%progbits
 1849              		.align	1
 1850              		.global	xTaskGetTickCount
 1851              		.syntax unified
 1852              		.thumb
 1853              		.thumb_func
 1854              		.fpu fpv4-sp-d16
 1856              	xTaskGetTickCount:
 1857              	.LFB21:
2210:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTicks;
 1858              		.loc 1 2210 0
 1859              		.cfi_startproc
 1860              		@ args = 0, pretend = 0, frame = 0
 1861              		@ frame_needed = 0, uses_anonymous_args = 0
 1862              		@ link register save eliminated.
2216:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1863              		.loc 1 2216 0
 1864 0000 014B     		ldr	r3, .L173
 1865 0002 1868     		ldr	r0, [r3]
 1866              	.LVL154:
2221:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 1867              		.loc 1 2221 0
 1868 0004 7047     		bx	lr
 1869              	.L174:
 1870 0006 00BF     		.align	2
 1871              	.L173:
 1872 0008 00000000 		.word	.LANCHOR15
 1873              		.cfi_endproc
ARM GAS  /tmp/cc60zarx.s 			page 128


 1874              	.LFE21:
 1876              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 1877              		.align	1
 1878              		.global	xTaskGetTickCountFromISR
 1879              		.syntax unified
 1880              		.thumb
 1881              		.thumb_func
 1882              		.fpu fpv4-sp-d16
 1884              	xTaskGetTickCountFromISR:
 1885              	.LFB22:
2225:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xReturn;
 1886              		.loc 1 2225 0
 1887              		.cfi_startproc
 1888              		@ args = 0, pretend = 0, frame = 0
 1889              		@ frame_needed = 0, uses_anonymous_args = 0
 1890 0000 08B5     		push	{r3, lr}
 1891              	.LCFI23:
 1892              		.cfi_def_cfa_offset 8
 1893              		.cfi_offset 3, -8
 1894              		.cfi_offset 14, -4
2243:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1895              		.loc 1 2243 0
 1896 0002 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1897              	.LVL155:
2247:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1898              		.loc 1 2247 0
 1899 0006 014B     		ldr	r3, .L177
 1900 0008 1868     		ldr	r0, [r3]
 1901              	.LVL156:
2252:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 1902              		.loc 1 2252 0
 1903 000a 08BD     		pop	{r3, pc}
 1904              	.L178:
 1905              		.align	2
 1906              	.L177:
 1907 000c 00000000 		.word	.LANCHOR15
 1908              		.cfi_endproc
 1909              	.LFE22:
 1911              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 1912              		.align	1
 1913              		.global	uxTaskGetNumberOfTasks
 1914              		.syntax unified
 1915              		.thumb
 1916              		.thumb_func
 1917              		.fpu fpv4-sp-d16
 1919              	uxTaskGetNumberOfTasks:
 1920              	.LFB23:
2256:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
 1921              		.loc 1 2256 0
 1922              		.cfi_startproc
 1923              		@ args = 0, pretend = 0, frame = 0
 1924              		@ frame_needed = 0, uses_anonymous_args = 0
 1925              		@ link register save eliminated.
2259:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 1926              		.loc 1 2259 0
 1927 0000 014B     		ldr	r3, .L180
 1928 0002 1868     		ldr	r0, [r3]
ARM GAS  /tmp/cc60zarx.s 			page 129


2260:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 1929              		.loc 1 2260 0
 1930 0004 7047     		bx	lr
 1931              	.L181:
 1932 0006 00BF     		.align	2
 1933              	.L180:
 1934 0008 00000000 		.word	.LANCHOR9
 1935              		.cfi_endproc
 1936              	.LFE23:
 1938              		.section	.text.pcTaskGetName,"ax",%progbits
 1939              		.align	1
 1940              		.global	pcTaskGetName
 1941              		.syntax unified
 1942              		.thumb
 1943              		.thumb_func
 1944              		.fpu fpv4-sp-d16
 1946              	pcTaskGetName:
 1947              	.LFB24:
2264:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
 1948              		.loc 1 2264 0
 1949              		.cfi_startproc
 1950              		@ args = 0, pretend = 0, frame = 0
 1951              		@ frame_needed = 0, uses_anonymous_args = 0
 1952              		@ link register save eliminated.
 1953              	.LVL157:
2269:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
 1954              		.loc 1 2269 0
 1955 0000 10B1     		cbz	r0, .L187
 1956              	.LVL158:
 1957              	.L183:
2270:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 1958              		.loc 1 2270 0 discriminator 4
 1959 0002 20B1     		cbz	r0, .L188
2272:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 1960              		.loc 1 2272 0
 1961 0004 3430     		adds	r0, r0, #52
 1962              	.LVL159:
 1963 0006 7047     		bx	lr
 1964              	.LVL160:
 1965              	.L187:
2269:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
 1966              		.loc 1 2269 0 discriminator 1
 1967 0008 054B     		ldr	r3, .L189
 1968 000a 1868     		ldr	r0, [r3]
 1969              	.LVL161:
 1970 000c F9E7     		b	.L183
 1971              	.LVL162:
 1972              	.L188:
 1973              	.LBB124:
 1974              	.LBB125:
 195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1975              		.loc 2 195 0
 1976              		.syntax unified
 1977              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1978 000e 4FF01003 			mov r3, #16												
 1979 0012 83F31188 		msr basepri, r3											
 1980 0016 BFF36F8F 		isb														
ARM GAS  /tmp/cc60zarx.s 			page 130


 1981 001a BFF34F8F 		dsb														
 1982              	
 1983              	@ 0 "" 2
 1984              	.LVL163:
 1985              		.thumb
 1986              		.syntax unified
 1987              	.L185:
 1988 001e FEE7     		b	.L185
 1989              	.L190:
 1990              		.align	2
 1991              	.L189:
 1992 0020 00000000 		.word	.LANCHOR10
 1993              	.LBE125:
 1994              	.LBE124:
 1995              		.cfi_endproc
 1996              	.LFE24:
 1998              		.section	.text.xTaskIncrementTick,"ax",%progbits
 1999              		.align	1
 2000              		.global	xTaskIncrementTick
 2001              		.syntax unified
 2002              		.thumb
 2003              		.thumb_func
 2004              		.fpu fpv4-sp-d16
 2006              	xTaskIncrementTick:
 2007              	.LFB25:
2584:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t * pxTCB;
 2008              		.loc 1 2584 0
 2009              		.cfi_startproc
 2010              		@ args = 0, pretend = 0, frame = 0
 2011              		@ frame_needed = 0, uses_anonymous_args = 0
 2012 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2013              	.LCFI24:
 2014              		.cfi_def_cfa_offset 24
 2015              		.cfi_offset 3, -24
 2016              		.cfi_offset 4, -20
 2017              		.cfi_offset 5, -16
 2018              		.cfi_offset 6, -12
 2019              		.cfi_offset 7, -8
 2020              		.cfi_offset 14, -4
 2021              	.LVL164:
2593:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2022              		.loc 1 2593 0
 2023 0002 3C4B     		ldr	r3, .L215
 2024 0004 1B68     		ldr	r3, [r3]
 2025 0006 002B     		cmp	r3, #0
 2026 0008 68D1     		bne	.L192
 2027              	.LBB126:
2597:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2028              		.loc 1 2597 0
 2029 000a 3B4B     		ldr	r3, .L215+4
 2030 000c 1D68     		ldr	r5, [r3]
 2031 000e 0135     		adds	r5, r5, #1
 2032              	.LVL165:
2601:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2033              		.loc 1 2601 0
 2034 0010 1D60     		str	r5, [r3]
2603:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  /tmp/cc60zarx.s 			page 131


 2035              		.loc 1 2603 0
 2036 0012 C5B9     		cbnz	r5, .L193
 2037              	.LBB127:
2605:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2038              		.loc 1 2605 0
 2039 0014 394B     		ldr	r3, .L215+8
 2040 0016 1B68     		ldr	r3, [r3]
 2041 0018 1B68     		ldr	r3, [r3]
 2042 001a 43B1     		cbz	r3, .L194
 2043              	.LBB128:
 2044              	.LBB129:
 195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2045              		.loc 2 195 0
 2046              		.syntax unified
 2047              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2048 001c 4FF01003 			mov r3, #16												
 2049 0020 83F31188 		msr basepri, r3											
 2050 0024 BFF36F8F 		isb														
 2051 0028 BFF34F8F 		dsb														
 2052              	
 2053              	@ 0 "" 2
 2054              	.LVL166:
 2055              		.thumb
 2056              		.syntax unified
 2057              	.L195:
 2058 002c FEE7     		b	.L195
 2059              	.L194:
 2060              	.LBE129:
 2061              	.LBE128:
2605:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2062              		.loc 1 2605 0 discriminator 2
 2063 002e 334A     		ldr	r2, .L215+8
 2064 0030 1168     		ldr	r1, [r2]
 2065              	.LVL167:
 2066 0032 334B     		ldr	r3, .L215+12
 2067 0034 1868     		ldr	r0, [r3]
 2068 0036 1060     		str	r0, [r2]
 2069 0038 1960     		str	r1, [r3]
 2070 003a 324A     		ldr	r2, .L215+16
 2071 003c 1368     		ldr	r3, [r2]
 2072 003e 0133     		adds	r3, r3, #1
 2073 0040 1360     		str	r3, [r2]
 2074 0042 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2075              	.LVL168:
 2076              	.L193:
 2077              	.LBE127:
2616:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2078              		.loc 1 2616 0
 2079 0046 304B     		ldr	r3, .L215+20
 2080 0048 1B68     		ldr	r3, [r3]
 2081 004a 9D42     		cmp	r5, r3
 2082 004c 3AD2     		bcs	.L206
 2083              	.LBE126:
2587:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2084              		.loc 1 2587 0
 2085 004e 0024     		movs	r4, #0
 2086              	.LVL169:
ARM GAS  /tmp/cc60zarx.s 			page 132


 2087              	.L197:
 2088              	.LBB130:
2699:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2089              		.loc 1 2699 0
 2090 0050 2E4B     		ldr	r3, .L215+24
 2091 0052 1B68     		ldr	r3, [r3]
 2092 0054 DB6A     		ldr	r3, [r3, #44]
 2093 0056 03EB8303 		add	r3, r3, r3, lsl #2
 2094 005a 9A00     		lsls	r2, r3, #2
 2095 005c 2C4B     		ldr	r3, .L215+28
 2096 005e 9B58     		ldr	r3, [r3, r2]
 2097 0060 012B     		cmp	r3, #1
 2098 0062 40D9     		bls	.L204
2701:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2099              		.loc 1 2701 0
 2100 0064 0124     		movs	r4, #1
 2101              	.LVL170:
 2102 0066 3EE0     		b	.L204
 2103              	.LVL171:
 2104              	.L208:
2682:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
 2105              		.loc 1 2682 0
 2106 0068 0124     		movs	r4, #1
 2107              	.LVL172:
 2108              	.L196:
2620:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2109              		.loc 1 2620 0
 2110 006a 244B     		ldr	r3, .L215+8
 2111 006c 1B68     		ldr	r3, [r3]
 2112 006e 1B68     		ldr	r3, [r3]
 2113 0070 53B3     		cbz	r3, .L212
 2114 0072 0023     		movs	r3, #0
 2115              	.L198:
2620:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2116              		.loc 1 2620 0 is_stmt 0 discriminator 4
 2117 0074 53BB     		cbnz	r3, .L213
2636:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 2118              		.loc 1 2636 0 is_stmt 1
 2119 0076 214B     		ldr	r3, .L215+8
 2120 0078 1B68     		ldr	r3, [r3]
 2121 007a DB68     		ldr	r3, [r3, #12]
 2122 007c DE68     		ldr	r6, [r3, #12]
 2123              	.LVL173:
2637:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2124              		.loc 1 2637 0
 2125 007e 7368     		ldr	r3, [r6, #4]
 2126              	.LVL174:
2639:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2127              		.loc 1 2639 0
 2128 0080 9D42     		cmp	r5, r3
 2129 0082 28D3     		bcc	.L214
2655:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2130              		.loc 1 2655 0
 2131 0084 371D     		adds	r7, r6, #4
 2132 0086 3846     		mov	r0, r7
 2133 0088 FFF7FEFF 		bl	uxListRemove
 2134              	.LVL175:
ARM GAS  /tmp/cc60zarx.s 			page 133


2659:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2135              		.loc 1 2659 0
 2136 008c B36A     		ldr	r3, [r6, #40]
 2137 008e 1BB1     		cbz	r3, .L201
2661:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2138              		.loc 1 2661 0
 2139 0090 06F11800 		add	r0, r6, #24
 2140 0094 FFF7FEFF 		bl	uxListRemove
 2141              	.LVL176:
 2142              	.L201:
2670:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2143              		.loc 1 2670 0
 2144 0098 F36A     		ldr	r3, [r6, #44]
 2145 009a 0122     		movs	r2, #1
 2146 009c 9A40     		lsls	r2, r2, r3
 2147 009e 1D49     		ldr	r1, .L215+32
 2148 00a0 0868     		ldr	r0, [r1]
 2149 00a2 0243     		orrs	r2, r2, r0
 2150 00a4 0A60     		str	r2, [r1]
 2151 00a6 03EB8303 		add	r3, r3, r3, lsl #2
 2152 00aa 9A00     		lsls	r2, r3, #2
 2153 00ac 3946     		mov	r1, r7
 2154 00ae 1848     		ldr	r0, .L215+28
 2155 00b0 1044     		add	r0, r0, r2
 2156 00b2 FFF7FEFF 		bl	vListInsertEnd
 2157              	.LVL177:
2680:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
 2158              		.loc 1 2680 0
 2159 00b6 F26A     		ldr	r2, [r6, #44]
 2160 00b8 144B     		ldr	r3, .L215+24
 2161 00ba 1B68     		ldr	r3, [r3]
 2162 00bc DB6A     		ldr	r3, [r3, #44]
 2163 00be 9A42     		cmp	r2, r3
 2164 00c0 D2D2     		bcs	.L208
 2165 00c2 D2E7     		b	.L196
 2166              	.LVL178:
 2167              	.L206:
 2168 00c4 0024     		movs	r4, #0
 2169 00c6 D0E7     		b	.L196
 2170              	.LVL179:
 2171              	.L212:
2620:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2172              		.loc 1 2620 0
 2173 00c8 0123     		movs	r3, #1
 2174 00ca D3E7     		b	.L198
 2175              	.L213:
2627:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 2176              		.loc 1 2627 0
 2177 00cc 4FF0FF32 		mov	r2, #-1
 2178 00d0 0D4B     		ldr	r3, .L215+20
 2179 00d2 1A60     		str	r2, [r3]
2628:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2180              		.loc 1 2628 0
 2181 00d4 BCE7     		b	.L197
 2182              	.LVL180:
 2183              	.L214:
2646:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
ARM GAS  /tmp/cc60zarx.s 			page 134


 2184              		.loc 1 2646 0
 2185 00d6 0C4A     		ldr	r2, .L215+20
 2186 00d8 1360     		str	r3, [r2]
2647:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2187              		.loc 1 2647 0
 2188 00da B9E7     		b	.L197
 2189              	.LVL181:
 2190              	.L192:
 2191              	.LBE130:
2727:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2192              		.loc 1 2727 0
 2193 00dc 0E4A     		ldr	r2, .L215+36
 2194 00de 1368     		ldr	r3, [r2]
 2195 00e0 0133     		adds	r3, r3, #1
 2196 00e2 1360     		str	r3, [r2]
2587:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2197              		.loc 1 2587 0
 2198 00e4 0024     		movs	r4, #0
 2199              	.LVL182:
 2200              	.L204:
2740:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2201              		.loc 1 2740 0
 2202 00e6 0D4B     		ldr	r3, .L215+40
 2203 00e8 1B68     		ldr	r3, [r3]
 2204 00ea 03B1     		cbz	r3, .L191
2742:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2205              		.loc 1 2742 0
 2206 00ec 0124     		movs	r4, #1
 2207              	.LVL183:
 2208              	.L191:
2752:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2209              		.loc 1 2752 0
 2210 00ee 2046     		mov	r0, r4
 2211 00f0 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2212              	.L216:
 2213 00f2 00BF     		.align	2
 2214              	.L215:
 2215 00f4 00000000 		.word	.LANCHOR16
 2216 00f8 00000000 		.word	.LANCHOR15
 2217 00fc 00000000 		.word	.LANCHOR2
 2218 0100 00000000 		.word	.LANCHOR8
 2219 0104 00000000 		.word	.LANCHOR18
 2220 0108 00000000 		.word	.LANCHOR3
 2221 010c 00000000 		.word	.LANCHOR10
 2222 0110 00000000 		.word	.LANCHOR4
 2223 0114 00000000 		.word	.LANCHOR13
 2224 0118 00000000 		.word	.LANCHOR19
 2225 011c 00000000 		.word	.LANCHOR20
 2226              		.cfi_endproc
 2227              	.LFE25:
 2229              		.section	.text.xTaskResumeAll,"ax",%progbits
 2230              		.align	1
 2231              		.global	xTaskResumeAll
 2232              		.syntax unified
 2233              		.thumb
 2234              		.thumb_func
 2235              		.fpu fpv4-sp-d16
ARM GAS  /tmp/cc60zarx.s 			page 135


 2237              	xTaskResumeAll:
 2238              	.LFB20:
2100:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB = NULL;
 2239              		.loc 1 2100 0
 2240              		.cfi_startproc
 2241              		@ args = 0, pretend = 0, frame = 0
 2242              		@ frame_needed = 0, uses_anonymous_args = 0
 2243 0000 38B5     		push	{r3, r4, r5, lr}
 2244              	.LCFI25:
 2245              		.cfi_def_cfa_offset 16
 2246              		.cfi_offset 3, -16
 2247              		.cfi_offset 4, -12
 2248              		.cfi_offset 5, -8
 2249              		.cfi_offset 14, -4
 2250              	.LVL184:
2106:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2251              		.loc 1 2106 0
 2252 0002 354B     		ldr	r3, .L234
 2253 0004 1B68     		ldr	r3, [r3]
 2254 0006 43B9     		cbnz	r3, .L218
 2255              	.LBB131:
 2256              	.LBB132:
 195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2257              		.loc 2 195 0
 2258              		.syntax unified
 2259              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2260 0008 4FF01003 			mov r3, #16												
 2261 000c 83F31188 		msr basepri, r3											
 2262 0010 BFF36F8F 		isb														
 2263 0014 BFF34F8F 		dsb														
 2264              	
 2265              	@ 0 "" 2
 2266              	.LVL185:
 2267              		.thumb
 2268              		.syntax unified
 2269              	.L219:
 2270 0018 FEE7     		b	.L219
 2271              	.L218:
 2272              	.LBE132:
 2273              	.LBE131:
2113:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2274              		.loc 1 2113 0
 2275 001a FFF7FEFF 		bl	vPortEnterCritical
 2276              	.LVL186:
2115:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2277              		.loc 1 2115 0
 2278 001e 2E4B     		ldr	r3, .L234
 2279 0020 1A68     		ldr	r2, [r3]
 2280 0022 013A     		subs	r2, r2, #1
 2281 0024 1A60     		str	r2, [r3]
2117:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2282              		.loc 1 2117 0
 2283 0026 1B68     		ldr	r3, [r3]
 2284 0028 002B     		cmp	r3, #0
 2285 002a 50D1     		bne	.L228
2119:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2286              		.loc 1 2119 0
ARM GAS  /tmp/cc60zarx.s 			page 136


 2287 002c 2B4B     		ldr	r3, .L234+4
 2288 002e 1B68     		ldr	r3, [r3]
 2289 0030 23B9     		cbnz	r3, .L229
2102:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2290              		.loc 1 2102 0
 2291 0032 0024     		movs	r4, #0
 2292              	.LVL187:
 2293              	.L220:
2203:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2294              		.loc 1 2203 0
 2295 0034 FFF7FEFF 		bl	vPortExitCritical
 2296              	.LVL188:
2206:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2297              		.loc 1 2206 0
 2298 0038 2046     		mov	r0, r4
 2299 003a 38BD     		pop	{r3, r4, r5, pc}
 2300              	.LVL189:
 2301              	.L229:
 2302 003c 0024     		movs	r4, #0
 2303              	.LVL190:
 2304              	.L221:
2123:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2305              		.loc 1 2123 0
 2306 003e 284B     		ldr	r3, .L234+8
 2307 0040 1B68     		ldr	r3, [r3]
 2308 0042 1BB3     		cbz	r3, .L232
2125:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2309              		.loc 1 2125 0
 2310 0044 264B     		ldr	r3, .L234+8
 2311 0046 DB68     		ldr	r3, [r3, #12]
 2312 0048 DC68     		ldr	r4, [r3, #12]
 2313              	.LVL191:
2126:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2314              		.loc 1 2126 0
 2315 004a 04F11800 		add	r0, r4, #24
 2316 004e FFF7FEFF 		bl	uxListRemove
 2317              	.LVL192:
2127:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2318              		.loc 1 2127 0
 2319 0052 251D     		adds	r5, r4, #4
 2320 0054 2846     		mov	r0, r5
 2321 0056 FFF7FEFF 		bl	uxListRemove
 2322              	.LVL193:
2128:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2323              		.loc 1 2128 0
 2324 005a E36A     		ldr	r3, [r4, #44]
 2325 005c 0122     		movs	r2, #1
 2326 005e 9A40     		lsls	r2, r2, r3
 2327 0060 2049     		ldr	r1, .L234+12
 2328 0062 0868     		ldr	r0, [r1]
 2329 0064 0243     		orrs	r2, r2, r0
 2330 0066 0A60     		str	r2, [r1]
 2331 0068 03EB8303 		add	r3, r3, r3, lsl #2
 2332 006c 9A00     		lsls	r2, r3, #2
 2333 006e 2946     		mov	r1, r5
 2334 0070 1D48     		ldr	r0, .L234+16
 2335 0072 1044     		add	r0, r0, r2
ARM GAS  /tmp/cc60zarx.s 			page 137


 2336 0074 FFF7FEFF 		bl	vListInsertEnd
 2337              	.LVL194:
2132:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2338              		.loc 1 2132 0
 2339 0078 E26A     		ldr	r2, [r4, #44]
 2340 007a 1C4B     		ldr	r3, .L234+20
 2341 007c 1B68     		ldr	r3, [r3]
 2342 007e DB6A     		ldr	r3, [r3, #44]
 2343 0080 9A42     		cmp	r2, r3
 2344 0082 DCD3     		bcc	.L221
2134:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2345              		.loc 1 2134 0
 2346 0084 0122     		movs	r2, #1
 2347 0086 1A4B     		ldr	r3, .L234+24
 2348 0088 1A60     		str	r2, [r3]
 2349 008a D8E7     		b	.L221
 2350              	.L232:
2142:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2351              		.loc 1 2142 0
 2352 008c 0CB1     		cbz	r4, .L224
2150:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2353              		.loc 1 2150 0
 2354 008e FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2355              	.LVL195:
 2356              	.L224:
 2357              	.LBB133:
2158:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2358              		.loc 1 2158 0
 2359 0092 184B     		ldr	r3, .L234+28
 2360 0094 1C68     		ldr	r4, [r3]
 2361              	.LVL196:
2160:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2362              		.loc 1 2160 0
 2363 0096 74B9     		cbnz	r4, .L227
 2364              	.L225:
 2365              	.LBE133:
2183:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2366              		.loc 1 2183 0
 2367 0098 154B     		ldr	r3, .L234+24
 2368 009a 1B68     		ldr	r3, [r3]
 2369 009c CBB1     		cbz	r3, .L230
 2370              	.LVL197:
2190:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2371              		.loc 1 2190 0
 2372 009e 4FF08052 		mov	r2, #268435456
 2373 00a2 154B     		ldr	r3, .L234+32
 2374 00a4 1A60     		str	r2, [r3]
 2375              		.syntax unified
 2376              	@ 2190 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2377 00a6 BFF34F8F 		dsb
 2378              	@ 0 "" 2
 2379              	@ 2190 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2380 00aa BFF36F8F 		isb
 2381              	@ 0 "" 2
2187:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2382              		.loc 1 2187 0
 2383              		.thumb
ARM GAS  /tmp/cc60zarx.s 			page 138


 2384              		.syntax unified
 2385 00ae 0124     		movs	r4, #1
 2386              	.LVL198:
 2387 00b0 C0E7     		b	.L220
 2388              	.LVL199:
 2389              	.L226:
 2390              	.LBB134:
2173:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2391              		.loc 1 2173 0
 2392 00b2 013C     		subs	r4, r4, #1
 2393              	.LVL200:
 2394 00b4 07D0     		beq	.L233
 2395              	.L227:
2164:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
 2396              		.loc 1 2164 0
 2397 00b6 FFF7FEFF 		bl	xTaskIncrementTick
 2398              	.LVL201:
 2399 00ba 0028     		cmp	r0, #0
 2400 00bc F9D0     		beq	.L226
2166:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
 2401              		.loc 1 2166 0
 2402 00be 0122     		movs	r2, #1
 2403 00c0 0B4B     		ldr	r3, .L234+24
 2404 00c2 1A60     		str	r2, [r3]
 2405 00c4 F5E7     		b	.L226
 2406              	.L233:
2175:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2407              		.loc 1 2175 0
 2408 00c6 0022     		movs	r2, #0
 2409 00c8 0A4B     		ldr	r3, .L234+28
 2410 00ca 1A60     		str	r2, [r3]
 2411 00cc E4E7     		b	.L225
 2412              	.LVL202:
 2413              	.L228:
 2414              	.LBE134:
2102:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2415              		.loc 1 2102 0
 2416 00ce 0024     		movs	r4, #0
 2417 00d0 B0E7     		b	.L220
 2418              	.LVL203:
 2419              	.L230:
 2420 00d2 0024     		movs	r4, #0
 2421              	.LVL204:
 2422 00d4 AEE7     		b	.L220
 2423              	.L235:
 2424 00d6 00BF     		.align	2
 2425              	.L234:
 2426 00d8 00000000 		.word	.LANCHOR16
 2427 00dc 00000000 		.word	.LANCHOR9
 2428 00e0 00000000 		.word	.LANCHOR1
 2429 00e4 00000000 		.word	.LANCHOR13
 2430 00e8 00000000 		.word	.LANCHOR4
 2431 00ec 00000000 		.word	.LANCHOR10
 2432 00f0 00000000 		.word	.LANCHOR20
 2433 00f4 00000000 		.word	.LANCHOR19
 2434 00f8 04ED00E0 		.word	-536810236
 2435              		.cfi_endproc
ARM GAS  /tmp/cc60zarx.s 			page 139


 2436              	.LFE20:
 2438              		.section	.text.vTaskDelay,"ax",%progbits
 2439              		.align	1
 2440              		.global	vTaskDelay
 2441              		.syntax unified
 2442              		.thumb
 2443              		.thumb_func
 2444              		.fpu fpv4-sp-d16
 2446              	vTaskDelay:
 2447              	.LFB9:
1283:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 2448              		.loc 1 1283 0
 2449              		.cfi_startproc
 2450              		@ args = 0, pretend = 0, frame = 0
 2451              		@ frame_needed = 0, uses_anonymous_args = 0
 2452              	.LVL205:
 2453 0000 10B5     		push	{r4, lr}
 2454              	.LCFI26:
 2455              		.cfi_def_cfa_offset 8
 2456              		.cfi_offset 4, -8
 2457              		.cfi_offset 14, -4
 2458              	.LVL206:
1287:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2459              		.loc 1 1287 0
 2460 0002 A8B1     		cbz	r0, .L241
 2461 0004 0446     		mov	r4, r0
1289:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
 2462              		.loc 1 1289 0
 2463 0006 104B     		ldr	r3, .L243
 2464 0008 1B68     		ldr	r3, [r3]
 2465 000a 43B1     		cbz	r3, .L238
 2466              	.LBB135:
 2467              	.LBB136:
 195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2468              		.loc 2 195 0
 2469              		.syntax unified
 2470              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2471 000c 4FF01003 			mov r3, #16												
 2472 0010 83F31188 		msr basepri, r3											
 2473 0014 BFF36F8F 		isb														
 2474 0018 BFF34F8F 		dsb														
 2475              	
 2476              	@ 0 "" 2
 2477              	.LVL207:
 2478              		.thumb
 2479              		.syntax unified
 2480              	.L239:
 2481 001c FEE7     		b	.L239
 2482              	.L238:
 2483              	.LBE136:
 2484              	.LBE135:
1290:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2485              		.loc 1 1290 0
 2486 001e FFF7FEFF 		bl	vTaskSuspendAll
 2487              	.LVL208:
1301:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2488              		.loc 1 1301 0
ARM GAS  /tmp/cc60zarx.s 			page 140


 2489 0022 0021     		movs	r1, #0
 2490 0024 2046     		mov	r0, r4
 2491 0026 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2492              	.LVL209:
1303:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2493              		.loc 1 1303 0
 2494 002a FFF7FEFF 		bl	xTaskResumeAll
 2495              	.LVL210:
 2496 002e 00E0     		b	.L237
 2497              	.LVL211:
 2498              	.L241:
1284:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2499              		.loc 1 1284 0
 2500 0030 0020     		movs	r0, #0
 2501              	.LVL212:
 2502              	.L237:
1312:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2503              		.loc 1 1312 0
 2504 0032 38B9     		cbnz	r0, .L236
1314:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2505              		.loc 1 1314 0
 2506 0034 4FF08052 		mov	r2, #268435456
 2507 0038 044B     		ldr	r3, .L243+4
 2508 003a 1A60     		str	r2, [r3]
 2509              		.syntax unified
 2510              	@ 1314 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2511 003c BFF34F8F 		dsb
 2512              	@ 0 "" 2
 2513              	@ 1314 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2514 0040 BFF36F8F 		isb
 2515              	@ 0 "" 2
 2516              		.thumb
 2517              		.syntax unified
 2518              	.L236:
 2519 0044 10BD     		pop	{r4, pc}
 2520              	.L244:
 2521 0046 00BF     		.align	2
 2522              	.L243:
 2523 0048 00000000 		.word	.LANCHOR16
 2524 004c 04ED00E0 		.word	-536810236
 2525              		.cfi_endproc
 2526              	.LFE9:
 2528              		.section	.text.vTaskSwitchContext,"ax",%progbits
 2529              		.align	1
 2530              		.global	vTaskSwitchContext
 2531              		.syntax unified
 2532              		.thumb
 2533              		.thumb_func
 2534              		.fpu fpv4-sp-d16
 2536              	vTaskSwitchContext:
 2537              	.LFB26:
2846:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 2538              		.loc 1 2846 0
 2539              		.cfi_startproc
 2540              		@ args = 0, pretend = 0, frame = 0
 2541              		@ frame_needed = 0, uses_anonymous_args = 0
 2542              		@ link register save eliminated.
ARM GAS  /tmp/cc60zarx.s 			page 141


2847:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2543              		.loc 1 2847 0
 2544 0000 214B     		ldr	r3, .L256
 2545 0002 1B68     		ldr	r3, [r3]
 2546 0004 C3B9     		cbnz	r3, .L254
2855:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
 2547              		.loc 1 2855 0
 2548 0006 0022     		movs	r2, #0
 2549 0008 204B     		ldr	r3, .L256+4
 2550 000a 1A60     		str	r2, [r3]
 2551              	.LBB137:
2890:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2552              		.loc 1 2890 0
 2553 000c 204B     		ldr	r3, .L256+8
 2554 000e 1B68     		ldr	r3, [r3]
 2555              	.LVL213:
 2556              	.LBB138:
 2557              	.LBB139:
 134:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 2558              		.loc 2 134 0
 2559              		.syntax unified
 2560              	@ 134 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2561 0010 B3FA83F3 		clz r3, r3
 2562              	@ 0 "" 2
 2563              	.LVL214:
 2564              		.thumb
 2565              		.syntax unified
 2566 0014 DBB2     		uxtb	r3, r3
 2567              	.LBE139:
 2568              	.LBE138:
2890:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2569              		.loc 1 2890 0
 2570 0016 C3F11F03 		rsb	r3, r3, #31
 2571              	.LVL215:
 2572 001a 03EB8301 		add	r1, r3, r3, lsl #2
 2573 001e 8A00     		lsls	r2, r1, #2
 2574 0020 1C49     		ldr	r1, .L256+12
 2575 0022 8A58     		ldr	r2, [r1, r2]
 2576 0024 62B9     		cbnz	r2, .L248
 2577              	.LBB140:
 2578              	.LBB141:
 195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2579              		.loc 2 195 0
 2580              		.syntax unified
 2581              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2582 0026 4FF01003 			mov r3, #16												
 2583 002a 83F31188 		msr basepri, r3											
 2584 002e BFF36F8F 		isb														
 2585 0032 BFF34F8F 		dsb														
 2586              	
 2587              	@ 0 "" 2
 2588              	.LVL216:
 2589              		.thumb
 2590              		.syntax unified
 2591              	.L249:
 2592 0036 FEE7     		b	.L249
 2593              	.L254:
ARM GAS  /tmp/cc60zarx.s 			page 142


 2594              	.LBE141:
 2595              	.LBE140:
 2596              	.LBE137:
2851:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2597              		.loc 1 2851 0
 2598 0038 0122     		movs	r2, #1
 2599 003a 144B     		ldr	r3, .L256+4
 2600 003c 1A60     		str	r2, [r3]
 2601 003e 7047     		bx	lr
 2602              	.LVL217:
 2603              	.L248:
2846:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 2604              		.loc 1 2846 0 discriminator 2
 2605 0040 10B4     		push	{r4}
 2606              	.LCFI27:
 2607              		.cfi_def_cfa_offset 4
 2608              		.cfi_offset 4, -4
 2609              	.LVL218:
 2610              	.LBB144:
 2611              	.LBB142:
2890:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2612              		.loc 1 2890 0 discriminator 2
 2613 0042 1448     		ldr	r0, .L256+12
 2614 0044 9A00     		lsls	r2, r3, #2
 2615 0046 D418     		adds	r4, r2, r3
 2616 0048 A100     		lsls	r1, r4, #2
 2617 004a 0144     		add	r1, r1, r0
 2618 004c 4C68     		ldr	r4, [r1, #4]
 2619 004e 6468     		ldr	r4, [r4, #4]
 2620 0050 4C60     		str	r4, [r1, #4]
 2621 0052 1A44     		add	r2, r2, r3
 2622 0054 9100     		lsls	r1, r2, #2
 2623 0056 0831     		adds	r1, r1, #8
 2624 0058 0844     		add	r0, r0, r1
 2625 005a 8442     		cmp	r4, r0
 2626 005c 0BD0     		beq	.L255
 2627              	.L250:
2890:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2628              		.loc 1 2890 0 is_stmt 0 discriminator 5
 2629 005e 03EB8303 		add	r3, r3, r3, lsl #2
 2630              	.LVL219:
 2631 0062 9A00     		lsls	r2, r3, #2
 2632 0064 0B4B     		ldr	r3, .L256+12
 2633 0066 1344     		add	r3, r3, r2
 2634 0068 5B68     		ldr	r3, [r3, #4]
 2635 006a DA68     		ldr	r2, [r3, #12]
 2636 006c 0A4B     		ldr	r3, .L256+16
 2637 006e 1A60     		str	r2, [r3]
 2638              	.LBE142:
 2639              	.LBE144:
2901:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2640              		.loc 1 2901 0 is_stmt 1 discriminator 5
 2641 0070 5DF8044B 		ldr	r4, [sp], #4
 2642              	.LCFI28:
 2643              		.cfi_remember_state
 2644              		.cfi_restore 4
 2645              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/cc60zarx.s 			page 143


 2646 0074 7047     		bx	lr
 2647              	.LVL220:
 2648              	.L255:
 2649              	.LCFI29:
 2650              		.cfi_restore_state
 2651              	.LBB145:
 2652              	.LBB143:
2890:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2653              		.loc 1 2890 0 discriminator 3
 2654 0076 6068     		ldr	r0, [r4, #4]
 2655 0078 03EB8302 		add	r2, r3, r3, lsl #2
 2656 007c 9100     		lsls	r1, r2, #2
 2657 007e 054A     		ldr	r2, .L256+12
 2658 0080 0A44     		add	r2, r2, r1
 2659 0082 5060     		str	r0, [r2, #4]
 2660 0084 EBE7     		b	.L250
 2661              	.L257:
 2662 0086 00BF     		.align	2
 2663              	.L256:
 2664 0088 00000000 		.word	.LANCHOR16
 2665 008c 00000000 		.word	.LANCHOR20
 2666 0090 00000000 		.word	.LANCHOR13
 2667 0094 00000000 		.word	.LANCHOR4
 2668 0098 00000000 		.word	.LANCHOR10
 2669              	.LBE143:
 2670              	.LBE145:
 2671              		.cfi_endproc
 2672              	.LFE26:
 2674              		.section	.text.vTaskSuspend,"ax",%progbits
 2675              		.align	1
 2676              		.global	vTaskSuspend
 2677              		.syntax unified
 2678              		.thumb
 2679              		.thumb_func
 2680              		.fpu fpv4-sp-d16
 2682              	vTaskSuspend:
 2683              	.LFB13:
1625:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 2684              		.loc 1 1625 0
 2685              		.cfi_startproc
 2686              		@ args = 0, pretend = 0, frame = 0
 2687              		@ frame_needed = 0, uses_anonymous_args = 0
 2688              	.LVL221:
 2689 0000 38B5     		push	{r3, r4, r5, lr}
 2690              	.LCFI30:
 2691              		.cfi_def_cfa_offset 16
 2692              		.cfi_offset 3, -16
 2693              		.cfi_offset 4, -12
 2694              		.cfi_offset 5, -8
 2695              		.cfi_offset 14, -4
 2696 0002 0446     		mov	r4, r0
1628:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2697              		.loc 1 1628 0
 2698 0004 FFF7FEFF 		bl	vPortEnterCritical
 2699              	.LVL222:
1632:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2700              		.loc 1 1632 0
ARM GAS  /tmp/cc60zarx.s 			page 144


 2701 0008 64B3     		cbz	r4, .L271
 2702              	.LVL223:
 2703              	.L259:
1638:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2704              		.loc 1 1638 0 discriminator 4
 2705 000a 251D     		adds	r5, r4, #4
 2706 000c 2846     		mov	r0, r5
 2707 000e FFF7FEFF 		bl	uxListRemove
 2708              	.LVL224:
 2709 0012 70B9     		cbnz	r0, .L260
1640:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2710              		.loc 1 1640 0
 2711 0014 E26A     		ldr	r2, [r4, #44]
 2712 0016 02EB8201 		add	r1, r2, r2, lsl #2
 2713 001a 8B00     		lsls	r3, r1, #2
 2714 001c 2B49     		ldr	r1, .L275
 2715 001e CB58     		ldr	r3, [r1, r3]
 2716 0020 3BB9     		cbnz	r3, .L260
1640:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2717              		.loc 1 1640 0 is_stmt 0 discriminator 1
 2718 0022 0123     		movs	r3, #1
 2719 0024 03FA02F2 		lsl	r2, r3, r2
 2720 0028 2949     		ldr	r1, .L275+4
 2721 002a 0B68     		ldr	r3, [r1]
 2722 002c 23EA0203 		bic	r3, r3, r2
 2723 0030 0B60     		str	r3, [r1]
 2724              	.L260:
1648:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2725              		.loc 1 1648 0 is_stmt 1
 2726 0032 A36A     		ldr	r3, [r4, #40]
 2727 0034 1BB1     		cbz	r3, .L261
1650:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2728              		.loc 1 1650 0
 2729 0036 04F11800 		add	r0, r4, #24
 2730 003a FFF7FEFF 		bl	uxListRemove
 2731              	.LVL225:
 2732              	.L261:
1657:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2733              		.loc 1 1657 0
 2734 003e 2946     		mov	r1, r5
 2735 0040 2448     		ldr	r0, .L275+8
 2736 0042 FFF7FEFF 		bl	vListInsertEnd
 2737              	.LVL226:
1661:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2738              		.loc 1 1661 0
 2739 0046 94F85030 		ldrb	r3, [r4, #80]	@ zero_extendqisi2
 2740 004a DBB2     		uxtb	r3, r3
 2741 004c 012B     		cmp	r3, #1
 2742 004e 0CD0     		beq	.L272
 2743              	.L262:
1670:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2744              		.loc 1 1670 0
 2745 0050 FFF7FEFF 		bl	vPortExitCritical
 2746              	.LVL227:
1672:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2747              		.loc 1 1672 0
 2748 0054 204B     		ldr	r3, .L275+12
ARM GAS  /tmp/cc60zarx.s 			page 145


 2749 0056 1B68     		ldr	r3, [r3]
 2750 0058 5BB9     		cbnz	r3, .L273
 2751              	.L263:
1687:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2752              		.loc 1 1687 0
 2753 005a 204B     		ldr	r3, .L275+16
 2754 005c 1B68     		ldr	r3, [r3]
 2755 005e 9C42     		cmp	r4, r3
 2756 0060 0ED0     		beq	.L274
 2757              	.L258:
 2758 0062 38BD     		pop	{r3, r4, r5, pc}
 2759              	.LVL228:
 2760              	.L271:
1632:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2761              		.loc 1 1632 0 discriminator 1
 2762 0064 1D4B     		ldr	r3, .L275+16
 2763 0066 1C68     		ldr	r4, [r3]
 2764              	.LVL229:
 2765 0068 CFE7     		b	.L259
 2766              	.LVL230:
 2767              	.L272:
1665:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2768              		.loc 1 1665 0
 2769 006a 0023     		movs	r3, #0
 2770 006c 84F85030 		strb	r3, [r4, #80]
 2771 0070 EEE7     		b	.L262
 2772              	.L273:
1676:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2773              		.loc 1 1676 0
 2774 0072 FFF7FEFF 		bl	vPortEnterCritical
 2775              	.LVL231:
1678:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2776              		.loc 1 1678 0
 2777 0076 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2778              	.LVL232:
1680:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2779              		.loc 1 1680 0
 2780 007a FFF7FEFF 		bl	vPortExitCritical
 2781              	.LVL233:
 2782 007e ECE7     		b	.L263
 2783              	.L274:
1689:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2784              		.loc 1 1689 0
 2785 0080 154B     		ldr	r3, .L275+12
 2786 0082 1B68     		ldr	r3, [r3]
 2787 0084 A3B1     		cbz	r3, .L265
1692:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 2788              		.loc 1 1692 0
 2789 0086 164B     		ldr	r3, .L275+20
 2790 0088 1B68     		ldr	r3, [r3]
 2791 008a 43B1     		cbz	r3, .L266
 2792              	.LBB146:
 2793              	.LBB147:
 195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2794              		.loc 2 195 0
 2795              		.syntax unified
 2796              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
ARM GAS  /tmp/cc60zarx.s 			page 146


 2797 008c 4FF01003 			mov r3, #16												
 2798 0090 83F31188 		msr basepri, r3											
 2799 0094 BFF36F8F 		isb														
 2800 0098 BFF34F8F 		dsb														
 2801              	
 2802              	@ 0 "" 2
 2803              	.LVL234:
 2804              		.thumb
 2805              		.syntax unified
 2806              	.L267:
 2807 009c FEE7     		b	.L267
 2808              	.L266:
 2809              	.LBE147:
 2810              	.LBE146:
1693:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2811              		.loc 1 1693 0
 2812 009e 4FF08052 		mov	r2, #268435456
 2813 00a2 104B     		ldr	r3, .L275+24
 2814 00a4 1A60     		str	r2, [r3]
 2815              		.syntax unified
 2816              	@ 1693 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2817 00a6 BFF34F8F 		dsb
 2818              	@ 0 "" 2
 2819              	@ 1693 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2820 00aa BFF36F8F 		isb
 2821              	@ 0 "" 2
 2822              		.thumb
 2823              		.syntax unified
 2824 00ae 38BD     		pop	{r3, r4, r5, pc}
 2825              	.LVL235:
 2826              	.L265:
1700:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2827              		.loc 1 1700 0
 2828 00b0 084B     		ldr	r3, .L275+8
 2829 00b2 1A68     		ldr	r2, [r3]
 2830 00b4 0C4B     		ldr	r3, .L275+28
 2831 00b6 1B68     		ldr	r3, [r3]
 2832 00b8 9A42     		cmp	r2, r3
 2833 00ba 03D1     		bne	.L268
1706:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2834              		.loc 1 1706 0
 2835 00bc 0022     		movs	r2, #0
 2836 00be 074B     		ldr	r3, .L275+16
 2837 00c0 1A60     		str	r2, [r3]
 2838 00c2 38BD     		pop	{r3, r4, r5, pc}
 2839              	.LVL236:
 2840              	.L268:
1710:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2841              		.loc 1 1710 0
 2842 00c4 FFF7FEFF 		bl	vTaskSwitchContext
 2843              	.LVL237:
1718:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2844              		.loc 1 1718 0
 2845 00c8 CBE7     		b	.L258
 2846              	.L276:
 2847 00ca 00BF     		.align	2
 2848              	.L275:
ARM GAS  /tmp/cc60zarx.s 			page 147


 2849 00cc 00000000 		.word	.LANCHOR4
 2850 00d0 00000000 		.word	.LANCHOR13
 2851 00d4 00000000 		.word	.LANCHOR0
 2852 00d8 00000000 		.word	.LANCHOR11
 2853 00dc 00000000 		.word	.LANCHOR10
 2854 00e0 00000000 		.word	.LANCHOR16
 2855 00e4 04ED00E0 		.word	-536810236
 2856 00e8 00000000 		.word	.LANCHOR9
 2857              		.cfi_endproc
 2858              	.LFE13:
 2860              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 2861              		.align	1
 2862              		.global	vTaskPlaceOnEventList
 2863              		.syntax unified
 2864              		.thumb
 2865              		.thumb_func
 2866              		.fpu fpv4-sp-d16
 2868              	vTaskPlaceOnEventList:
 2869              	.LFB27:
2905:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 2870              		.loc 1 2905 0
 2871              		.cfi_startproc
 2872              		@ args = 0, pretend = 0, frame = 0
 2873              		@ frame_needed = 0, uses_anonymous_args = 0
 2874              	.LVL238:
2906:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2875              		.loc 1 2906 0
 2876 0000 40B9     		cbnz	r0, .L278
 2877              	.LBB148:
 2878              	.LBB149:
 195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2879              		.loc 2 195 0
 2880              		.syntax unified
 2881              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2882 0002 4FF01003 			mov r3, #16												
 2883 0006 83F31188 		msr basepri, r3											
 2884 000a BFF36F8F 		isb														
 2885 000e BFF34F8F 		dsb														
 2886              	
 2887              	@ 0 "" 2
 2888              	.LVL239:
 2889              		.thumb
 2890              		.syntax unified
 2891              	.L279:
 2892 0012 FEE7     		b	.L279
 2893              	.L278:
 2894              	.LBE149:
 2895              	.LBE148:
2905:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 2896              		.loc 1 2905 0
 2897 0014 10B5     		push	{r4, lr}
 2898              	.LCFI31:
 2899              		.cfi_def_cfa_offset 8
 2900              		.cfi_offset 4, -8
 2901              		.cfi_offset 14, -4
 2902 0016 0C46     		mov	r4, r1
2915:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cc60zarx.s 			page 148


 2903              		.loc 1 2915 0
 2904 0018 044B     		ldr	r3, .L282
 2905 001a 1968     		ldr	r1, [r3]
 2906              	.LVL240:
 2907 001c 1831     		adds	r1, r1, #24
 2908 001e FFF7FEFF 		bl	vListInsert
 2909              	.LVL241:
2917:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2910              		.loc 1 2917 0
 2911 0022 0121     		movs	r1, #1
 2912 0024 2046     		mov	r0, r4
 2913 0026 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2914              	.LVL242:
 2915 002a 10BD     		pop	{r4, pc}
 2916              	.LVL243:
 2917              	.L283:
 2918              		.align	2
 2919              	.L282:
 2920 002c 00000000 		.word	.LANCHOR10
 2921              		.cfi_endproc
 2922              	.LFE27:
 2924              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 2925              		.align	1
 2926              		.global	vTaskPlaceOnUnorderedEventList
 2927              		.syntax unified
 2928              		.thumb
 2929              		.thumb_func
 2930              		.fpu fpv4-sp-d16
 2932              	vTaskPlaceOnUnorderedEventList:
 2933              	.LFB28:
2922:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 2934              		.loc 1 2922 0
 2935              		.cfi_startproc
 2936              		@ args = 0, pretend = 0, frame = 0
 2937              		@ frame_needed = 0, uses_anonymous_args = 0
 2938              	.LVL244:
2923:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2939              		.loc 1 2923 0
 2940 0000 60B1     		cbz	r0, .L291
 2941 0002 0346     		mov	r3, r0
2927:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2942              		.loc 1 2927 0
 2943 0004 1348     		ldr	r0, .L292
 2944              	.LVL245:
 2945 0006 0068     		ldr	r0, [r0]
 2946 0008 88B9     		cbnz	r0, .L287
 2947              	.LBB150:
 2948              	.LBB151:
 195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2949              		.loc 2 195 0
 2950              		.syntax unified
 2951              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2952 000a 4FF01003 			mov r3, #16												
 2953 000e 83F31188 		msr basepri, r3											
 2954 0012 BFF36F8F 		isb														
 2955 0016 BFF34F8F 		dsb														
 2956              	
ARM GAS  /tmp/cc60zarx.s 			page 149


 2957              	@ 0 "" 2
 2958              	.LVL246:
 2959              		.thumb
 2960              		.syntax unified
 2961              	.L288:
 2962 001a FEE7     		b	.L288
 2963              	.LVL247:
 2964              	.L291:
 2965              	.LBE151:
 2966              	.LBE150:
 2967              	.LBB152:
 2968              	.LBB153:
 2969              		.syntax unified
 2970              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2971 001c 4FF01003 			mov r3, #16												
 2972 0020 83F31188 		msr basepri, r3											
 2973 0024 BFF36F8F 		isb														
 2974 0028 BFF34F8F 		dsb														
 2975              	
 2976              	@ 0 "" 2
 2977              	.LVL248:
 2978              		.thumb
 2979              		.syntax unified
 2980              	.L286:
 2981 002c FEE7     		b	.L286
 2982              	.LVL249:
 2983              	.L287:
 2984              	.LBE153:
 2985              	.LBE152:
2922:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 2986              		.loc 1 2922 0
 2987 002e 10B5     		push	{r4, lr}
 2988              	.LCFI32:
 2989              		.cfi_def_cfa_offset 8
 2990              		.cfi_offset 4, -8
 2991              		.cfi_offset 14, -4
 2992 0030 1846     		mov	r0, r3
 2993 0032 1446     		mov	r4, r2
 2994 0034 0B46     		mov	r3, r1
 2995              	.LVL250:
2932:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2996              		.loc 1 2932 0
 2997 0036 084A     		ldr	r2, .L292+4
 2998              	.LVL251:
 2999 0038 1168     		ldr	r1, [r2]
 3000              	.LVL252:
 3001 003a 43F00043 		orr	r3, r3, #-2147483648
 3002              	.LVL253:
 3003 003e 8B61     		str	r3, [r1, #24]
2939:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3004              		.loc 1 2939 0
 3005 0040 1168     		ldr	r1, [r2]
 3006 0042 1831     		adds	r1, r1, #24
 3007 0044 FFF7FEFF 		bl	vListInsertEnd
 3008              	.LVL254:
2941:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3009              		.loc 1 2941 0
ARM GAS  /tmp/cc60zarx.s 			page 150


 3010 0048 0121     		movs	r1, #1
 3011 004a 2046     		mov	r0, r4
 3012 004c FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3013              	.LVL255:
 3014 0050 10BD     		pop	{r4, pc}
 3015              	.LVL256:
 3016              	.L293:
 3017 0052 00BF     		.align	2
 3018              	.L292:
 3019 0054 00000000 		.word	.LANCHOR16
 3020 0058 00000000 		.word	.LANCHOR10
 3021              		.cfi_endproc
 3022              	.LFE28:
 3024              		.section	.text.vTaskPlaceOnEventListRestricted,"ax",%progbits
 3025              		.align	1
 3026              		.global	vTaskPlaceOnEventListRestricted
 3027              		.syntax unified
 3028              		.thumb
 3029              		.thumb_func
 3030              		.fpu fpv4-sp-d16
 3032              	vTaskPlaceOnEventListRestricted:
 3033              	.LFB29:
2948:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxEventList );
 3034              		.loc 1 2948 0
 3035              		.cfi_startproc
 3036              		@ args = 0, pretend = 0, frame = 0
 3037              		@ frame_needed = 0, uses_anonymous_args = 0
 3038              	.LVL257:
 3039 0000 38B5     		push	{r3, r4, r5, lr}
 3040              	.LCFI33:
 3041              		.cfi_def_cfa_offset 16
 3042              		.cfi_offset 3, -16
 3043              		.cfi_offset 4, -12
 3044              		.cfi_offset 5, -8
 3045              		.cfi_offset 14, -4
2949:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3046              		.loc 1 2949 0
 3047 0002 70B1     		cbz	r0, .L300
 3048 0004 0C46     		mov	r4, r1
 3049 0006 1546     		mov	r5, r2
2961:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3050              		.loc 1 2961 0
 3051 0008 0A4A     		ldr	r2, .L301
 3052              	.LVL258:
 3053 000a 1168     		ldr	r1, [r2]
 3054              	.LVL259:
 3055 000c 1831     		adds	r1, r1, #24
 3056 000e FFF7FEFF 		bl	vListInsertEnd
 3057              	.LVL260:
2966:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3058              		.loc 1 2966 0
 3059 0012 0DB1     		cbz	r5, .L297
2968:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3060              		.loc 1 2968 0
 3061 0014 4FF0FF34 		mov	r4, #-1
 3062              	.LVL261:
 3063              	.L297:
ARM GAS  /tmp/cc60zarx.s 			page 151


2972:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3064              		.loc 1 2972 0
 3065 0018 2946     		mov	r1, r5
 3066 001a 2046     		mov	r0, r4
 3067 001c FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3068              	.LVL262:
 3069 0020 38BD     		pop	{r3, r4, r5, pc}
 3070              	.LVL263:
 3071              	.L300:
 3072              	.LBB154:
 3073              	.LBB155:
 195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3074              		.loc 2 195 0
 3075              		.syntax unified
 3076              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3077 0022 4FF01003 			mov r3, #16												
 3078 0026 83F31188 		msr basepri, r3											
 3079 002a BFF36F8F 		isb														
 3080 002e BFF34F8F 		dsb														
 3081              	
 3082              	@ 0 "" 2
 3083              	.LVL264:
 3084              		.thumb
 3085              		.syntax unified
 3086              	.L296:
 3087 0032 FEE7     		b	.L296
 3088              	.L302:
 3089              		.align	2
 3090              	.L301:
 3091 0034 00000000 		.word	.LANCHOR10
 3092              	.LBE155:
 3093              	.LBE154:
 3094              		.cfi_endproc
 3095              	.LFE29:
 3097              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 3098              		.align	1
 3099              		.global	xTaskRemoveFromEventList
 3100              		.syntax unified
 3101              		.thumb
 3102              		.thumb_func
 3103              		.fpu fpv4-sp-d16
 3105              	xTaskRemoveFromEventList:
 3106              	.LFB30:
2979:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
 3107              		.loc 1 2979 0
 3108              		.cfi_startproc
 3109              		@ args = 0, pretend = 0, frame = 0
 3110              		@ frame_needed = 0, uses_anonymous_args = 0
 3111              	.LVL265:
 3112 0000 38B5     		push	{r3, r4, r5, lr}
 3113              	.LCFI34:
 3114              		.cfi_def_cfa_offset 16
 3115              		.cfi_offset 3, -16
 3116              		.cfi_offset 4, -12
 3117              		.cfi_offset 5, -8
 3118              		.cfi_offset 14, -4
2996:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
ARM GAS  /tmp/cc60zarx.s 			page 152


 3119              		.loc 1 2996 0
 3120 0002 C368     		ldr	r3, [r0, #12]
 3121 0004 DC68     		ldr	r4, [r3, #12]
 3122              	.LVL266:
2997:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 3123              		.loc 1 2997 0
 3124 0006 24B3     		cbz	r4, .L311
2998:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3125              		.loc 1 2998 0
 3126 0008 04F11805 		add	r5, r4, #24
 3127 000c 2846     		mov	r0, r5
 3128              	.LVL267:
 3129 000e FFF7FEFF 		bl	uxListRemove
 3130              	.LVL268:
3000:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3131              		.loc 1 3000 0
 3132 0012 184B     		ldr	r3, .L312
 3133 0014 1B68     		ldr	r3, [r3]
 3134 0016 2BBB     		cbnz	r3, .L306
3002:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 3135              		.loc 1 3002 0
 3136 0018 251D     		adds	r5, r4, #4
 3137 001a 2846     		mov	r0, r5
 3138 001c FFF7FEFF 		bl	uxListRemove
 3139              	.LVL269:
3003:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3140              		.loc 1 3003 0
 3141 0020 E36A     		ldr	r3, [r4, #44]
 3142 0022 0122     		movs	r2, #1
 3143 0024 9A40     		lsls	r2, r2, r3
 3144 0026 1449     		ldr	r1, .L312+4
 3145 0028 0868     		ldr	r0, [r1]
 3146 002a 0243     		orrs	r2, r2, r0
 3147 002c 0A60     		str	r2, [r1]
 3148 002e 03EB8303 		add	r3, r3, r3, lsl #2
 3149 0032 9A00     		lsls	r2, r3, #2
 3150 0034 2946     		mov	r1, r5
 3151 0036 1148     		ldr	r0, .L312+8
 3152 0038 1044     		add	r0, r0, r2
 3153 003a FFF7FEFF 		bl	vListInsertEnd
 3154              	.LVL270:
 3155              	.L307:
3012:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3156              		.loc 1 3012 0
 3157 003e E26A     		ldr	r2, [r4, #44]
 3158 0040 0F4B     		ldr	r3, .L312+12
 3159 0042 1B68     		ldr	r3, [r3]
 3160 0044 DB6A     		ldr	r3, [r3, #44]
 3161 0046 9A42     		cmp	r2, r3
 3162 0048 11D9     		bls	.L309
 3163              	.LVL271:
3021:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3164              		.loc 1 3021 0
 3165 004a 0120     		movs	r0, #1
 3166 004c 0D4B     		ldr	r3, .L312+16
 3167 004e 1860     		str	r0, [r3]
 3168 0050 38BD     		pop	{r3, r4, r5, pc}
ARM GAS  /tmp/cc60zarx.s 			page 153


 3169              	.LVL272:
 3170              	.L311:
 3171              	.LBB156:
 3172              	.LBB157:
 195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3173              		.loc 2 195 0
 3174              		.syntax unified
 3175              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3176 0052 4FF01003 			mov r3, #16												
 3177 0056 83F31188 		msr basepri, r3											
 3178 005a BFF36F8F 		isb														
 3179 005e BFF34F8F 		dsb														
 3180              	
 3181              	@ 0 "" 2
 3182              	.LVL273:
 3183              		.thumb
 3184              		.syntax unified
 3185              	.L305:
 3186 0062 FEE7     		b	.L305
 3187              	.LVL274:
 3188              	.L306:
 3189              	.LBE157:
 3190              	.LBE156:
3009:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3191              		.loc 1 3009 0
 3192 0064 2946     		mov	r1, r5
 3193 0066 0848     		ldr	r0, .L312+20
 3194 0068 FFF7FEFF 		bl	vListInsertEnd
 3195              	.LVL275:
 3196 006c E7E7     		b	.L307
 3197              	.L309:
3025:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3198              		.loc 1 3025 0
 3199 006e 0020     		movs	r0, #0
 3200              	.LVL276:
3043:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3201              		.loc 1 3043 0
 3202 0070 38BD     		pop	{r3, r4, r5, pc}
 3203              	.LVL277:
 3204              	.L313:
 3205 0072 00BF     		.align	2
 3206              	.L312:
 3207 0074 00000000 		.word	.LANCHOR16
 3208 0078 00000000 		.word	.LANCHOR13
 3209 007c 00000000 		.word	.LANCHOR4
 3210 0080 00000000 		.word	.LANCHOR10
 3211 0084 00000000 		.word	.LANCHOR20
 3212 0088 00000000 		.word	.LANCHOR1
 3213              		.cfi_endproc
 3214              	.LFE30:
 3216              		.section	.text.vTaskRemoveFromUnorderedEventList,"ax",%progbits
 3217              		.align	1
 3218              		.global	vTaskRemoveFromUnorderedEventList
 3219              		.syntax unified
 3220              		.thumb
 3221              		.thumb_func
 3222              		.fpu fpv4-sp-d16
ARM GAS  /tmp/cc60zarx.s 			page 154


 3224              	vTaskRemoveFromUnorderedEventList:
 3225              	.LFB31:
3047:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
 3226              		.loc 1 3047 0
 3227              		.cfi_startproc
 3228              		@ args = 0, pretend = 0, frame = 0
 3229              		@ frame_needed = 0, uses_anonymous_args = 0
 3230              	.LVL278:
 3231 0000 38B5     		push	{r3, r4, r5, lr}
 3232              	.LCFI35:
 3233              		.cfi_def_cfa_offset 16
 3234              		.cfi_offset 3, -16
 3235              		.cfi_offset 4, -12
 3236              		.cfi_offset 5, -8
 3237              		.cfi_offset 14, -4
3052:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3238              		.loc 1 3052 0
 3239 0002 1C4B     		ldr	r3, .L322
 3240 0004 1B68     		ldr	r3, [r3]
 3241 0006 43B9     		cbnz	r3, .L315
 3242              	.LBB158:
 3243              	.LBB159:
 195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3244              		.loc 2 195 0
 3245              		.syntax unified
 3246              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3247 0008 4FF01003 			mov r3, #16												
 3248 000c 83F31188 		msr basepri, r3											
 3249 0010 BFF36F8F 		isb														
 3250 0014 BFF34F8F 		dsb														
 3251              	
 3252              	@ 0 "" 2
 3253              	.LVL279:
 3254              		.thumb
 3255              		.syntax unified
 3256              	.L316:
 3257 0018 FEE7     		b	.L316
 3258              	.L315:
 3259              	.LBE159:
 3260              	.LBE158:
3055:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3261              		.loc 1 3055 0
 3262 001a 41F00041 		orr	r1, r1, #-2147483648
 3263              	.LVL280:
 3264 001e 0160     		str	r1, [r0]
3059:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3265              		.loc 1 3059 0
 3266 0020 C468     		ldr	r4, [r0, #12]
 3267              	.LVL281:
3060:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 3268              		.loc 1 3060 0
 3269 0022 F4B1     		cbz	r4, .L321
3061:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3270              		.loc 1 3061 0
 3271 0024 FFF7FEFF 		bl	uxListRemove
 3272              	.LVL282:
3066:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
ARM GAS  /tmp/cc60zarx.s 			page 155


 3273              		.loc 1 3066 0
 3274 0028 251D     		adds	r5, r4, #4
 3275 002a 2846     		mov	r0, r5
 3276 002c FFF7FEFF 		bl	uxListRemove
 3277              	.LVL283:
3067:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3278              		.loc 1 3067 0
 3279 0030 E36A     		ldr	r3, [r4, #44]
 3280 0032 0122     		movs	r2, #1
 3281 0034 9A40     		lsls	r2, r2, r3
 3282 0036 1049     		ldr	r1, .L322+4
 3283 0038 0868     		ldr	r0, [r1]
 3284 003a 0243     		orrs	r2, r2, r0
 3285 003c 0A60     		str	r2, [r1]
 3286 003e 03EB8303 		add	r3, r3, r3, lsl #2
 3287 0042 9A00     		lsls	r2, r3, #2
 3288 0044 2946     		mov	r1, r5
 3289 0046 0D48     		ldr	r0, .L322+8
 3290 0048 1044     		add	r0, r0, r2
 3291 004a FFF7FEFF 		bl	vListInsertEnd
 3292              	.LVL284:
3069:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3293              		.loc 1 3069 0
 3294 004e E26A     		ldr	r2, [r4, #44]
 3295 0050 0B4B     		ldr	r3, .L322+12
 3296 0052 1B68     		ldr	r3, [r3]
 3297 0054 DB6A     		ldr	r3, [r3, #44]
 3298 0056 9A42     		cmp	r2, r3
 3299 0058 02D9     		bls	.L314
3075:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3300              		.loc 1 3075 0
 3301 005a 0122     		movs	r2, #1
 3302 005c 094B     		ldr	r3, .L322+16
 3303 005e 1A60     		str	r2, [r3]
 3304              	.L314:
 3305 0060 38BD     		pop	{r3, r4, r5, pc}
 3306              	.LVL285:
 3307              	.L321:
 3308              	.LBB160:
 3309              	.LBB161:
 195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3310              		.loc 2 195 0
 3311              		.syntax unified
 3312              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3313 0062 4FF01003 			mov r3, #16												
 3314 0066 83F31188 		msr basepri, r3											
 3315 006a BFF36F8F 		isb														
 3316 006e BFF34F8F 		dsb														
 3317              	
 3318              	@ 0 "" 2
 3319              	.LVL286:
 3320              		.thumb
 3321              		.syntax unified
 3322              	.L318:
 3323 0072 FEE7     		b	.L318
 3324              	.L323:
 3325              		.align	2
ARM GAS  /tmp/cc60zarx.s 			page 156


 3326              	.L322:
 3327 0074 00000000 		.word	.LANCHOR16
 3328 0078 00000000 		.word	.LANCHOR13
 3329 007c 00000000 		.word	.LANCHOR4
 3330 0080 00000000 		.word	.LANCHOR10
 3331 0084 00000000 		.word	.LANCHOR20
 3332              	.LBE161:
 3333              	.LBE160:
 3334              		.cfi_endproc
 3335              	.LFE31:
 3337              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 3338              		.align	1
 3339              		.global	vTaskSetTimeOutState
 3340              		.syntax unified
 3341              		.thumb
 3342              		.thumb_func
 3343              		.fpu fpv4-sp-d16
 3345              	vTaskSetTimeOutState:
 3346              	.LFB32:
3081:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 3347              		.loc 1 3081 0
 3348              		.cfi_startproc
 3349              		@ args = 0, pretend = 0, frame = 0
 3350              		@ frame_needed = 0, uses_anonymous_args = 0
 3351              	.LVL287:
3082:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 3352              		.loc 1 3082 0
 3353 0000 40B9     		cbnz	r0, .L325
 3354              	.LBB162:
 3355              	.LBB163:
 195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3356              		.loc 2 195 0
 3357              		.syntax unified
 3358              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3359 0002 4FF01003 			mov r3, #16												
 3360 0006 83F31188 		msr basepri, r3											
 3361 000a BFF36F8F 		isb														
 3362 000e BFF34F8F 		dsb														
 3363              	
 3364              	@ 0 "" 2
 3365              	.LVL288:
 3366              		.thumb
 3367              		.syntax unified
 3368              	.L326:
 3369 0012 FEE7     		b	.L326
 3370              	.L325:
 3371              	.LBE163:
 3372              	.LBE162:
3081:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 3373              		.loc 1 3081 0
 3374 0014 10B5     		push	{r4, lr}
 3375              	.LCFI36:
 3376              		.cfi_def_cfa_offset 8
 3377              		.cfi_offset 4, -8
 3378              		.cfi_offset 14, -4
 3379 0016 0446     		mov	r4, r0
3083:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  /tmp/cc60zarx.s 			page 157


 3380              		.loc 1 3083 0
 3381 0018 FFF7FEFF 		bl	vPortEnterCritical
 3382              	.LVL289:
3085:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
 3383              		.loc 1 3085 0
 3384 001c 044B     		ldr	r3, .L329
 3385 001e 1B68     		ldr	r3, [r3]
 3386 0020 2360     		str	r3, [r4]
3086:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3387              		.loc 1 3086 0
 3388 0022 044B     		ldr	r3, .L329+4
 3389 0024 1B68     		ldr	r3, [r3]
 3390 0026 6360     		str	r3, [r4, #4]
3088:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3391              		.loc 1 3088 0
 3392 0028 FFF7FEFF 		bl	vPortExitCritical
 3393              	.LVL290:
 3394 002c 10BD     		pop	{r4, pc}
 3395              	.LVL291:
 3396              	.L330:
 3397 002e 00BF     		.align	2
 3398              	.L329:
 3399 0030 00000000 		.word	.LANCHOR18
 3400 0034 00000000 		.word	.LANCHOR15
 3401              		.cfi_endproc
 3402              	.LFE32:
 3404              		.section	.text.vTaskInternalSetTimeOutState,"ax",%progbits
 3405              		.align	1
 3406              		.global	vTaskInternalSetTimeOutState
 3407              		.syntax unified
 3408              		.thumb
 3409              		.thumb_func
 3410              		.fpu fpv4-sp-d16
 3412              	vTaskInternalSetTimeOutState:
 3413              	.LFB33:
3093:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* For internal use only as it does not use a critical section. */
 3414              		.loc 1 3093 0
 3415              		.cfi_startproc
 3416              		@ args = 0, pretend = 0, frame = 0
 3417              		@ frame_needed = 0, uses_anonymous_args = 0
 3418              		@ link register save eliminated.
 3419              	.LVL292:
3095:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 3420              		.loc 1 3095 0
 3421 0000 034B     		ldr	r3, .L332
 3422 0002 1B68     		ldr	r3, [r3]
 3423 0004 0360     		str	r3, [r0]
3096:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3424              		.loc 1 3096 0
 3425 0006 034B     		ldr	r3, .L332+4
 3426 0008 1B68     		ldr	r3, [r3]
 3427 000a 4360     		str	r3, [r0, #4]
 3428 000c 7047     		bx	lr
 3429              	.L333:
 3430 000e 00BF     		.align	2
 3431              	.L332:
 3432 0010 00000000 		.word	.LANCHOR18
ARM GAS  /tmp/cc60zarx.s 			page 158


 3433 0014 00000000 		.word	.LANCHOR15
 3434              		.cfi_endproc
 3435              	.LFE33:
 3437              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 3438              		.align	1
 3439              		.global	xTaskCheckForTimeOut
 3440              		.syntax unified
 3441              		.thumb
 3442              		.thumb_func
 3443              		.fpu fpv4-sp-d16
 3445              	xTaskCheckForTimeOut:
 3446              	.LFB34:
3101:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
 3447              		.loc 1 3101 0
 3448              		.cfi_startproc
 3449              		@ args = 0, pretend = 0, frame = 0
 3450              		@ frame_needed = 0, uses_anonymous_args = 0
 3451              	.LVL293:
 3452 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3453              	.LCFI37:
 3454              		.cfi_def_cfa_offset 24
 3455              		.cfi_offset 3, -24
 3456              		.cfi_offset 4, -20
 3457              		.cfi_offset 5, -16
 3458              		.cfi_offset 6, -12
 3459              		.cfi_offset 7, -8
 3460              		.cfi_offset 14, -4
3104:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
 3461              		.loc 1 3104 0
 3462 0002 E0B1     		cbz	r0, .L345
 3463 0004 0546     		mov	r5, r0
3105:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3464              		.loc 1 3105 0
 3465 0006 19B3     		cbz	r1, .L346
 3466 0008 0C46     		mov	r4, r1
3107:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3467              		.loc 1 3107 0
 3468 000a FFF7FEFF 		bl	vPortEnterCritical
 3469              	.LVL294:
 3470              	.LBB164:
3110:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 3471              		.loc 1 3110 0
 3472 000e 1A4B     		ldr	r3, .L348
 3473 0010 1868     		ldr	r0, [r3]
 3474              	.LVL295:
3111:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3475              		.loc 1 3111 0
 3476 0012 6968     		ldr	r1, [r5, #4]
 3477 0014 421A     		subs	r2, r0, r1
 3478              	.LVL296:
3125:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3479              		.loc 1 3125 0
 3480 0016 2368     		ldr	r3, [r4]
 3481 0018 B3F1FF3F 		cmp	r3, #-1
 3482 001c 28D0     		beq	.L342
3135:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3483              		.loc 1 3135 0
ARM GAS  /tmp/cc60zarx.s 			page 159


 3484 001e 2F68     		ldr	r7, [r5]
 3485 0020 164E     		ldr	r6, .L348+4
 3486 0022 3668     		ldr	r6, [r6]
 3487 0024 B742     		cmp	r7, r6
 3488 0026 01D0     		beq	.L340
3135:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3489              		.loc 1 3135 0 is_stmt 0 discriminator 1
 3490 0028 8842     		cmp	r0, r1
 3491 002a 23D2     		bcs	.L343
 3492              	.L340:
3144:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3493              		.loc 1 3144 0 is_stmt 1
 3494 002c 9A42     		cmp	r2, r3
 3495 002e 18D3     		bcc	.L347
3153:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
 3496              		.loc 1 3153 0
 3497 0030 0023     		movs	r3, #0
 3498 0032 2360     		str	r3, [r4]
 3499              	.LVL297:
3154:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3500              		.loc 1 3154 0
 3501 0034 0124     		movs	r4, #1
 3502              	.LVL298:
 3503              	.L339:
 3504              	.LBE164:
3157:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3505              		.loc 1 3157 0
 3506 0036 FFF7FEFF 		bl	vPortExitCritical
 3507              	.LVL299:
3160:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3508              		.loc 1 3160 0
 3509 003a 2046     		mov	r0, r4
 3510 003c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3511              	.LVL300:
 3512              	.L345:
 3513              	.LBB165:
 3514              	.LBB166:
 195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3515              		.loc 2 195 0
 3516              		.syntax unified
 3517              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3518 003e 4FF01003 			mov r3, #16												
 3519 0042 83F31188 		msr basepri, r3											
 3520 0046 BFF36F8F 		isb														
 3521 004a BFF34F8F 		dsb														
 3522              	
 3523              	@ 0 "" 2
 3524              	.LVL301:
 3525              		.thumb
 3526              		.syntax unified
 3527              	.L336:
 3528 004e FEE7     		b	.L336
 3529              	.L346:
 3530              	.LBE166:
 3531              	.LBE165:
 3532              	.LBB167:
 3533              	.LBB168:
ARM GAS  /tmp/cc60zarx.s 			page 160


 3534              		.syntax unified
 3535              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3536 0050 4FF01003 			mov r3, #16												
 3537 0054 83F31188 		msr basepri, r3											
 3538 0058 BFF36F8F 		isb														
 3539 005c BFF34F8F 		dsb														
 3540              	
 3541              	@ 0 "" 2
 3542              	.LVL302:
 3543              		.thumb
 3544              		.syntax unified
 3545              	.L338:
 3546 0060 FEE7     		b	.L338
 3547              	.LVL303:
 3548              	.L347:
 3549              	.LBE168:
 3550              	.LBE167:
 3551              	.LBB169:
3147:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
 3552              		.loc 1 3147 0
 3553 0062 9B1A     		subs	r3, r3, r2
 3554 0064 2360     		str	r3, [r4]
3148:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFALSE;
 3555              		.loc 1 3148 0
 3556 0066 2846     		mov	r0, r5
 3557              	.LVL304:
 3558 0068 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 3559              	.LVL305:
3149:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3560              		.loc 1 3149 0
 3561 006c 0024     		movs	r4, #0
 3562              	.LVL306:
 3563 006e E2E7     		b	.L339
 3564              	.LVL307:
 3565              	.L342:
3130:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3566              		.loc 1 3130 0
 3567 0070 0024     		movs	r4, #0
 3568              	.LVL308:
 3569 0072 E0E7     		b	.L339
 3570              	.LVL309:
 3571              	.L343:
3142:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3572              		.loc 1 3142 0
 3573 0074 0124     		movs	r4, #1
 3574              	.LVL310:
 3575 0076 DEE7     		b	.L339
 3576              	.L349:
 3577              		.align	2
 3578              	.L348:
 3579 0078 00000000 		.word	.LANCHOR15
 3580 007c 00000000 		.word	.LANCHOR18
 3581              	.LBE169:
 3582              		.cfi_endproc
 3583              	.LFE34:
 3585              		.section	.text.vTaskMissedYield,"ax",%progbits
 3586              		.align	1
ARM GAS  /tmp/cc60zarx.s 			page 161


 3587              		.global	vTaskMissedYield
 3588              		.syntax unified
 3589              		.thumb
 3590              		.thumb_func
 3591              		.fpu fpv4-sp-d16
 3593              	vTaskMissedYield:
 3594              	.LFB35:
3164:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xYieldPending = pdTRUE;
 3595              		.loc 1 3164 0
 3596              		.cfi_startproc
 3597              		@ args = 0, pretend = 0, frame = 0
 3598              		@ frame_needed = 0, uses_anonymous_args = 0
 3599              		@ link register save eliminated.
3165:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3600              		.loc 1 3165 0
 3601 0000 0122     		movs	r2, #1
 3602 0002 014B     		ldr	r3, .L351
 3603 0004 1A60     		str	r2, [r3]
 3604 0006 7047     		bx	lr
 3605              	.L352:
 3606              		.align	2
 3607              	.L351:
 3608 0008 00000000 		.word	.LANCHOR20
 3609              		.cfi_endproc
 3610              	.LFE35:
 3612              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 3613              		.align	1
 3614              		.global	xTaskGetCurrentTaskHandle
 3615              		.syntax unified
 3616              		.thumb
 3617              		.thumb_func
 3618              		.fpu fpv4-sp-d16
 3620              	xTaskGetCurrentTaskHandle:
 3621              	.LFB41:
3751:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
 3622              		.loc 1 3751 0
 3623              		.cfi_startproc
 3624              		@ args = 0, pretend = 0, frame = 0
 3625              		@ frame_needed = 0, uses_anonymous_args = 0
 3626              		@ link register save eliminated.
3757:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3627              		.loc 1 3757 0
 3628 0000 014B     		ldr	r3, .L354
 3629 0002 1868     		ldr	r0, [r3]
 3630              	.LVL311:
3760:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3631              		.loc 1 3760 0
 3632 0004 7047     		bx	lr
 3633              	.L355:
 3634 0006 00BF     		.align	2
 3635              	.L354:
 3636 0008 00000000 		.word	.LANCHOR10
 3637              		.cfi_endproc
 3638              	.LFE41:
 3640              		.section	.text.xTaskGetSchedulerState,"ax",%progbits
 3641              		.align	1
 3642              		.global	xTaskGetSchedulerState
ARM GAS  /tmp/cc60zarx.s 			page 162


 3643              		.syntax unified
 3644              		.thumb
 3645              		.thumb_func
 3646              		.fpu fpv4-sp-d16
 3648              	xTaskGetSchedulerState:
 3649              	.LFB42:
3768:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 3650              		.loc 1 3768 0
 3651              		.cfi_startproc
 3652              		@ args = 0, pretend = 0, frame = 0
 3653              		@ frame_needed = 0, uses_anonymous_args = 0
 3654              		@ link register save eliminated.
3771:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3655              		.loc 1 3771 0
 3656 0000 054B     		ldr	r3, .L360
 3657 0002 1B68     		ldr	r3, [r3]
 3658 0004 23B1     		cbz	r3, .L358
3777:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3659              		.loc 1 3777 0
 3660 0006 054B     		ldr	r3, .L360+4
 3661 0008 1B68     		ldr	r3, [r3]
 3662 000a 1BB9     		cbnz	r3, .L359
3779:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3663              		.loc 1 3779 0
 3664 000c 0220     		movs	r0, #2
 3665 000e 7047     		bx	lr
 3666              	.L358:
3773:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3667              		.loc 1 3773 0
 3668 0010 0120     		movs	r0, #1
 3669 0012 7047     		bx	lr
 3670              	.L359:
3783:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3671              		.loc 1 3783 0
 3672 0014 0020     		movs	r0, #0
 3673              	.LVL312:
3788:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3674              		.loc 1 3788 0
 3675 0016 7047     		bx	lr
 3676              	.L361:
 3677              		.align	2
 3678              	.L360:
 3679 0018 00000000 		.word	.LANCHOR11
 3680 001c 00000000 		.word	.LANCHOR16
 3681              		.cfi_endproc
 3682              	.LFE42:
 3684              		.section	.text.xTaskPriorityInherit,"ax",%progbits
 3685              		.align	1
 3686              		.global	xTaskPriorityInherit
 3687              		.syntax unified
 3688              		.thumb
 3689              		.thumb_func
 3690              		.fpu fpv4-sp-d16
 3692              	xTaskPriorityInherit:
 3693              	.LFB43:
3796:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 3694              		.loc 1 3796 0
ARM GAS  /tmp/cc60zarx.s 			page 163


 3695              		.cfi_startproc
 3696              		@ args = 0, pretend = 0, frame = 0
 3697              		@ frame_needed = 0, uses_anonymous_args = 0
 3698              	.LVL313:
3803:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3699              		.loc 1 3803 0
 3700 0000 0028     		cmp	r0, #0
 3701 0002 54D0     		beq	.L369
3796:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 3702              		.loc 1 3796 0
 3703 0004 38B5     		push	{r3, r4, r5, lr}
 3704              	.LCFI38:
 3705              		.cfi_def_cfa_offset 16
 3706              		.cfi_offset 3, -16
 3707              		.cfi_offset 4, -12
 3708              		.cfi_offset 5, -8
 3709              		.cfi_offset 14, -4
 3710 0006 0446     		mov	r4, r0
3808:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3711              		.loc 1 3808 0
 3712 0008 C26A     		ldr	r2, [r0, #44]
 3713 000a 2A49     		ldr	r1, .L379
 3714 000c 0968     		ldr	r1, [r1]
 3715 000e C96A     		ldr	r1, [r1, #44]
 3716 0010 8A42     		cmp	r2, r1
 3717 0012 42D2     		bcs	.L364
3813:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3718              		.loc 1 3813 0
 3719 0014 8169     		ldr	r1, [r0, #24]
 3720 0016 0029     		cmp	r1, #0
 3721 0018 05DB     		blt	.L365
3815:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3722              		.loc 1 3815 0
 3723 001a 2649     		ldr	r1, .L379
 3724 001c 0968     		ldr	r1, [r1]
 3725 001e C96A     		ldr	r1, [r1, #44]
 3726 0020 C1F10701 		rsb	r1, r1, #7
 3727 0024 8161     		str	r1, [r0, #24]
 3728              	.L365:
3824:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3729              		.loc 1 3824 0
 3730 0026 6069     		ldr	r0, [r4, #20]
 3731              	.LVL314:
 3732 0028 02EB8202 		add	r2, r2, r2, lsl #2
 3733 002c 9100     		lsls	r1, r2, #2
 3734 002e 224A     		ldr	r2, .L379+4
 3735 0030 0A44     		add	r2, r2, r1
 3736 0032 9042     		cmp	r0, r2
 3737 0034 07D0     		beq	.L376
 3738 0036 0022     		movs	r2, #0
 3739              	.L366:
3824:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3740              		.loc 1 3824 0 is_stmt 0 discriminator 4
 3741 0038 3AB9     		cbnz	r2, .L377
3842:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3742              		.loc 1 3842 0 is_stmt 1
 3743 003a 1E4A     		ldr	r2, .L379
ARM GAS  /tmp/cc60zarx.s 			page 164


 3744 003c 1268     		ldr	r2, [r2]
 3745 003e D26A     		ldr	r2, [r2, #44]
 3746 0040 E262     		str	r2, [r4, #44]
3848:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3747              		.loc 1 3848 0
 3748 0042 0120     		movs	r0, #1
 3749 0044 38BD     		pop	{r3, r4, r5, pc}
 3750              	.LVL315:
 3751              	.L376:
3824:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3752              		.loc 1 3824 0
 3753 0046 0122     		movs	r2, #1
 3754 0048 F6E7     		b	.L366
 3755              	.L377:
3826:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 3756              		.loc 1 3826 0
 3757 004a 251D     		adds	r5, r4, #4
 3758 004c 2846     		mov	r0, r5
 3759 004e FFF7FEFF 		bl	uxListRemove
 3760              	.LVL316:
 3761 0052 68B9     		cbnz	r0, .L368
3828:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 3762              		.loc 1 3828 0
 3763 0054 E36A     		ldr	r3, [r4, #44]
 3764 0056 03EB8301 		add	r1, r3, r3, lsl #2
 3765 005a 8A00     		lsls	r2, r1, #2
 3766 005c 1649     		ldr	r1, .L379+4
 3767 005e 8A58     		ldr	r2, [r1, r2]
 3768 0060 32B9     		cbnz	r2, .L368
3828:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 3769              		.loc 1 3828 0 is_stmt 0 discriminator 1
 3770 0062 0122     		movs	r2, #1
 3771 0064 9A40     		lsls	r2, r2, r3
 3772 0066 1549     		ldr	r1, .L379+8
 3773 0068 0B68     		ldr	r3, [r1]
 3774 006a 23EA0203 		bic	r3, r3, r2
 3775 006e 0B60     		str	r3, [r1]
 3776              	.L368:
3836:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
 3777              		.loc 1 3836 0 is_stmt 1
 3778 0070 104B     		ldr	r3, .L379
 3779 0072 1B68     		ldr	r3, [r3]
 3780 0074 DB6A     		ldr	r3, [r3, #44]
 3781 0076 E362     		str	r3, [r4, #44]
3837:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3782              		.loc 1 3837 0
 3783 0078 0124     		movs	r4, #1
 3784              	.LVL317:
 3785 007a 04FA03F2 		lsl	r2, r4, r3
 3786 007e 0F49     		ldr	r1, .L379+8
 3787 0080 0868     		ldr	r0, [r1]
 3788 0082 0243     		orrs	r2, r2, r0
 3789 0084 0A60     		str	r2, [r1]
 3790 0086 03EB8303 		add	r3, r3, r3, lsl #2
 3791 008a 9A00     		lsls	r2, r3, #2
 3792 008c 2946     		mov	r1, r5
 3793 008e 0A48     		ldr	r0, .L379+4
ARM GAS  /tmp/cc60zarx.s 			page 165


 3794 0090 1044     		add	r0, r0, r2
 3795 0092 FFF7FEFF 		bl	vListInsertEnd
 3796              	.LVL318:
3848:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3797              		.loc 1 3848 0
 3798 0096 2046     		mov	r0, r4
 3799 0098 38BD     		pop	{r3, r4, r5, pc}
 3800              	.LVL319:
 3801              	.L364:
3852:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3802              		.loc 1 3852 0
 3803 009a 426C     		ldr	r2, [r0, #68]
 3804 009c 054B     		ldr	r3, .L379
 3805 009e 1B68     		ldr	r3, [r3]
 3806 00a0 DB6A     		ldr	r3, [r3, #44]
 3807 00a2 9A42     		cmp	r2, r3
 3808 00a4 01D2     		bcs	.L378
3861:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3809              		.loc 1 3861 0
 3810 00a6 0120     		movs	r0, #1
 3811              	.LVL320:
3875:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3812              		.loc 1 3875 0
 3813 00a8 38BD     		pop	{r3, r4, r5, pc}
 3814              	.LVL321:
 3815              	.L378:
3798:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3816              		.loc 1 3798 0
 3817 00aa 0020     		movs	r0, #0
 3818              	.LVL322:
 3819 00ac 38BD     		pop	{r3, r4, r5, pc}
 3820              	.LVL323:
 3821              	.L369:
 3822              	.LCFI39:
 3823              		.cfi_def_cfa_offset 0
 3824              		.cfi_restore 3
 3825              		.cfi_restore 4
 3826              		.cfi_restore 5
 3827              		.cfi_restore 14
 3828 00ae 0020     		movs	r0, #0
 3829              	.LVL324:
 3830 00b0 7047     		bx	lr
 3831              	.L380:
 3832 00b2 00BF     		.align	2
 3833              	.L379:
 3834 00b4 00000000 		.word	.LANCHOR10
 3835 00b8 00000000 		.word	.LANCHOR4
 3836 00bc 00000000 		.word	.LANCHOR13
 3837              		.cfi_endproc
 3838              	.LFE43:
 3840              		.section	.text.xTaskPriorityDisinherit,"ax",%progbits
 3841              		.align	1
 3842              		.global	xTaskPriorityDisinherit
 3843              		.syntax unified
 3844              		.thumb
 3845              		.thumb_func
 3846              		.fpu fpv4-sp-d16
ARM GAS  /tmp/cc60zarx.s 			page 166


 3848              	xTaskPriorityDisinherit:
 3849              	.LFB44:
3883:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 3850              		.loc 1 3883 0
 3851              		.cfi_startproc
 3852              		@ args = 0, pretend = 0, frame = 0
 3853              		@ frame_needed = 0, uses_anonymous_args = 0
 3854              	.LVL325:
3887:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3855              		.loc 1 3887 0
 3856 0000 0028     		cmp	r0, #0
 3857 0002 4AD0     		beq	.L388
3883:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 3858              		.loc 1 3883 0
 3859 0004 38B5     		push	{r3, r4, r5, lr}
 3860              	.LCFI40:
 3861              		.cfi_def_cfa_offset 16
 3862              		.cfi_offset 3, -16
 3863              		.cfi_offset 4, -12
 3864              		.cfi_offset 5, -8
 3865              		.cfi_offset 14, -4
 3866 0006 0446     		mov	r4, r0
3893:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 3867              		.loc 1 3893 0
 3868 0008 274A     		ldr	r2, .L395
 3869 000a 1268     		ldr	r2, [r2]
 3870 000c 9042     		cmp	r0, r2
 3871 000e 08D0     		beq	.L383
 3872              	.LBB170:
 3873              	.LBB171:
 195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3874              		.loc 2 195 0
 3875              		.syntax unified
 3876              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3877 0010 4FF01003 			mov r3, #16												
 3878 0014 83F31188 		msr basepri, r3											
 3879 0018 BFF36F8F 		isb														
 3880 001c BFF34F8F 		dsb														
 3881              	
 3882              	@ 0 "" 2
 3883              	.LVL326:
 3884              		.thumb
 3885              		.syntax unified
 3886              	.L384:
 3887 0020 FEE7     		b	.L384
 3888              	.L383:
 3889              	.LBE171:
 3890              	.LBE170:
3894:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 3891              		.loc 1 3894 0
 3892 0022 826C     		ldr	r2, [r0, #72]
 3893 0024 42B9     		cbnz	r2, .L385
 3894              	.LBB172:
 3895              	.LBB173:
 195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3896              		.loc 2 195 0
 3897              		.syntax unified
ARM GAS  /tmp/cc60zarx.s 			page 167


 3898              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3899 0026 4FF01003 			mov r3, #16												
 3900 002a 83F31188 		msr basepri, r3											
 3901 002e BFF36F8F 		isb														
 3902 0032 BFF34F8F 		dsb														
 3903              	
 3904              	@ 0 "" 2
 3905              	.LVL327:
 3906              		.thumb
 3907              		.syntax unified
 3908              	.L386:
 3909 0036 FEE7     		b	.L386
 3910              	.L385:
 3911              	.LBE173:
 3912              	.LBE172:
3895:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3913              		.loc 1 3895 0
 3914 0038 013A     		subs	r2, r2, #1
 3915 003a 8264     		str	r2, [r0, #72]
3899:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3916              		.loc 1 3899 0
 3917 003c C06A     		ldr	r0, [r0, #44]
 3918              	.LVL328:
 3919 003e 616C     		ldr	r1, [r4, #68]
 3920 0040 8842     		cmp	r0, r1
 3921 0042 2CD0     		beq	.L389
3902:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3922              		.loc 1 3902 0
 3923 0044 6ABB     		cbnz	r2, .L390
3909:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 3924              		.loc 1 3909 0
 3925 0046 251D     		adds	r5, r4, #4
 3926 0048 2846     		mov	r0, r5
 3927 004a FFF7FEFF 		bl	uxListRemove
 3928              	.LVL329:
 3929 004e 70B9     		cbnz	r0, .L387
3911:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 3930              		.loc 1 3911 0
 3931 0050 E26A     		ldr	r2, [r4, #44]
 3932 0052 02EB8201 		add	r1, r2, r2, lsl #2
 3933 0056 8B00     		lsls	r3, r1, #2
 3934 0058 1449     		ldr	r1, .L395+4
 3935 005a CB58     		ldr	r3, [r1, r3]
 3936 005c 3BB9     		cbnz	r3, .L387
3911:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 3937              		.loc 1 3911 0 is_stmt 0 discriminator 1
 3938 005e 0123     		movs	r3, #1
 3939 0060 03FA02F2 		lsl	r2, r3, r2
 3940 0064 1249     		ldr	r1, .L395+8
 3941 0066 0B68     		ldr	r3, [r1]
 3942 0068 23EA0203 		bic	r3, r3, r2
 3943 006c 0B60     		str	r3, [r1]
 3944              	.L387:
3921:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3945              		.loc 1 3921 0 is_stmt 1
 3946 006e 636C     		ldr	r3, [r4, #68]
 3947 0070 E362     		str	r3, [r4, #44]
ARM GAS  /tmp/cc60zarx.s 			page 168


3926:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 3948              		.loc 1 3926 0
 3949 0072 C3F10702 		rsb	r2, r3, #7
 3950 0076 A261     		str	r2, [r4, #24]
3927:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3951              		.loc 1 3927 0
 3952 0078 0124     		movs	r4, #1
 3953              	.LVL330:
 3954 007a 04FA03F2 		lsl	r2, r4, r3
 3955 007e 0C49     		ldr	r1, .L395+8
 3956 0080 0868     		ldr	r0, [r1]
 3957 0082 0243     		orrs	r2, r2, r0
 3958 0084 0A60     		str	r2, [r1]
 3959 0086 03EB8303 		add	r3, r3, r3, lsl #2
 3960 008a 9A00     		lsls	r2, r3, #2
 3961 008c 2946     		mov	r1, r5
 3962 008e 0748     		ldr	r0, .L395+4
 3963 0090 1044     		add	r0, r0, r2
 3964 0092 FFF7FEFF 		bl	vListInsertEnd
 3965              	.LVL331:
3937:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3966              		.loc 1 3937 0
 3967 0096 2046     		mov	r0, r4
 3968 0098 38BD     		pop	{r3, r4, r5, pc}
 3969              	.LVL332:
 3970              	.L388:
 3971              	.LCFI41:
 3972              		.cfi_def_cfa_offset 0
 3973              		.cfi_restore 3
 3974              		.cfi_restore 4
 3975              		.cfi_restore 5
 3976              		.cfi_restore 14
3885:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3977              		.loc 1 3885 0
 3978 009a 0020     		movs	r0, #0
 3979              	.LVL333:
 3980 009c 7047     		bx	lr
 3981              	.LVL334:
 3982              	.L389:
 3983              	.LCFI42:
 3984              		.cfi_def_cfa_offset 16
 3985              		.cfi_offset 3, -16
 3986              		.cfi_offset 4, -12
 3987              		.cfi_offset 5, -8
 3988              		.cfi_offset 14, -4
 3989 009e 0020     		movs	r0, #0
 3990 00a0 38BD     		pop	{r3, r4, r5, pc}
 3991              	.LVL335:
 3992              	.L390:
 3993 00a2 0020     		movs	r0, #0
3955:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3994              		.loc 1 3955 0
 3995 00a4 38BD     		pop	{r3, r4, r5, pc}
 3996              	.LVL336:
 3997              	.L396:
 3998 00a6 00BF     		.align	2
 3999              	.L395:
ARM GAS  /tmp/cc60zarx.s 			page 169


 4000 00a8 00000000 		.word	.LANCHOR10
 4001 00ac 00000000 		.word	.LANCHOR4
 4002 00b0 00000000 		.word	.LANCHOR13
 4003              		.cfi_endproc
 4004              	.LFE44:
 4006              		.section	.text.vTaskPriorityDisinheritAfterTimeout,"ax",%progbits
 4007              		.align	1
 4008              		.global	vTaskPriorityDisinheritAfterTimeout
 4009              		.syntax unified
 4010              		.thumb
 4011              		.thumb_func
 4012              		.fpu fpv4-sp-d16
 4014              	vTaskPriorityDisinheritAfterTimeout:
 4015              	.LFB45:
3963:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 4016              		.loc 1 3963 0
 4017              		.cfi_startproc
 4018              		@ args = 0, pretend = 0, frame = 0
 4019              		@ frame_needed = 0, uses_anonymous_args = 0
 4020              	.LVL337:
3968:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4021              		.loc 1 3968 0
 4022 0000 0028     		cmp	r0, #0
 4023 0002 5BD0     		beq	.L409
3963:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 4024              		.loc 1 3963 0
 4025 0004 38B5     		push	{r3, r4, r5, lr}
 4026              	.LCFI43:
 4027              		.cfi_def_cfa_offset 16
 4028              		.cfi_offset 3, -16
 4029              		.cfi_offset 4, -12
 4030              		.cfi_offset 5, -8
 4031              		.cfi_offset 14, -4
 4032 0006 0446     		mov	r4, r0
3972:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4033              		.loc 1 3972 0
 4034 0008 806C     		ldr	r0, [r0, #72]
 4035              	.LVL338:
 4036 000a 40B9     		cbnz	r0, .L399
 4037              	.LBB174:
 4038              	.LBB175:
 195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4039              		.loc 2 195 0
 4040              		.syntax unified
 4041              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4042 000c 4FF01003 			mov r3, #16												
 4043 0010 83F31188 		msr basepri, r3											
 4044 0014 BFF36F8F 		isb														
 4045 0018 BFF34F8F 		dsb														
 4046              	
 4047              	@ 0 "" 2
 4048              	.LVL339:
 4049              		.thumb
 4050              		.syntax unified
 4051              	.L400:
 4052 001c FEE7     		b	.L400
 4053              	.L399:
ARM GAS  /tmp/cc60zarx.s 			page 170


 4054              	.LBE175:
 4055              	.LBE174:
3978:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4056              		.loc 1 3978 0
 4057 001e 626C     		ldr	r2, [r4, #68]
 4058 0020 8A42     		cmp	r2, r1
 4059 0022 00D2     		bcs	.L401
3980:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4060              		.loc 1 3980 0
 4061 0024 0A46     		mov	r2, r1
 4062              	.L401:
 4063              	.LVL340:
3988:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4064              		.loc 1 3988 0
 4065 0026 E16A     		ldr	r1, [r4, #44]
 4066              	.LVL341:
 4067 0028 8A42     		cmp	r2, r1
 4068 002a 01D0     		beq	.L397
3994:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4069              		.loc 1 3994 0
 4070 002c 0128     		cmp	r0, #1
 4071 002e 00D0     		beq	.L412
 4072              	.LVL342:
 4073              	.L397:
 4074 0030 38BD     		pop	{r3, r4, r5, pc}
 4075              	.LVL343:
 4076              	.L412:
3999:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4077              		.loc 1 3999 0
 4078 0032 2348     		ldr	r0, .L413
 4079 0034 0068     		ldr	r0, [r0]
 4080 0036 8442     		cmp	r4, r0
 4081 0038 08D1     		bne	.L402
 4082              	.LBB176:
 4083              	.LBB177:
 195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4084              		.loc 2 195 0
 4085              		.syntax unified
 4086              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4087 003a 4FF01003 			mov r3, #16												
 4088 003e 83F31188 		msr basepri, r3											
 4089 0042 BFF36F8F 		isb														
 4090 0046 BFF34F8F 		dsb														
 4091              	
 4092              	@ 0 "" 2
 4093              	.LVL344:
 4094              		.thumb
 4095              		.syntax unified
 4096              	.L403:
 4097 004a FEE7     		b	.L403
 4098              	.L402:
 4099              	.LVL345:
 4100              	.LBE177:
 4101              	.LBE176:
4006:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4102              		.loc 1 4006 0
 4103 004c E262     		str	r2, [r4, #44]
ARM GAS  /tmp/cc60zarx.s 			page 171


4010:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4104              		.loc 1 4010 0
 4105 004e A069     		ldr	r0, [r4, #24]
 4106 0050 0028     		cmp	r0, #0
 4107 0052 02DB     		blt	.L404
4012:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4108              		.loc 1 4012 0
 4109 0054 C2F10702 		rsb	r2, r2, #7
 4110              	.LVL346:
 4111 0058 A261     		str	r2, [r4, #24]
 4112              	.L404:
4025:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4113              		.loc 1 4025 0
 4114 005a 6369     		ldr	r3, [r4, #20]
 4115 005c 01EB8101 		add	r1, r1, r1, lsl #2
 4116              	.LVL347:
 4117 0060 8800     		lsls	r0, r1, #2
 4118 0062 184A     		ldr	r2, .L413+4
 4119 0064 0244     		add	r2, r2, r0
 4120 0066 9342     		cmp	r3, r2
 4121 0068 26D1     		bne	.L407
 4122 006a 0122     		movs	r2, #1
 4123              	.L405:
4025:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4124              		.loc 1 4025 0 is_stmt 0 discriminator 4
 4125 006c 002A     		cmp	r2, #0
 4126 006e DFD0     		beq	.L397
4027:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
 4127              		.loc 1 4027 0 is_stmt 1
 4128 0070 251D     		adds	r5, r4, #4
 4129 0072 2846     		mov	r0, r5
 4130 0074 FFF7FEFF 		bl	uxListRemove
 4131              	.LVL348:
 4132 0078 70B9     		cbnz	r0, .L406
4029:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
 4133              		.loc 1 4029 0
 4134 007a E26A     		ldr	r2, [r4, #44]
 4135 007c 02EB8201 		add	r1, r2, r2, lsl #2
 4136 0080 8B00     		lsls	r3, r1, #2
 4137 0082 1049     		ldr	r1, .L413+4
 4138 0084 CB58     		ldr	r3, [r1, r3]
 4139 0086 3BB9     		cbnz	r3, .L406
4029:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
 4140              		.loc 1 4029 0 is_stmt 0 discriminator 1
 4141 0088 0123     		movs	r3, #1
 4142 008a 03FA02F2 		lsl	r2, r3, r2
 4143 008e 0E49     		ldr	r1, .L413+8
 4144 0090 0B68     		ldr	r3, [r1]
 4145 0092 23EA0203 		bic	r3, r3, r2
 4146 0096 0B60     		str	r3, [r1]
 4147              	.L406:
4036:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4148              		.loc 1 4036 0 is_stmt 1
 4149 0098 E36A     		ldr	r3, [r4, #44]
 4150 009a 0122     		movs	r2, #1
 4151 009c 9A40     		lsls	r2, r2, r3
 4152 009e 0A49     		ldr	r1, .L413+8
ARM GAS  /tmp/cc60zarx.s 			page 172


 4153 00a0 0868     		ldr	r0, [r1]
 4154 00a2 0243     		orrs	r2, r2, r0
 4155 00a4 0A60     		str	r2, [r1]
 4156 00a6 03EB8303 		add	r3, r3, r3, lsl #2
 4157 00aa 9A00     		lsls	r2, r3, #2
 4158 00ac 2946     		mov	r1, r5
 4159 00ae 0548     		ldr	r0, .L413+4
 4160 00b0 1044     		add	r0, r0, r2
 4161 00b2 FFF7FEFF 		bl	vListInsertEnd
 4162              	.LVL349:
4057:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4163              		.loc 1 4057 0
 4164 00b6 BBE7     		b	.L397
 4165              	.LVL350:
 4166              	.L407:
4025:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4167              		.loc 1 4025 0
 4168 00b8 0022     		movs	r2, #0
 4169 00ba D7E7     		b	.L405
 4170              	.LVL351:
 4171              	.L409:
 4172              	.LCFI44:
 4173              		.cfi_def_cfa_offset 0
 4174              		.cfi_restore 3
 4175              		.cfi_restore 4
 4176              		.cfi_restore 5
 4177              		.cfi_restore 14
 4178 00bc 7047     		bx	lr
 4179              	.L414:
 4180 00be 00BF     		.align	2
 4181              	.L413:
 4182 00c0 00000000 		.word	.LANCHOR10
 4183 00c4 00000000 		.word	.LANCHOR4
 4184 00c8 00000000 		.word	.LANCHOR13
 4185              		.cfi_endproc
 4186              	.LFE45:
 4188              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 4189              		.align	1
 4190              		.global	uxTaskResetEventItemValue
 4191              		.syntax unified
 4192              		.thumb
 4193              		.thumb_func
 4194              		.fpu fpv4-sp-d16
 4196              	uxTaskResetEventItemValue:
 4197              	.LFB46:
4377:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxReturn;
 4198              		.loc 1 4377 0
 4199              		.cfi_startproc
 4200              		@ args = 0, pretend = 0, frame = 0
 4201              		@ frame_needed = 0, uses_anonymous_args = 0
 4202              		@ link register save eliminated.
4380:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4203              		.loc 1 4380 0
 4204 0000 044B     		ldr	r3, .L416
 4205 0002 1A68     		ldr	r2, [r3]
 4206 0004 9069     		ldr	r0, [r2, #24]
 4207              	.LVL352:
ARM GAS  /tmp/cc60zarx.s 			page 173


4384:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4208              		.loc 1 4384 0
 4209 0006 1A68     		ldr	r2, [r3]
 4210 0008 1B68     		ldr	r3, [r3]
 4211 000a DB6A     		ldr	r3, [r3, #44]
 4212 000c C3F10703 		rsb	r3, r3, #7
 4213 0010 9361     		str	r3, [r2, #24]
4387:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 4214              		.loc 1 4387 0
 4215 0012 7047     		bx	lr
 4216              	.L417:
 4217              		.align	2
 4218              	.L416:
 4219 0014 00000000 		.word	.LANCHOR10
 4220              		.cfi_endproc
 4221              	.LFE46:
 4223              		.section	.text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 4224              		.align	1
 4225              		.global	pvTaskIncrementMutexHeldCount
 4226              		.syntax unified
 4227              		.thumb
 4228              		.thumb_func
 4229              		.fpu fpv4-sp-d16
 4231              	pvTaskIncrementMutexHeldCount:
 4232              	.LFB47:
4393:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
 4233              		.loc 1 4393 0
 4234              		.cfi_startproc
 4235              		@ args = 0, pretend = 0, frame = 0
 4236              		@ frame_needed = 0, uses_anonymous_args = 0
 4237              		@ link register save eliminated.
4396:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4238              		.loc 1 4396 0
 4239 0000 054B     		ldr	r3, .L420
 4240 0002 1B68     		ldr	r3, [r3]
 4241 0004 23B1     		cbz	r3, .L419
4398:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4242              		.loc 1 4398 0
 4243 0006 044B     		ldr	r3, .L420
 4244 0008 1A68     		ldr	r2, [r3]
 4245 000a 936C     		ldr	r3, [r2, #72]
 4246 000c 0133     		adds	r3, r3, #1
 4247 000e 9364     		str	r3, [r2, #72]
 4248              	.L419:
4401:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4249              		.loc 1 4401 0
 4250 0010 014B     		ldr	r3, .L420
 4251 0012 1868     		ldr	r0, [r3]
4402:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4252              		.loc 1 4402 0
 4253 0014 7047     		bx	lr
 4254              	.L421:
 4255 0016 00BF     		.align	2
 4256              	.L420:
 4257 0018 00000000 		.word	.LANCHOR10
 4258              		.cfi_endproc
 4259              	.LFE47:
ARM GAS  /tmp/cc60zarx.s 			page 174


 4261              		.section	.text.ulTaskNotifyTake,"ax",%progbits
 4262              		.align	1
 4263              		.global	ulTaskNotifyTake
 4264              		.syntax unified
 4265              		.thumb
 4266              		.thumb_func
 4267              		.fpu fpv4-sp-d16
 4269              	ulTaskNotifyTake:
 4270              	.LFB48:
4410:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
 4271              		.loc 1 4410 0
 4272              		.cfi_startproc
 4273              		@ args = 0, pretend = 0, frame = 0
 4274              		@ frame_needed = 0, uses_anonymous_args = 0
 4275              	.LVL353:
 4276 0000 38B5     		push	{r3, r4, r5, lr}
 4277              	.LCFI45:
 4278              		.cfi_def_cfa_offset 16
 4279              		.cfi_offset 3, -16
 4280              		.cfi_offset 4, -12
 4281              		.cfi_offset 5, -8
 4282              		.cfi_offset 14, -4
 4283 0002 0546     		mov	r5, r0
 4284 0004 0C46     		mov	r4, r1
4413:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4285              		.loc 1 4413 0
 4286 0006 FFF7FEFF 		bl	vPortEnterCritical
 4287              	.LVL354:
4416:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4288              		.loc 1 4416 0
 4289 000a 194B     		ldr	r3, .L429
 4290 000c 1B68     		ldr	r3, [r3]
 4291 000e DB6C     		ldr	r3, [r3, #76]
 4292 0010 2BB9     		cbnz	r3, .L423
4419:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4293              		.loc 1 4419 0
 4294 0012 174B     		ldr	r3, .L429
 4295 0014 1B68     		ldr	r3, [r3]
 4296 0016 0122     		movs	r2, #1
 4297 0018 83F85020 		strb	r2, [r3, #80]
4421:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4298              		.loc 1 4421 0
 4299 001c ACB9     		cbnz	r4, .L427
 4300              	.L423:
4442:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4301              		.loc 1 4442 0
 4302 001e FFF7FEFF 		bl	vPortExitCritical
 4303              	.LVL355:
4444:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4304              		.loc 1 4444 0
 4305 0022 FFF7FEFF 		bl	vPortEnterCritical
 4306              	.LVL356:
4447:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4307              		.loc 1 4447 0
 4308 0026 124B     		ldr	r3, .L429
 4309 0028 1B68     		ldr	r3, [r3]
 4310 002a DC6C     		ldr	r4, [r3, #76]
ARM GAS  /tmp/cc60zarx.s 			page 175


 4311              	.LVL357:
4449:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4312              		.loc 1 4449 0
 4313 002c 24B1     		cbz	r4, .L424
4451:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4314              		.loc 1 4451 0
 4315 002e CDB9     		cbnz	r5, .L428
4457:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4316              		.loc 1 4457 0
 4317 0030 0F4B     		ldr	r3, .L429
 4318 0032 1B68     		ldr	r3, [r3]
 4319 0034 621E     		subs	r2, r4, #1
 4320 0036 DA64     		str	r2, [r3, #76]
 4321              	.L424:
4465:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4322              		.loc 1 4465 0
 4323 0038 0D4B     		ldr	r3, .L429
 4324 003a 1B68     		ldr	r3, [r3]
 4325 003c 0022     		movs	r2, #0
 4326 003e 83F85020 		strb	r2, [r3, #80]
4467:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4327              		.loc 1 4467 0
 4328 0042 FFF7FEFF 		bl	vPortExitCritical
 4329              	.LVL358:
4470:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4330              		.loc 1 4470 0
 4331 0046 2046     		mov	r0, r4
 4332 0048 38BD     		pop	{r3, r4, r5, pc}
 4333              	.LVL359:
 4334              	.L427:
4423:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
 4335              		.loc 1 4423 0
 4336 004a 1146     		mov	r1, r2
 4337 004c 2046     		mov	r0, r4
 4338 004e FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 4339              	.LVL360:
4430:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4340              		.loc 1 4430 0
 4341 0052 4FF08052 		mov	r2, #268435456
 4342 0056 074B     		ldr	r3, .L429+4
 4343 0058 1A60     		str	r2, [r3]
 4344              		.syntax unified
 4345              	@ 4430 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4346 005a BFF34F8F 		dsb
 4347              	@ 0 "" 2
 4348              	@ 4430 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4349 005e BFF36F8F 		isb
 4350              	@ 0 "" 2
 4351              		.thumb
 4352              		.syntax unified
 4353 0062 DCE7     		b	.L423
 4354              	.LVL361:
 4355              	.L428:
4453:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4356              		.loc 1 4453 0
 4357 0064 024B     		ldr	r3, .L429
 4358 0066 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/cc60zarx.s 			page 176


 4359 0068 0022     		movs	r2, #0
 4360 006a DA64     		str	r2, [r3, #76]
 4361 006c E4E7     		b	.L424
 4362              	.L430:
 4363 006e 00BF     		.align	2
 4364              	.L429:
 4365 0070 00000000 		.word	.LANCHOR10
 4366 0074 04ED00E0 		.word	-536810236
 4367              		.cfi_endproc
 4368              	.LFE48:
 4370              		.section	.text.xTaskNotifyWait,"ax",%progbits
 4371              		.align	1
 4372              		.global	xTaskNotifyWait
 4373              		.syntax unified
 4374              		.thumb
 4375              		.thumb_func
 4376              		.fpu fpv4-sp-d16
 4378              	xTaskNotifyWait:
 4379              	.LFB49:
4478:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 4380              		.loc 1 4478 0
 4381              		.cfi_startproc
 4382              		@ args = 0, pretend = 0, frame = 0
 4383              		@ frame_needed = 0, uses_anonymous_args = 0
 4384              	.LVL362:
 4385 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4386              	.LCFI46:
 4387              		.cfi_def_cfa_offset 24
 4388              		.cfi_offset 3, -24
 4389              		.cfi_offset 4, -20
 4390              		.cfi_offset 5, -16
 4391              		.cfi_offset 6, -12
 4392              		.cfi_offset 7, -8
 4393              		.cfi_offset 14, -4
 4394 0002 0746     		mov	r7, r0
 4395 0004 0D46     		mov	r5, r1
 4396 0006 1446     		mov	r4, r2
 4397 0008 1E46     		mov	r6, r3
4481:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4398              		.loc 1 4481 0
 4399 000a FFF7FEFF 		bl	vPortEnterCritical
 4400              	.LVL363:
4484:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4401              		.loc 1 4484 0
 4402 000e 204B     		ldr	r3, .L439
 4403 0010 1B68     		ldr	r3, [r3]
 4404 0012 93F85030 		ldrb	r3, [r3, #80]	@ zero_extendqisi2
 4405 0016 DBB2     		uxtb	r3, r3
 4406 0018 022B     		cmp	r3, #2
 4407 001a 0AD0     		beq	.L432
4489:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4408              		.loc 1 4489 0
 4409 001c 1C4B     		ldr	r3, .L439
 4410 001e 1A68     		ldr	r2, [r3]
 4411 0020 D06C     		ldr	r0, [r2, #76]
 4412 0022 20EA0700 		bic	r0, r0, r7
 4413 0026 D064     		str	r0, [r2, #76]
ARM GAS  /tmp/cc60zarx.s 			page 177


4492:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4414              		.loc 1 4492 0
 4415 0028 1B68     		ldr	r3, [r3]
 4416 002a 0122     		movs	r2, #1
 4417 002c 83F85020 		strb	r2, [r3, #80]
4494:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4418              		.loc 1 4494 0
 4419 0030 CEB9     		cbnz	r6, .L437
 4420              	.L432:
4515:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4421              		.loc 1 4515 0
 4422 0032 FFF7FEFF 		bl	vPortExitCritical
 4423              	.LVL364:
4517:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4424              		.loc 1 4517 0
 4425 0036 FFF7FEFF 		bl	vPortEnterCritical
 4426              	.LVL365:
4521:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4427              		.loc 1 4521 0
 4428 003a 1CB1     		cbz	r4, .L433
4525:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4429              		.loc 1 4525 0
 4430 003c 144B     		ldr	r3, .L439
 4431 003e 1B68     		ldr	r3, [r3]
 4432 0040 DB6C     		ldr	r3, [r3, #76]
 4433 0042 2360     		str	r3, [r4]
 4434              	.L433:
4532:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4435              		.loc 1 4532 0
 4436 0044 124B     		ldr	r3, .L439
 4437 0046 1B68     		ldr	r3, [r3]
 4438 0048 93F85030 		ldrb	r3, [r3, #80]	@ zero_extendqisi2
 4439 004c DBB2     		uxtb	r3, r3
 4440 004e 022B     		cmp	r3, #2
 4441 0050 16D0     		beq	.L438
4535:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4442              		.loc 1 4535 0
 4443 0052 0024     		movs	r4, #0
 4444              	.LVL366:
 4445              	.L434:
4545:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4446              		.loc 1 4545 0
 4447 0054 0E4B     		ldr	r3, .L439
 4448 0056 1B68     		ldr	r3, [r3]
 4449 0058 0022     		movs	r2, #0
 4450 005a 83F85020 		strb	r2, [r3, #80]
4547:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4451              		.loc 1 4547 0
 4452 005e FFF7FEFF 		bl	vPortExitCritical
 4453              	.LVL367:
4550:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4454              		.loc 1 4550 0
 4455 0062 2046     		mov	r0, r4
 4456 0064 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4457              	.LVL368:
 4458              	.L437:
4496:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
ARM GAS  /tmp/cc60zarx.s 			page 178


 4459              		.loc 1 4496 0
 4460 0066 1146     		mov	r1, r2
 4461 0068 3046     		mov	r0, r6
 4462 006a FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 4463              	.LVL369:
4503:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4464              		.loc 1 4503 0
 4465 006e 4FF08052 		mov	r2, #268435456
 4466 0072 084B     		ldr	r3, .L439+4
 4467 0074 1A60     		str	r2, [r3]
 4468              		.syntax unified
 4469              	@ 4503 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4470 0076 BFF34F8F 		dsb
 4471              	@ 0 "" 2
 4472              	@ 4503 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4473 007a BFF36F8F 		isb
 4474              	@ 0 "" 2
 4475              		.thumb
 4476              		.syntax unified
 4477 007e D8E7     		b	.L432
 4478              	.L438:
4541:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
 4479              		.loc 1 4541 0
 4480 0080 034B     		ldr	r3, .L439
 4481 0082 1A68     		ldr	r2, [r3]
 4482 0084 D36C     		ldr	r3, [r2, #76]
 4483 0086 23EA0505 		bic	r5, r3, r5
 4484              	.LVL370:
 4485 008a D564     		str	r5, [r2, #76]
 4486              	.LVL371:
4542:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4487              		.loc 1 4542 0
 4488 008c 0124     		movs	r4, #1
 4489              	.LVL372:
 4490 008e E1E7     		b	.L434
 4491              	.L440:
 4492              		.align	2
 4493              	.L439:
 4494 0090 00000000 		.word	.LANCHOR10
 4495 0094 04ED00E0 		.word	-536810236
 4496              		.cfi_endproc
 4497              	.LFE49:
 4499              		.section	.text.xTaskGenericNotify,"ax",%progbits
 4500              		.align	1
 4501              		.global	xTaskGenericNotify
 4502              		.syntax unified
 4503              		.thumb
 4504              		.thumb_func
 4505              		.fpu fpv4-sp-d16
 4507              	xTaskGenericNotify:
 4508              	.LFB50:
4558:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 4509              		.loc 1 4558 0
 4510              		.cfi_startproc
 4511              		@ args = 0, pretend = 0, frame = 0
 4512              		@ frame_needed = 0, uses_anonymous_args = 0
 4513              	.LVL373:
ARM GAS  /tmp/cc60zarx.s 			page 179


 4514 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4515              	.LCFI47:
 4516              		.cfi_def_cfa_offset 24
 4517              		.cfi_offset 3, -24
 4518              		.cfi_offset 4, -20
 4519              		.cfi_offset 5, -16
 4520              		.cfi_offset 6, -12
 4521              		.cfi_offset 7, -8
 4522              		.cfi_offset 14, -4
 4523              	.LVL374:
4563:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
 4524              		.loc 1 4563 0
 4525 0002 A8B1     		cbz	r0, .L457
 4526 0004 0446     		mov	r4, r0
 4527 0006 1F46     		mov	r7, r3
 4528 0008 1546     		mov	r5, r2
 4529 000a 0E46     		mov	r6, r1
 4530              	.LVL375:
4566:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4531              		.loc 1 4566 0
 4532 000c FFF7FEFF 		bl	vPortEnterCritical
 4533              	.LVL376:
4568:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4534              		.loc 1 4568 0
 4535 0010 0FB1     		cbz	r7, .L444
4570:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4536              		.loc 1 4570 0
 4537 0012 E36C     		ldr	r3, [r4, #76]
 4538 0014 3B60     		str	r3, [r7]
 4539              	.L444:
4573:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4540              		.loc 1 4573 0
 4541 0016 94F85030 		ldrb	r3, [r4, #80]	@ zero_extendqisi2
 4542 001a DBB2     		uxtb	r3, r3
 4543              	.LVL377:
4575:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4544              		.loc 1 4575 0
 4545 001c 0222     		movs	r2, #2
 4546 001e 84F85020 		strb	r2, [r4, #80]
4577:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4547              		.loc 1 4577 0
 4548 0022 6A1E     		subs	r2, r5, #1
 4549 0024 032A     		cmp	r2, #3
 4550 0026 3DD8     		bhi	.L454
 4551 0028 DFE802F0 		tbb	[pc, r2]
 4552              	.L447:
 4553 002c 0B       		.byte	(.L446-.L447)/2
 4554 002d 2F       		.byte	(.L448-.L447)/2
 4555 002e 34       		.byte	(.L449-.L447)/2
 4556 002f 37       		.byte	(.L450-.L447)/2
 4557              	.LVL378:
 4558              		.p2align 1
 4559              	.L457:
 4560              	.LBB178:
 4561              	.LBB179:
 195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4562              		.loc 2 195 0
ARM GAS  /tmp/cc60zarx.s 			page 180


 4563              		.syntax unified
 4564              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4565 0030 4FF01003 			mov r3, #16												
 4566 0034 83F31188 		msr basepri, r3											
 4567 0038 BFF36F8F 		isb														
 4568 003c BFF34F8F 		dsb														
 4569              	
 4570              	@ 0 "" 2
 4571              	.LVL379:
 4572              		.thumb
 4573              		.syntax unified
 4574              	.L443:
 4575 0040 FEE7     		b	.L443
 4576              	.LVL380:
 4577              	.L446:
 4578              	.LBE179:
 4579              	.LBE178:
4580:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 4580              		.loc 1 4580 0
 4581 0042 E26C     		ldr	r2, [r4, #76]
 4582 0044 1643     		orrs	r6, r6, r2
 4583              	.LVL381:
 4584 0046 E664     		str	r6, [r4, #76]
4560:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4585              		.loc 1 4560 0
 4586 0048 0125     		movs	r5, #1
 4587              	.L445:
 4588              	.LVL382:
4613:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4589              		.loc 1 4613 0
 4590 004a 012B     		cmp	r3, #1
 4591 004c 3CD1     		bne	.L451
4615:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 4592              		.loc 1 4615 0
 4593 004e 261D     		adds	r6, r4, #4
 4594 0050 3046     		mov	r0, r6
 4595 0052 FFF7FEFF 		bl	uxListRemove
 4596              	.LVL383:
4616:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4597              		.loc 1 4616 0
 4598 0056 E36A     		ldr	r3, [r4, #44]
 4599 0058 0122     		movs	r2, #1
 4600 005a 9A40     		lsls	r2, r2, r3
 4601 005c 1C49     		ldr	r1, .L458
 4602 005e 0868     		ldr	r0, [r1]
 4603 0060 0243     		orrs	r2, r2, r0
 4604 0062 0A60     		str	r2, [r1]
 4605 0064 03EB8303 		add	r3, r3, r3, lsl #2
 4606 0068 9A00     		lsls	r2, r3, #2
 4607 006a 3146     		mov	r1, r6
 4608 006c 1948     		ldr	r0, .L458+4
 4609 006e 1044     		add	r0, r0, r2
 4610 0070 FFF7FEFF 		bl	vListInsertEnd
 4611              	.LVL384:
4619:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4612              		.loc 1 4619 0
 4613 0074 A36A     		ldr	r3, [r4, #40]
ARM GAS  /tmp/cc60zarx.s 			page 181


 4614 0076 CBB1     		cbz	r3, .L452
 4615              	.LBB180:
 4616              	.LBB181:
 195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4617              		.loc 2 195 0
 4618              		.syntax unified
 4619              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4620 0078 4FF01003 			mov r3, #16												
 4621 007c 83F31188 		msr basepri, r3											
 4622 0080 BFF36F8F 		isb														
 4623 0084 BFF34F8F 		dsb														
 4624              	
 4625              	@ 0 "" 2
 4626              	.LVL385:
 4627              		.thumb
 4628              		.syntax unified
 4629              	.L453:
 4630 0088 FEE7     		b	.L453
 4631              	.LVL386:
 4632              	.L448:
 4633              	.LBE181:
 4634              	.LBE180:
4584:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 4635              		.loc 1 4584 0
 4636 008a E26C     		ldr	r2, [r4, #76]
 4637 008c 0132     		adds	r2, r2, #1
 4638 008e E264     		str	r2, [r4, #76]
4560:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4639              		.loc 1 4560 0
 4640 0090 0125     		movs	r5, #1
4585:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4641              		.loc 1 4585 0
 4642 0092 DAE7     		b	.L445
 4643              	.L449:
4588:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 4644              		.loc 1 4588 0
 4645 0094 E664     		str	r6, [r4, #76]
4560:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4646              		.loc 1 4560 0
 4647 0096 0125     		movs	r5, #1
4589:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4648              		.loc 1 4589 0
 4649 0098 D7E7     		b	.L445
 4650              	.L450:
4592:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4651              		.loc 1 4592 0
 4652 009a 022B     		cmp	r3, #2
 4653 009c 04D0     		beq	.L455
4594:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4654              		.loc 1 4594 0
 4655 009e E664     		str	r6, [r4, #76]
4560:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4656              		.loc 1 4560 0
 4657 00a0 0125     		movs	r5, #1
 4658 00a2 D2E7     		b	.L445
 4659              	.L454:
 4660 00a4 0125     		movs	r5, #1
ARM GAS  /tmp/cc60zarx.s 			page 182


 4661 00a6 D0E7     		b	.L445
 4662              	.L455:
4599:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4663              		.loc 1 4599 0
 4664 00a8 0025     		movs	r5, #0
 4665 00aa CEE7     		b	.L445
 4666              	.LVL387:
 4667              	.L452:
4637:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4668              		.loc 1 4637 0
 4669 00ac E26A     		ldr	r2, [r4, #44]
 4670 00ae 0A4B     		ldr	r3, .L458+8
 4671 00b0 1B68     		ldr	r3, [r3]
 4672 00b2 DB6A     		ldr	r3, [r3, #44]
 4673 00b4 9A42     		cmp	r2, r3
 4674 00b6 07D9     		bls	.L451
4641:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4675              		.loc 1 4641 0
 4676 00b8 4FF08052 		mov	r2, #268435456
 4677 00bc 074B     		ldr	r3, .L458+12
 4678 00be 1A60     		str	r2, [r3]
 4679              		.syntax unified
 4680              	@ 4641 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4681 00c0 BFF34F8F 		dsb
 4682              	@ 0 "" 2
 4683              	@ 4641 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4684 00c4 BFF36F8F 		isb
 4685              	@ 0 "" 2
 4686              		.thumb
 4687              		.syntax unified
 4688              	.L451:
4653:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4689              		.loc 1 4653 0
 4690 00c8 FFF7FEFF 		bl	vPortExitCritical
 4691              	.LVL388:
4656:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4692              		.loc 1 4656 0
 4693 00cc 2846     		mov	r0, r5
 4694 00ce F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4695              	.LVL389:
 4696              	.L459:
 4697              		.align	2
 4698              	.L458:
 4699 00d0 00000000 		.word	.LANCHOR13
 4700 00d4 00000000 		.word	.LANCHOR4
 4701 00d8 00000000 		.word	.LANCHOR10
 4702 00dc 04ED00E0 		.word	-536810236
 4703              		.cfi_endproc
 4704              	.LFE50:
 4706              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 4707              		.align	1
 4708              		.global	xTaskGenericNotifyFromISR
 4709              		.syntax unified
 4710              		.thumb
 4711              		.thumb_func
 4712              		.fpu fpv4-sp-d16
 4714              	xTaskGenericNotifyFromISR:
ARM GAS  /tmp/cc60zarx.s 			page 183


 4715              	.LFB51:
4664:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 4716              		.loc 1 4664 0
 4717              		.cfi_startproc
 4718              		@ args = 4, pretend = 0, frame = 0
 4719              		@ frame_needed = 0, uses_anonymous_args = 0
 4720              	.LVL390:
 4721 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 4722              	.LCFI48:
 4723              		.cfi_def_cfa_offset 32
 4724              		.cfi_offset 3, -32
 4725              		.cfi_offset 4, -28
 4726              		.cfi_offset 5, -24
 4727              		.cfi_offset 6, -20
 4728              		.cfi_offset 7, -16
 4729              		.cfi_offset 8, -12
 4730              		.cfi_offset 9, -8
 4731              		.cfi_offset 14, -4
 4732 0004 089E     		ldr	r6, [sp, #32]
 4733              	.LVL391:
4670:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4734              		.loc 1 4670 0
 4735 0006 10B3     		cbz	r0, .L479
 4736 0008 0446     		mov	r4, r0
 4737 000a 9946     		mov	r9, r3
 4738 000c 1546     		mov	r5, r2
 4739 000e 0F46     		mov	r7, r1
4688:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4740              		.loc 1 4688 0
 4741 0010 FFF7FEFF 		bl	vPortValidateInterruptPriority
 4742              	.LVL392:
 4743              	.LBB182:
 4744              	.LBB183:
 211:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4745              		.loc 2 211 0
 4746              		.syntax unified
 4747              	@ 211 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4748 0014 EFF31188 			mrs r8, basepri											
 4749 0018 4FF01003 		mov r3, #16												
 4750 001c 83F31188 		msr basepri, r3											
 4751 0020 BFF36F8F 		isb														
 4752 0024 BFF34F8F 		dsb														
 4753              	
 4754              	@ 0 "" 2
 4755              		.thumb
 4756              		.syntax unified
 4757              	.LBE183:
 4758              	.LBE182:
4694:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4759              		.loc 1 4694 0
 4760 0028 B9F1000F 		cmp	r9, #0
 4761 002c 02D0     		beq	.L463
4696:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4762              		.loc 1 4696 0
 4763 002e E36C     		ldr	r3, [r4, #76]
 4764 0030 C9F80030 		str	r3, [r9]
 4765              	.L463:
ARM GAS  /tmp/cc60zarx.s 			page 184


4699:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 4766              		.loc 1 4699 0
 4767 0034 94F85030 		ldrb	r3, [r4, #80]	@ zero_extendqisi2
 4768 0038 DBB2     		uxtb	r3, r3
 4769              	.LVL393:
4700:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4770              		.loc 1 4700 0
 4771 003a 0222     		movs	r2, #2
 4772 003c 84F85020 		strb	r2, [r4, #80]
4702:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4773              		.loc 1 4702 0
 4774 0040 6A1E     		subs	r2, r5, #1
 4775 0042 032A     		cmp	r2, #3
 4776 0044 2AD8     		bhi	.L476
 4777 0046 DFE802F0 		tbb	[pc, r2]
 4778              	.L466:
 4779 004a 0B       		.byte	(.L465-.L466)/2
 4780 004b 1C       		.byte	(.L467-.L466)/2
 4781 004c 21       		.byte	(.L468-.L466)/2
 4782 004d 24       		.byte	(.L469-.L466)/2
 4783              	.LVL394:
 4784              		.p2align 1
 4785              	.L479:
 4786              	.LBB184:
 4787              	.LBB185:
 195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4788              		.loc 2 195 0
 4789              		.syntax unified
 4790              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4791 004e 4FF01003 			mov r3, #16												
 4792 0052 83F31188 		msr basepri, r3											
 4793 0056 BFF36F8F 		isb														
 4794 005a BFF34F8F 		dsb														
 4795              	
 4796              	@ 0 "" 2
 4797              	.LVL395:
 4798              		.thumb
 4799              		.syntax unified
 4800              	.L462:
 4801 005e FEE7     		b	.L462
 4802              	.LVL396:
 4803              	.L465:
 4804              	.LBE185:
 4805              	.LBE184:
4705:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 4806              		.loc 1 4705 0
 4807 0060 E26C     		ldr	r2, [r4, #76]
 4808 0062 1743     		orrs	r7, r7, r2
 4809              	.LVL397:
 4810 0064 E764     		str	r7, [r4, #76]
4667:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4811              		.loc 1 4667 0
 4812 0066 0125     		movs	r5, #1
 4813              	.L464:
 4814              	.LVL398:
4738:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4815              		.loc 1 4738 0
ARM GAS  /tmp/cc60zarx.s 			page 185


 4816 0068 012B     		cmp	r3, #1
 4817 006a 3AD1     		bne	.L470
4741:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4818              		.loc 1 4741 0
 4819 006c A36A     		ldr	r3, [r4, #40]
 4820              	.LVL399:
 4821 006e CBB1     		cbz	r3, .L471
 4822              	.LBB186:
 4823              	.LBB187:
 195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4824              		.loc 2 195 0
 4825              		.syntax unified
 4826              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4827 0070 4FF01003 			mov r3, #16												
 4828 0074 83F31188 		msr basepri, r3											
 4829 0078 BFF36F8F 		isb														
 4830 007c BFF34F8F 		dsb														
 4831              	
 4832              	@ 0 "" 2
 4833              	.LVL400:
 4834              		.thumb
 4835              		.syntax unified
 4836              	.L472:
 4837 0080 FEE7     		b	.L472
 4838              	.LVL401:
 4839              	.L467:
 4840              	.LBE187:
 4841              	.LBE186:
4709:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 4842              		.loc 1 4709 0
 4843 0082 E26C     		ldr	r2, [r4, #76]
 4844 0084 0132     		adds	r2, r2, #1
 4845 0086 E264     		str	r2, [r4, #76]
4667:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4846              		.loc 1 4667 0
 4847 0088 0125     		movs	r5, #1
4710:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4848              		.loc 1 4710 0
 4849 008a EDE7     		b	.L464
 4850              	.L468:
4713:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 4851              		.loc 1 4713 0
 4852 008c E764     		str	r7, [r4, #76]
4667:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4853              		.loc 1 4667 0
 4854 008e 0125     		movs	r5, #1
4714:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4855              		.loc 1 4714 0
 4856 0090 EAE7     		b	.L464
 4857              	.L469:
4717:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4858              		.loc 1 4717 0
 4859 0092 022B     		cmp	r3, #2
 4860 0094 04D0     		beq	.L477
4719:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4861              		.loc 1 4719 0
 4862 0096 E764     		str	r7, [r4, #76]
ARM GAS  /tmp/cc60zarx.s 			page 186


4667:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4863              		.loc 1 4667 0
 4864 0098 0125     		movs	r5, #1
 4865 009a E5E7     		b	.L464
 4866              	.L476:
 4867 009c 0125     		movs	r5, #1
 4868 009e E3E7     		b	.L464
 4869              	.L477:
4724:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4870              		.loc 1 4724 0
 4871 00a0 0025     		movs	r5, #0
 4872 00a2 E1E7     		b	.L464
 4873              	.LVL402:
 4874              	.L471:
4743:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4875              		.loc 1 4743 0
 4876 00a4 164B     		ldr	r3, .L480
 4877 00a6 1B68     		ldr	r3, [r3]
 4878 00a8 03BB     		cbnz	r3, .L473
4745:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4879              		.loc 1 4745 0
 4880 00aa 271D     		adds	r7, r4, #4
 4881 00ac 3846     		mov	r0, r7
 4882 00ae FFF7FEFF 		bl	uxListRemove
 4883              	.LVL403:
4746:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4884              		.loc 1 4746 0
 4885 00b2 E36A     		ldr	r3, [r4, #44]
 4886 00b4 0122     		movs	r2, #1
 4887 00b6 9A40     		lsls	r2, r2, r3
 4888 00b8 1249     		ldr	r1, .L480+4
 4889 00ba 0868     		ldr	r0, [r1]
 4890 00bc 0243     		orrs	r2, r2, r0
 4891 00be 0A60     		str	r2, [r1]
 4892 00c0 03EB8303 		add	r3, r3, r3, lsl #2
 4893 00c4 9A00     		lsls	r2, r3, #2
 4894 00c6 3946     		mov	r1, r7
 4895 00c8 0F48     		ldr	r0, .L480+8
 4896 00ca 1044     		add	r0, r0, r2
 4897 00cc FFF7FEFF 		bl	vListInsertEnd
 4898              	.LVL404:
 4899              	.L474:
4755:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4900              		.loc 1 4755 0
 4901 00d0 E26A     		ldr	r2, [r4, #44]
 4902 00d2 0E4B     		ldr	r3, .L480+12
 4903 00d4 1B68     		ldr	r3, [r3]
 4904 00d6 DB6A     		ldr	r3, [r3, #44]
 4905 00d8 9A42     		cmp	r2, r3
 4906 00da 02D9     		bls	.L470
4759:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4907              		.loc 1 4759 0
 4908 00dc 66B1     		cbz	r6, .L475
4761:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4909              		.loc 1 4761 0
 4910 00de 0123     		movs	r3, #1
 4911 00e0 3360     		str	r3, [r6]
ARM GAS  /tmp/cc60zarx.s 			page 187


 4912              	.L470:
 4913              	.LVL405:
 4914              	.LBB188:
 4915              	.LBB189:
 4916              		.loc 2 229 0
 4917              		.syntax unified
 4918              	@ 229 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4919 00e2 88F31188 			msr basepri, r8	
 4920              	@ 0 "" 2
 4921              	.LVL406:
 4922              		.thumb
 4923              		.syntax unified
 4924              	.LBE189:
 4925              	.LBE188:
4780:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4926              		.loc 1 4780 0
 4927 00e6 2846     		mov	r0, r5
 4928 00e8 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 4929              	.LVL407:
 4930              	.L473:
4752:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4931              		.loc 1 4752 0
 4932 00ec 04F11801 		add	r1, r4, #24
 4933 00f0 0748     		ldr	r0, .L480+16
 4934 00f2 FFF7FEFF 		bl	vListInsertEnd
 4935              	.LVL408:
 4936 00f6 EBE7     		b	.L474
 4937              	.L475:
4768:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4938              		.loc 1 4768 0
 4939 00f8 0122     		movs	r2, #1
 4940 00fa 064B     		ldr	r3, .L480+20
 4941 00fc 1A60     		str	r2, [r3]
 4942 00fe F0E7     		b	.L470
 4943              	.L481:
 4944              		.align	2
 4945              	.L480:
 4946 0100 00000000 		.word	.LANCHOR16
 4947 0104 00000000 		.word	.LANCHOR13
 4948 0108 00000000 		.word	.LANCHOR4
 4949 010c 00000000 		.word	.LANCHOR10
 4950 0110 00000000 		.word	.LANCHOR1
 4951 0114 00000000 		.word	.LANCHOR20
 4952              		.cfi_endproc
 4953              	.LFE51:
 4955              		.section	.text.vTaskNotifyGiveFromISR,"ax",%progbits
 4956              		.align	1
 4957              		.global	vTaskNotifyGiveFromISR
 4958              		.syntax unified
 4959              		.thumb
 4960              		.thumb_func
 4961              		.fpu fpv4-sp-d16
 4963              	vTaskNotifyGiveFromISR:
 4964              	.LFB52:
4788:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 4965              		.loc 1 4788 0
 4966              		.cfi_startproc
ARM GAS  /tmp/cc60zarx.s 			page 188


 4967              		@ args = 0, pretend = 0, frame = 0
 4968              		@ frame_needed = 0, uses_anonymous_args = 0
 4969              	.LVL409:
 4970 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4971              	.LCFI49:
 4972              		.cfi_def_cfa_offset 24
 4973              		.cfi_offset 3, -24
 4974              		.cfi_offset 4, -20
 4975              		.cfi_offset 5, -16
 4976              		.cfi_offset 6, -12
 4977              		.cfi_offset 7, -8
 4978              		.cfi_offset 14, -4
4793:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4979              		.loc 1 4793 0
 4980 0002 18B3     		cbz	r0, .L492
 4981 0004 0446     		mov	r4, r0
 4982 0006 0D46     		mov	r5, r1
4811:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4983              		.loc 1 4811 0
 4984 0008 FFF7FEFF 		bl	vPortValidateInterruptPriority
 4985              	.LVL410:
 4986              	.LBB190:
 4987              	.LBB191:
 211:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4988              		.loc 2 211 0
 4989              		.syntax unified
 4990              	@ 211 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4991 000c EFF31187 			mrs r7, basepri											
 4992 0010 4FF01003 		mov r3, #16												
 4993 0014 83F31188 		msr basepri, r3											
 4994 0018 BFF36F8F 		isb														
 4995 001c BFF34F8F 		dsb														
 4996              	
 4997              	@ 0 "" 2
 4998              		.thumb
 4999              		.syntax unified
 5000              	.LBE191:
 5001              	.LBE190:
4817:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 5002              		.loc 1 4817 0
 5003 0020 94F85030 		ldrb	r3, [r4, #80]	@ zero_extendqisi2
 5004 0024 DBB2     		uxtb	r3, r3
 5005              	.LVL411:
4818:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5006              		.loc 1 4818 0
 5007 0026 0222     		movs	r2, #2
 5008 0028 84F85020 		strb	r2, [r4, #80]
4822:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5009              		.loc 1 4822 0
 5010 002c E26C     		ldr	r2, [r4, #76]
 5011 002e 0132     		adds	r2, r2, #1
 5012 0030 E264     		str	r2, [r4, #76]
4828:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5013              		.loc 1 4828 0
 5014 0032 012B     		cmp	r3, #1
 5015 0034 32D1     		bne	.L485
4831:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cc60zarx.s 			page 189


 5016              		.loc 1 4831 0
 5017 0036 A36A     		ldr	r3, [r4, #40]
 5018              	.LVL412:
 5019 0038 8BB1     		cbz	r3, .L486
 5020              	.LBB192:
 5021              	.LBB193:
 195:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5022              		.loc 2 195 0
 5023              		.syntax unified
 5024              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5025 003a 4FF01003 			mov r3, #16												
 5026 003e 83F31188 		msr basepri, r3											
 5027 0042 BFF36F8F 		isb														
 5028 0046 BFF34F8F 		dsb														
 5029              	
 5030              	@ 0 "" 2
 5031              	.LVL413:
 5032              		.thumb
 5033              		.syntax unified
 5034              	.L487:
 5035 004a FEE7     		b	.L487
 5036              	.LVL414:
 5037              	.L492:
 5038              	.LBE193:
 5039              	.LBE192:
 5040              	.LBB194:
 5041              	.LBB195:
 5042              		.syntax unified
 5043              	@ 195 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5044 004c 4FF01003 			mov r3, #16												
 5045 0050 83F31188 		msr basepri, r3											
 5046 0054 BFF36F8F 		isb														
 5047 0058 BFF34F8F 		dsb														
 5048              	
 5049              	@ 0 "" 2
 5050              	.LVL415:
 5051              		.thumb
 5052              		.syntax unified
 5053              	.L484:
 5054 005c FEE7     		b	.L484
 5055              	.LVL416:
 5056              	.L486:
 5057              	.LBE195:
 5058              	.LBE194:
4833:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5059              		.loc 1 4833 0
 5060 005e 164B     		ldr	r3, .L493
 5061 0060 1B68     		ldr	r3, [r3]
 5062 0062 F3B9     		cbnz	r3, .L488
4835:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 5063              		.loc 1 4835 0
 5064 0064 261D     		adds	r6, r4, #4
 5065 0066 3046     		mov	r0, r6
 5066 0068 FFF7FEFF 		bl	uxListRemove
 5067              	.LVL417:
4836:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5068              		.loc 1 4836 0
ARM GAS  /tmp/cc60zarx.s 			page 190


 5069 006c E36A     		ldr	r3, [r4, #44]
 5070 006e 0122     		movs	r2, #1
 5071 0070 9A40     		lsls	r2, r2, r3
 5072 0072 1249     		ldr	r1, .L493+4
 5073 0074 0868     		ldr	r0, [r1]
 5074 0076 0243     		orrs	r2, r2, r0
 5075 0078 0A60     		str	r2, [r1]
 5076 007a 03EB8303 		add	r3, r3, r3, lsl #2
 5077 007e 9A00     		lsls	r2, r3, #2
 5078 0080 3146     		mov	r1, r6
 5079 0082 0F48     		ldr	r0, .L493+8
 5080 0084 1044     		add	r0, r0, r2
 5081 0086 FFF7FEFF 		bl	vListInsertEnd
 5082              	.LVL418:
 5083              	.L489:
4845:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5084              		.loc 1 4845 0
 5085 008a E26A     		ldr	r2, [r4, #44]
 5086 008c 0D4B     		ldr	r3, .L493+12
 5087 008e 1B68     		ldr	r3, [r3]
 5088 0090 DB6A     		ldr	r3, [r3, #44]
 5089 0092 9A42     		cmp	r2, r3
 5090 0094 02D9     		bls	.L485
4849:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 5091              		.loc 1 4849 0
 5092 0096 55B1     		cbz	r5, .L490
4851:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5093              		.loc 1 4851 0
 5094 0098 0123     		movs	r3, #1
 5095 009a 2B60     		str	r3, [r5]
 5096              	.L485:
 5097              	.LVL419:
 5098              	.LBB196:
 5099              	.LBB197:
 5100              		.loc 2 229 0
 5101              		.syntax unified
 5102              	@ 229 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5103 009c 87F31188 			msr basepri, r7	
 5104              	@ 0 "" 2
 5105              	.LVL420:
 5106              		.thumb
 5107              		.syntax unified
 5108 00a0 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5109              	.LVL421:
 5110              	.L488:
 5111              	.LBE197:
 5112              	.LBE196:
4842:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5113              		.loc 1 4842 0
 5114 00a2 04F11801 		add	r1, r4, #24
 5115 00a6 0848     		ldr	r0, .L493+16
 5116 00a8 FFF7FEFF 		bl	vListInsertEnd
 5117              	.LVL422:
 5118 00ac EDE7     		b	.L489
 5119              	.L490:
4858:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5120              		.loc 1 4858 0
ARM GAS  /tmp/cc60zarx.s 			page 191


 5121 00ae 0122     		movs	r2, #1
 5122 00b0 064B     		ldr	r3, .L493+20
 5123 00b2 1A60     		str	r2, [r3]
 5124 00b4 F2E7     		b	.L485
 5125              	.L494:
 5126 00b6 00BF     		.align	2
 5127              	.L493:
 5128 00b8 00000000 		.word	.LANCHOR16
 5129 00bc 00000000 		.word	.LANCHOR13
 5130 00c0 00000000 		.word	.LANCHOR4
 5131 00c4 00000000 		.word	.LANCHOR10
 5132 00c8 00000000 		.word	.LANCHOR1
 5133 00cc 00000000 		.word	.LANCHOR20
 5134              		.cfi_endproc
 5135              	.LFE52:
 5137              		.section	.text.xTaskNotifyStateClear,"ax",%progbits
 5138              		.align	1
 5139              		.global	xTaskNotifyStateClear
 5140              		.syntax unified
 5141              		.thumb
 5142              		.thumb_func
 5143              		.fpu fpv4-sp-d16
 5145              	xTaskNotifyStateClear:
 5146              	.LFB53:
4877:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 5147              		.loc 1 4877 0
 5148              		.cfi_startproc
 5149              		@ args = 0, pretend = 0, frame = 0
 5150              		@ frame_needed = 0, uses_anonymous_args = 0
 5151              	.LVL423:
 5152 0000 10B5     		push	{r4, lr}
 5153              	.LCFI50:
 5154              		.cfi_def_cfa_offset 8
 5155              		.cfi_offset 4, -8
 5156              		.cfi_offset 14, -4
4883:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5157              		.loc 1 4883 0
 5158 0002 0446     		mov	r4, r0
 5159 0004 58B1     		cbz	r0, .L501
 5160              	.L496:
 5161              	.LVL424:
4885:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5162              		.loc 1 4885 0 discriminator 4
 5163 0006 FFF7FEFF 		bl	vPortEnterCritical
 5164              	.LVL425:
4887:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5165              		.loc 1 4887 0 discriminator 4
 5166 000a 94F85030 		ldrb	r3, [r4, #80]	@ zero_extendqisi2
 5167 000e DBB2     		uxtb	r3, r3
 5168 0010 022B     		cmp	r3, #2
 5169 0012 07D0     		beq	.L502
4894:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5170              		.loc 1 4894 0
 5171 0014 0024     		movs	r4, #0
 5172              	.LVL426:
 5173              	.L497:
4897:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cc60zarx.s 			page 192


 5174              		.loc 1 4897 0
 5175 0016 FFF7FEFF 		bl	vPortExitCritical
 5176              	.LVL427:
4900:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5177              		.loc 1 4900 0
 5178 001a 2046     		mov	r0, r4
 5179 001c 10BD     		pop	{r4, pc}
 5180              	.LVL428:
 5181              	.L501:
4883:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5182              		.loc 1 4883 0 discriminator 1
 5183 001e 044B     		ldr	r3, .L503
 5184 0020 1C68     		ldr	r4, [r3]
 5185 0022 F0E7     		b	.L496
 5186              	.LVL429:
 5187              	.L502:
4889:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 5188              		.loc 1 4889 0
 5189 0024 0023     		movs	r3, #0
 5190 0026 84F85030 		strb	r3, [r4, #80]
 5191              	.LVL430:
4890:../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5192              		.loc 1 4890 0
 5193 002a 0124     		movs	r4, #1
 5194              	.LVL431:
 5195 002c F3E7     		b	.L497
 5196              	.L504:
 5197 002e 00BF     		.align	2
 5198              	.L503:
 5199 0030 00000000 		.word	.LANCHOR10
 5200              		.cfi_endproc
 5201              	.LFE53:
 5203              		.global	pxCurrentTCB
 5204              		.section	.bss.pxCurrentTCB,"aw",%nobits
 5205              		.align	2
 5206              		.set	.LANCHOR10,. + 0
 5209              	pxCurrentTCB:
 5210 0000 00000000 		.space	4
 5211              		.section	.bss.pxDelayedTaskList,"aw",%nobits
 5212              		.align	2
 5213              		.set	.LANCHOR2,. + 0
 5216              	pxDelayedTaskList:
 5217 0000 00000000 		.space	4
 5218              		.section	.bss.pxOverflowDelayedTaskList,"aw",%nobits
 5219              		.align	2
 5220              		.set	.LANCHOR8,. + 0
 5223              	pxOverflowDelayedTaskList:
 5224 0000 00000000 		.space	4
 5225              		.section	.bss.pxReadyTasksLists,"aw",%nobits
 5226              		.align	2
 5227              		.set	.LANCHOR4,. + 0
 5230              	pxReadyTasksLists:
 5231 0000 00000000 		.space	140
 5231      00000000 
 5231      00000000 
 5231      00000000 
 5231      00000000 
ARM GAS  /tmp/cc60zarx.s 			page 193


 5232              		.section	.bss.uxCurrentNumberOfTasks,"aw",%nobits
 5233              		.align	2
 5234              		.set	.LANCHOR9,. + 0
 5237              	uxCurrentNumberOfTasks:
 5238 0000 00000000 		.space	4
 5239              		.section	.bss.uxDeletedTasksWaitingCleanUp,"aw",%nobits
 5240              		.align	2
 5241              		.set	.LANCHOR14,. + 0
 5244              	uxDeletedTasksWaitingCleanUp:
 5245 0000 00000000 		.space	4
 5246              		.section	.bss.uxPendedTicks,"aw",%nobits
 5247              		.align	2
 5248              		.set	.LANCHOR19,. + 0
 5251              	uxPendedTicks:
 5252 0000 00000000 		.space	4
 5253              		.section	.bss.uxSchedulerSuspended,"aw",%nobits
 5254              		.align	2
 5255              		.set	.LANCHOR16,. + 0
 5258              	uxSchedulerSuspended:
 5259 0000 00000000 		.space	4
 5260              		.section	.bss.uxTaskNumber,"aw",%nobits
 5261              		.align	2
 5262              		.set	.LANCHOR12,. + 0
 5265              	uxTaskNumber:
 5266 0000 00000000 		.space	4
 5267              		.section	.bss.uxTopReadyPriority,"aw",%nobits
 5268              		.align	2
 5269              		.set	.LANCHOR13,. + 0
 5272              	uxTopReadyPriority:
 5273 0000 00000000 		.space	4
 5274              		.section	.bss.xDelayedTaskList1,"aw",%nobits
 5275              		.align	2
 5276              		.set	.LANCHOR5,. + 0
 5279              	xDelayedTaskList1:
 5280 0000 00000000 		.space	20
 5280      00000000 
 5280      00000000 
 5280      00000000 
 5280      00000000 
 5281              		.section	.bss.xDelayedTaskList2,"aw",%nobits
 5282              		.align	2
 5283              		.set	.LANCHOR6,. + 0
 5286              	xDelayedTaskList2:
 5287 0000 00000000 		.space	20
 5287      00000000 
 5287      00000000 
 5287      00000000 
 5287      00000000 
 5288              		.section	.bss.xIdleTaskHandle,"aw",%nobits
 5289              		.align	2
 5290              		.set	.LANCHOR17,. + 0
 5293              	xIdleTaskHandle:
 5294 0000 00000000 		.space	4
 5295              		.section	.bss.xNextTaskUnblockTime,"aw",%nobits
 5296              		.align	2
 5297              		.set	.LANCHOR3,. + 0
 5300              	xNextTaskUnblockTime:
ARM GAS  /tmp/cc60zarx.s 			page 194


 5301 0000 00000000 		.space	4
 5302              		.section	.bss.xNumOfOverflows,"aw",%nobits
 5303              		.align	2
 5304              		.set	.LANCHOR18,. + 0
 5307              	xNumOfOverflows:
 5308 0000 00000000 		.space	4
 5309              		.section	.bss.xPendingReadyList,"aw",%nobits
 5310              		.align	2
 5311              		.set	.LANCHOR1,. + 0
 5314              	xPendingReadyList:
 5315 0000 00000000 		.space	20
 5315      00000000 
 5315      00000000 
 5315      00000000 
 5315      00000000 
 5316              		.section	.bss.xSchedulerRunning,"aw",%nobits
 5317              		.align	2
 5318              		.set	.LANCHOR11,. + 0
 5321              	xSchedulerRunning:
 5322 0000 00000000 		.space	4
 5323              		.section	.bss.xSuspendedTaskList,"aw",%nobits
 5324              		.align	2
 5325              		.set	.LANCHOR0,. + 0
 5328              	xSuspendedTaskList:
 5329 0000 00000000 		.space	20
 5329      00000000 
 5329      00000000 
 5329      00000000 
 5329      00000000 
 5330              		.section	.bss.xTasksWaitingTermination,"aw",%nobits
 5331              		.align	2
 5332              		.set	.LANCHOR7,. + 0
 5335              	xTasksWaitingTermination:
 5336 0000 00000000 		.space	20
 5336      00000000 
 5336      00000000 
 5336      00000000 
 5336      00000000 
 5337              		.section	.bss.xTickCount,"aw",%nobits
 5338              		.align	2
 5339              		.set	.LANCHOR15,. + 0
 5342              	xTickCount:
 5343 0000 00000000 		.space	4
 5344              		.section	.bss.xYieldPending,"aw",%nobits
 5345              		.align	2
 5346              		.set	.LANCHOR20,. + 0
 5349              	xYieldPending:
 5350 0000 00000000 		.space	4
 5351              		.section	.rodata.vTaskStartScheduler.str1.4,"aMS",%progbits,1
 5352              		.align	2
 5353              	.LC0:
 5354 0000 49444C45 		.ascii	"IDLE\000"
 5354      00
 5355              		.text
 5356              	.Letext0:
 5357              		.file 3 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 5358              		.file 4 "/usr/include/newlib/machine/_default_types.h"
ARM GAS  /tmp/cc60zarx.s 			page 195


 5359              		.file 5 "/usr/include/newlib/sys/lock.h"
 5360              		.file 6 "/usr/include/newlib/sys/_types.h"
 5361              		.file 7 "/usr/include/newlib/sys/reent.h"
 5362              		.file 8 "/usr/include/newlib/stdlib.h"
 5363              		.file 9 "/usr/include/newlib/sys/_stdint.h"
 5364              		.file 10 "../../core/platform/octa/inc/FreeRTOSConfig.h"
 5365              		.file 11 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/include/projdefs.h"
 5366              		.file 12 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/include/list.h"
 5367              		.file 13 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 5368              		.file 14 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/include/portable.h"
 5369              		.file 15 "../../core/ST/Middlewares/Third_Party/FreeRTOS/Source/include/timers.h"
ARM GAS  /tmp/cc60zarx.s 			page 196


DEFINED SYMBOLS
                            *ABS*:0000000000000000 tasks.c
     /tmp/cc60zarx.s:18     .text.prvTaskIsTaskSuspended:0000000000000000 $t
     /tmp/cc60zarx.s:24     .text.prvTaskIsTaskSuspended:0000000000000000 prvTaskIsTaskSuspended
     /tmp/cc60zarx.s:104    .text.prvTaskIsTaskSuspended:0000000000000044 $d
     /tmp/cc60zarx.s:110    .text.prvResetNextTaskUnblockTime:0000000000000000 $t
     /tmp/cc60zarx.s:116    .text.prvResetNextTaskUnblockTime:0000000000000000 prvResetNextTaskUnblockTime
     /tmp/cc60zarx.s:157    .text.prvResetNextTaskUnblockTime:000000000000002c $d
     /tmp/cc60zarx.s:163    .text.prvDeleteTCB:0000000000000000 $t
     /tmp/cc60zarx.s:169    .text.prvDeleteTCB:0000000000000000 prvDeleteTCB
     /tmp/cc60zarx.s:196    .text.prvInitialiseNewTask:0000000000000000 $t
     /tmp/cc60zarx.s:202    .text.prvInitialiseNewTask:0000000000000000 prvInitialiseNewTask
     /tmp/cc60zarx.s:310    .text.prvInitialiseTaskLists:0000000000000000 $t
     /tmp/cc60zarx.s:316    .text.prvInitialiseTaskLists:0000000000000000 prvInitialiseTaskLists
     /tmp/cc60zarx.s:382    .text.prvInitialiseTaskLists:0000000000000048 $d
     /tmp/cc60zarx.s:394    .text.prvAddNewTaskToReadyList:0000000000000000 $t
     /tmp/cc60zarx.s:400    .text.prvAddNewTaskToReadyList:0000000000000000 prvAddNewTaskToReadyList
     /tmp/cc60zarx.s:506    .text.prvAddNewTaskToReadyList:000000000000008c $d
     /tmp/cc60zarx.s:517    .text.prvCheckTasksWaitingTermination:0000000000000000 $t
     /tmp/cc60zarx.s:523    .text.prvCheckTasksWaitingTermination:0000000000000000 prvCheckTasksWaitingTermination
     /tmp/cc60zarx.s:590    .text.prvCheckTasksWaitingTermination:0000000000000040 $d
     /tmp/cc60zarx.s:597    .text.prvIdleTask:0000000000000000 $t
     /tmp/cc60zarx.s:603    .text.prvIdleTask:0000000000000000 prvIdleTask
     /tmp/cc60zarx.s:643    .text.prvIdleTask:0000000000000020 $d
     /tmp/cc60zarx.s:649    .text.prvAddCurrentTaskToDelayedList:0000000000000000 $t
     /tmp/cc60zarx.s:655    .text.prvAddCurrentTaskToDelayedList:0000000000000000 prvAddCurrentTaskToDelayedList
     /tmp/cc60zarx.s:754    .text.prvAddCurrentTaskToDelayedList:000000000000007c $d
     /tmp/cc60zarx.s:765    .text.xTaskCreate:0000000000000000 $t
     /tmp/cc60zarx.s:772    .text.xTaskCreate:0000000000000000 xTaskCreate
     /tmp/cc60zarx.s:877    .text.vTaskDelete:0000000000000000 $t
     /tmp/cc60zarx.s:884    .text.vTaskDelete:0000000000000000 vTaskDelete
     /tmp/cc60zarx.s:1035   .text.vTaskDelete:00000000000000b8 $d
     /tmp/cc60zarx.s:1049   .text.uxTaskPriorityGet:0000000000000000 $t
     /tmp/cc60zarx.s:1056   .text.uxTaskPriorityGet:0000000000000000 uxTaskPriorityGet
     /tmp/cc60zarx.s:1095   .text.uxTaskPriorityGet:000000000000001c $d
     /tmp/cc60zarx.s:1100   .text.uxTaskPriorityGetFromISR:0000000000000000 $t
     /tmp/cc60zarx.s:1107   .text.uxTaskPriorityGetFromISR:0000000000000000 uxTaskPriorityGetFromISR
     /tmp/cc60zarx.s:1170   .text.uxTaskPriorityGetFromISR:000000000000002c $d
     /tmp/cc60zarx.s:1175   .text.vTaskPrioritySet:0000000000000000 $t
     /tmp/cc60zarx.s:1182   .text.vTaskPrioritySet:0000000000000000 vTaskPrioritySet
     /tmp/cc60zarx.s:1371   .text.vTaskPrioritySet:00000000000000d8 $d
     /tmp/cc60zarx.s:1379   .text.vTaskResume:0000000000000000 $t
     /tmp/cc60zarx.s:1386   .text.vTaskResume:0000000000000000 vTaskResume
     /tmp/cc60zarx.s:1489   .text.vTaskResume:0000000000000078 $d
     /tmp/cc60zarx.s:1497   .text.xTaskResumeFromISR:0000000000000000 $t
     /tmp/cc60zarx.s:1504   .text.xTaskResumeFromISR:0000000000000000 xTaskResumeFromISR
     /tmp/cc60zarx.s:1641   .text.xTaskResumeFromISR:0000000000000094 $d
     /tmp/cc60zarx.s:1650   .text.vTaskStartScheduler:0000000000000000 $t
     /tmp/cc60zarx.s:1657   .text.vTaskStartScheduler:0000000000000000 vTaskStartScheduler
     /tmp/cc60zarx.s:1760   .text.vTaskStartScheduler:000000000000006c $d
     /tmp/cc60zarx.s:1772   .text.vTaskEndScheduler:0000000000000000 $t
     /tmp/cc60zarx.s:1779   .text.vTaskEndScheduler:0000000000000000 vTaskEndScheduler
     /tmp/cc60zarx.s:1816   .text.vTaskEndScheduler:0000000000000020 $d
     /tmp/cc60zarx.s:1821   .text.vTaskSuspendAll:0000000000000000 $t
     /tmp/cc60zarx.s:1828   .text.vTaskSuspendAll:0000000000000000 vTaskSuspendAll
     /tmp/cc60zarx.s:1844   .text.vTaskSuspendAll:000000000000000c $d
     /tmp/cc60zarx.s:1849   .text.xTaskGetTickCount:0000000000000000 $t
ARM GAS  /tmp/cc60zarx.s 			page 197


     /tmp/cc60zarx.s:1856   .text.xTaskGetTickCount:0000000000000000 xTaskGetTickCount
     /tmp/cc60zarx.s:1872   .text.xTaskGetTickCount:0000000000000008 $d
     /tmp/cc60zarx.s:1877   .text.xTaskGetTickCountFromISR:0000000000000000 $t
     /tmp/cc60zarx.s:1884   .text.xTaskGetTickCountFromISR:0000000000000000 xTaskGetTickCountFromISR
     /tmp/cc60zarx.s:1907   .text.xTaskGetTickCountFromISR:000000000000000c $d
     /tmp/cc60zarx.s:1912   .text.uxTaskGetNumberOfTasks:0000000000000000 $t
     /tmp/cc60zarx.s:1919   .text.uxTaskGetNumberOfTasks:0000000000000000 uxTaskGetNumberOfTasks
     /tmp/cc60zarx.s:1934   .text.uxTaskGetNumberOfTasks:0000000000000008 $d
     /tmp/cc60zarx.s:1939   .text.pcTaskGetName:0000000000000000 $t
     /tmp/cc60zarx.s:1946   .text.pcTaskGetName:0000000000000000 pcTaskGetName
     /tmp/cc60zarx.s:1992   .text.pcTaskGetName:0000000000000020 $d
     /tmp/cc60zarx.s:1999   .text.xTaskIncrementTick:0000000000000000 $t
     /tmp/cc60zarx.s:2006   .text.xTaskIncrementTick:0000000000000000 xTaskIncrementTick
     /tmp/cc60zarx.s:2215   .text.xTaskIncrementTick:00000000000000f4 $d
     /tmp/cc60zarx.s:2230   .text.xTaskResumeAll:0000000000000000 $t
     /tmp/cc60zarx.s:2237   .text.xTaskResumeAll:0000000000000000 xTaskResumeAll
     /tmp/cc60zarx.s:2426   .text.xTaskResumeAll:00000000000000d8 $d
     /tmp/cc60zarx.s:2439   .text.vTaskDelay:0000000000000000 $t
     /tmp/cc60zarx.s:2446   .text.vTaskDelay:0000000000000000 vTaskDelay
     /tmp/cc60zarx.s:2523   .text.vTaskDelay:0000000000000048 $d
     /tmp/cc60zarx.s:2529   .text.vTaskSwitchContext:0000000000000000 $t
     /tmp/cc60zarx.s:2536   .text.vTaskSwitchContext:0000000000000000 vTaskSwitchContext
     /tmp/cc60zarx.s:2664   .text.vTaskSwitchContext:0000000000000088 $d
     /tmp/cc60zarx.s:2675   .text.vTaskSuspend:0000000000000000 $t
     /tmp/cc60zarx.s:2682   .text.vTaskSuspend:0000000000000000 vTaskSuspend
     /tmp/cc60zarx.s:2849   .text.vTaskSuspend:00000000000000cc $d
     /tmp/cc60zarx.s:2861   .text.vTaskPlaceOnEventList:0000000000000000 $t
     /tmp/cc60zarx.s:2868   .text.vTaskPlaceOnEventList:0000000000000000 vTaskPlaceOnEventList
     /tmp/cc60zarx.s:2920   .text.vTaskPlaceOnEventList:000000000000002c $d
     /tmp/cc60zarx.s:2925   .text.vTaskPlaceOnUnorderedEventList:0000000000000000 $t
     /tmp/cc60zarx.s:2932   .text.vTaskPlaceOnUnorderedEventList:0000000000000000 vTaskPlaceOnUnorderedEventList
     /tmp/cc60zarx.s:3019   .text.vTaskPlaceOnUnorderedEventList:0000000000000054 $d
     /tmp/cc60zarx.s:3025   .text.vTaskPlaceOnEventListRestricted:0000000000000000 $t
     /tmp/cc60zarx.s:3032   .text.vTaskPlaceOnEventListRestricted:0000000000000000 vTaskPlaceOnEventListRestricted
     /tmp/cc60zarx.s:3091   .text.vTaskPlaceOnEventListRestricted:0000000000000034 $d
     /tmp/cc60zarx.s:3098   .text.xTaskRemoveFromEventList:0000000000000000 $t
     /tmp/cc60zarx.s:3105   .text.xTaskRemoveFromEventList:0000000000000000 xTaskRemoveFromEventList
     /tmp/cc60zarx.s:3207   .text.xTaskRemoveFromEventList:0000000000000074 $d
     /tmp/cc60zarx.s:3217   .text.vTaskRemoveFromUnorderedEventList:0000000000000000 $t
     /tmp/cc60zarx.s:3224   .text.vTaskRemoveFromUnorderedEventList:0000000000000000 vTaskRemoveFromUnorderedEventList
     /tmp/cc60zarx.s:3327   .text.vTaskRemoveFromUnorderedEventList:0000000000000074 $d
     /tmp/cc60zarx.s:3338   .text.vTaskSetTimeOutState:0000000000000000 $t
     /tmp/cc60zarx.s:3345   .text.vTaskSetTimeOutState:0000000000000000 vTaskSetTimeOutState
     /tmp/cc60zarx.s:3399   .text.vTaskSetTimeOutState:0000000000000030 $d
     /tmp/cc60zarx.s:3405   .text.vTaskInternalSetTimeOutState:0000000000000000 $t
     /tmp/cc60zarx.s:3412   .text.vTaskInternalSetTimeOutState:0000000000000000 vTaskInternalSetTimeOutState
     /tmp/cc60zarx.s:3432   .text.vTaskInternalSetTimeOutState:0000000000000010 $d
     /tmp/cc60zarx.s:3438   .text.xTaskCheckForTimeOut:0000000000000000 $t
     /tmp/cc60zarx.s:3445   .text.xTaskCheckForTimeOut:0000000000000000 xTaskCheckForTimeOut
     /tmp/cc60zarx.s:3579   .text.xTaskCheckForTimeOut:0000000000000078 $d
     /tmp/cc60zarx.s:3586   .text.vTaskMissedYield:0000000000000000 $t
     /tmp/cc60zarx.s:3593   .text.vTaskMissedYield:0000000000000000 vTaskMissedYield
     /tmp/cc60zarx.s:3608   .text.vTaskMissedYield:0000000000000008 $d
     /tmp/cc60zarx.s:3613   .text.xTaskGetCurrentTaskHandle:0000000000000000 $t
     /tmp/cc60zarx.s:3620   .text.xTaskGetCurrentTaskHandle:0000000000000000 xTaskGetCurrentTaskHandle
     /tmp/cc60zarx.s:3636   .text.xTaskGetCurrentTaskHandle:0000000000000008 $d
     /tmp/cc60zarx.s:3641   .text.xTaskGetSchedulerState:0000000000000000 $t
ARM GAS  /tmp/cc60zarx.s 			page 198


     /tmp/cc60zarx.s:3648   .text.xTaskGetSchedulerState:0000000000000000 xTaskGetSchedulerState
     /tmp/cc60zarx.s:3679   .text.xTaskGetSchedulerState:0000000000000018 $d
     /tmp/cc60zarx.s:3685   .text.xTaskPriorityInherit:0000000000000000 $t
     /tmp/cc60zarx.s:3692   .text.xTaskPriorityInherit:0000000000000000 xTaskPriorityInherit
     /tmp/cc60zarx.s:3834   .text.xTaskPriorityInherit:00000000000000b4 $d
     /tmp/cc60zarx.s:3841   .text.xTaskPriorityDisinherit:0000000000000000 $t
     /tmp/cc60zarx.s:3848   .text.xTaskPriorityDisinherit:0000000000000000 xTaskPriorityDisinherit
     /tmp/cc60zarx.s:4000   .text.xTaskPriorityDisinherit:00000000000000a8 $d
     /tmp/cc60zarx.s:4007   .text.vTaskPriorityDisinheritAfterTimeout:0000000000000000 $t
     /tmp/cc60zarx.s:4014   .text.vTaskPriorityDisinheritAfterTimeout:0000000000000000 vTaskPriorityDisinheritAfterTimeout
     /tmp/cc60zarx.s:4182   .text.vTaskPriorityDisinheritAfterTimeout:00000000000000c0 $d
     /tmp/cc60zarx.s:4189   .text.uxTaskResetEventItemValue:0000000000000000 $t
     /tmp/cc60zarx.s:4196   .text.uxTaskResetEventItemValue:0000000000000000 uxTaskResetEventItemValue
     /tmp/cc60zarx.s:4219   .text.uxTaskResetEventItemValue:0000000000000014 $d
     /tmp/cc60zarx.s:4224   .text.pvTaskIncrementMutexHeldCount:0000000000000000 $t
     /tmp/cc60zarx.s:4231   .text.pvTaskIncrementMutexHeldCount:0000000000000000 pvTaskIncrementMutexHeldCount
     /tmp/cc60zarx.s:4257   .text.pvTaskIncrementMutexHeldCount:0000000000000018 $d
     /tmp/cc60zarx.s:4262   .text.ulTaskNotifyTake:0000000000000000 $t
     /tmp/cc60zarx.s:4269   .text.ulTaskNotifyTake:0000000000000000 ulTaskNotifyTake
     /tmp/cc60zarx.s:4365   .text.ulTaskNotifyTake:0000000000000070 $d
     /tmp/cc60zarx.s:4371   .text.xTaskNotifyWait:0000000000000000 $t
     /tmp/cc60zarx.s:4378   .text.xTaskNotifyWait:0000000000000000 xTaskNotifyWait
     /tmp/cc60zarx.s:4494   .text.xTaskNotifyWait:0000000000000090 $d
     /tmp/cc60zarx.s:4500   .text.xTaskGenericNotify:0000000000000000 $t
     /tmp/cc60zarx.s:4507   .text.xTaskGenericNotify:0000000000000000 xTaskGenericNotify
     /tmp/cc60zarx.s:4553   .text.xTaskGenericNotify:000000000000002c $d
     /tmp/cc60zarx.s:4558   .text.xTaskGenericNotify:0000000000000030 $t
     /tmp/cc60zarx.s:4699   .text.xTaskGenericNotify:00000000000000d0 $d
     /tmp/cc60zarx.s:4707   .text.xTaskGenericNotifyFromISR:0000000000000000 $t
     /tmp/cc60zarx.s:4714   .text.xTaskGenericNotifyFromISR:0000000000000000 xTaskGenericNotifyFromISR
     /tmp/cc60zarx.s:4779   .text.xTaskGenericNotifyFromISR:000000000000004a $d
     /tmp/cc60zarx.s:4784   .text.xTaskGenericNotifyFromISR:000000000000004e $t
     /tmp/cc60zarx.s:4946   .text.xTaskGenericNotifyFromISR:0000000000000100 $d
     /tmp/cc60zarx.s:4956   .text.vTaskNotifyGiveFromISR:0000000000000000 $t
     /tmp/cc60zarx.s:4963   .text.vTaskNotifyGiveFromISR:0000000000000000 vTaskNotifyGiveFromISR
     /tmp/cc60zarx.s:5128   .text.vTaskNotifyGiveFromISR:00000000000000b8 $d
     /tmp/cc60zarx.s:5138   .text.xTaskNotifyStateClear:0000000000000000 $t
     /tmp/cc60zarx.s:5145   .text.xTaskNotifyStateClear:0000000000000000 xTaskNotifyStateClear
     /tmp/cc60zarx.s:5199   .text.xTaskNotifyStateClear:0000000000000030 $d
     /tmp/cc60zarx.s:5209   .bss.pxCurrentTCB:0000000000000000 pxCurrentTCB
     /tmp/cc60zarx.s:5205   .bss.pxCurrentTCB:0000000000000000 $d
     /tmp/cc60zarx.s:5212   .bss.pxDelayedTaskList:0000000000000000 $d
     /tmp/cc60zarx.s:5216   .bss.pxDelayedTaskList:0000000000000000 pxDelayedTaskList
     /tmp/cc60zarx.s:5219   .bss.pxOverflowDelayedTaskList:0000000000000000 $d
     /tmp/cc60zarx.s:5223   .bss.pxOverflowDelayedTaskList:0000000000000000 pxOverflowDelayedTaskList
     /tmp/cc60zarx.s:5226   .bss.pxReadyTasksLists:0000000000000000 $d
     /tmp/cc60zarx.s:5230   .bss.pxReadyTasksLists:0000000000000000 pxReadyTasksLists
     /tmp/cc60zarx.s:5233   .bss.uxCurrentNumberOfTasks:0000000000000000 $d
     /tmp/cc60zarx.s:5237   .bss.uxCurrentNumberOfTasks:0000000000000000 uxCurrentNumberOfTasks
     /tmp/cc60zarx.s:5240   .bss.uxDeletedTasksWaitingCleanUp:0000000000000000 $d
     /tmp/cc60zarx.s:5244   .bss.uxDeletedTasksWaitingCleanUp:0000000000000000 uxDeletedTasksWaitingCleanUp
     /tmp/cc60zarx.s:5247   .bss.uxPendedTicks:0000000000000000 $d
     /tmp/cc60zarx.s:5251   .bss.uxPendedTicks:0000000000000000 uxPendedTicks
     /tmp/cc60zarx.s:5254   .bss.uxSchedulerSuspended:0000000000000000 $d
     /tmp/cc60zarx.s:5258   .bss.uxSchedulerSuspended:0000000000000000 uxSchedulerSuspended
     /tmp/cc60zarx.s:5261   .bss.uxTaskNumber:0000000000000000 $d
     /tmp/cc60zarx.s:5265   .bss.uxTaskNumber:0000000000000000 uxTaskNumber
ARM GAS  /tmp/cc60zarx.s 			page 199


     /tmp/cc60zarx.s:5268   .bss.uxTopReadyPriority:0000000000000000 $d
     /tmp/cc60zarx.s:5272   .bss.uxTopReadyPriority:0000000000000000 uxTopReadyPriority
     /tmp/cc60zarx.s:5275   .bss.xDelayedTaskList1:0000000000000000 $d
     /tmp/cc60zarx.s:5279   .bss.xDelayedTaskList1:0000000000000000 xDelayedTaskList1
     /tmp/cc60zarx.s:5282   .bss.xDelayedTaskList2:0000000000000000 $d
     /tmp/cc60zarx.s:5286   .bss.xDelayedTaskList2:0000000000000000 xDelayedTaskList2
     /tmp/cc60zarx.s:5289   .bss.xIdleTaskHandle:0000000000000000 $d
     /tmp/cc60zarx.s:5293   .bss.xIdleTaskHandle:0000000000000000 xIdleTaskHandle
     /tmp/cc60zarx.s:5296   .bss.xNextTaskUnblockTime:0000000000000000 $d
     /tmp/cc60zarx.s:5300   .bss.xNextTaskUnblockTime:0000000000000000 xNextTaskUnblockTime
     /tmp/cc60zarx.s:5303   .bss.xNumOfOverflows:0000000000000000 $d
     /tmp/cc60zarx.s:5307   .bss.xNumOfOverflows:0000000000000000 xNumOfOverflows
     /tmp/cc60zarx.s:5310   .bss.xPendingReadyList:0000000000000000 $d
     /tmp/cc60zarx.s:5314   .bss.xPendingReadyList:0000000000000000 xPendingReadyList
     /tmp/cc60zarx.s:5317   .bss.xSchedulerRunning:0000000000000000 $d
     /tmp/cc60zarx.s:5321   .bss.xSchedulerRunning:0000000000000000 xSchedulerRunning
     /tmp/cc60zarx.s:5324   .bss.xSuspendedTaskList:0000000000000000 $d
     /tmp/cc60zarx.s:5328   .bss.xSuspendedTaskList:0000000000000000 xSuspendedTaskList
     /tmp/cc60zarx.s:5331   .bss.xTasksWaitingTermination:0000000000000000 $d
     /tmp/cc60zarx.s:5335   .bss.xTasksWaitingTermination:0000000000000000 xTasksWaitingTermination
     /tmp/cc60zarx.s:5338   .bss.xTickCount:0000000000000000 $d
     /tmp/cc60zarx.s:5342   .bss.xTickCount:0000000000000000 xTickCount
     /tmp/cc60zarx.s:5345   .bss.xYieldPending:0000000000000000 $d
     /tmp/cc60zarx.s:5349   .bss.xYieldPending:0000000000000000 xYieldPending
     /tmp/cc60zarx.s:5352   .rodata.vTaskStartScheduler.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
vPortFree
vListInitialiseItem
pxPortInitialiseStack
vListInitialise
vPortEnterCritical
vListInsertEnd
vPortExitCritical
uxListRemove
vListInsert
pvPortMalloc
vPortValidateInterruptPriority
xTimerCreateTimerTask
xPortStartScheduler
vPortEndScheduler
