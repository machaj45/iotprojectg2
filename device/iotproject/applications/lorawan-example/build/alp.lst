ARM GAS  /tmp/ccaG3DAV.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"alp.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.parse_op_return_tag,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv4-sp-d16
  24              	parse_op_return_tag:
  25              	.LFB14:
  26              		.file 1 "../../shields/Murata/src/alp.c"
   1:../../shields/Murata/src/alp.c **** /*! \file alp.c
   2:../../shields/Murata/src/alp.c ****  *
   3:../../shields/Murata/src/alp.c **** 
   4:../../shields/Murata/src/alp.c ****  *  \copyright (C) Copyright 2015 University of Antwerp and others (http://oss-7.cosys.be)
   5:../../shields/Murata/src/alp.c ****  *
   6:../../shields/Murata/src/alp.c ****  * Licensed under the Apache License, Version 2.0 (the "License");
   7:../../shields/Murata/src/alp.c ****  * you may not use this file except in compliance with the License.
   8:../../shields/Murata/src/alp.c ****  * You may obtain a copy of the License at
   9:../../shields/Murata/src/alp.c ****  *
  10:../../shields/Murata/src/alp.c ****  *     http://www.apache.org/licenses/LICENSE-2.0
  11:../../shields/Murata/src/alp.c ****  *
  12:../../shields/Murata/src/alp.c ****  * Unless required by applicable law or agreed to in writing, software
  13:../../shields/Murata/src/alp.c ****  * distributed under the License is distributed on an "AS IS" BASIS,
  14:../../shields/Murata/src/alp.c ****  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  15:../../shields/Murata/src/alp.c ****  * See the License for the specific language governing permissions and
  16:../../shields/Murata/src/alp.c ****  * limitations under the License.
  17:../../shields/Murata/src/alp.c ****  *
  18:../../shields/Murata/src/alp.c ****  *  \author glenn.ergeerts@uantwerpen.be
  19:../../shields/Murata/src/alp.c ****  *  \author maarten.weyn@uantwerpen.be
  20:../../shields/Murata/src/alp.c ****  *
  21:../../shields/Murata/src/alp.c ****  */
  22:../../shields/Murata/src/alp.c **** 
  23:../../shields/Murata/src/alp.c **** #include "stdlib.h"
  24:../../shields/Murata/src/alp.c **** //#include "debug.h"
  25:../../shields/Murata/src/alp.c **** #include "errors.h"
  26:../../shields/Murata/src/alp.c **** 
  27:../../shields/Murata/src/alp.c **** #include "alp.h"
  28:../../shields/Murata/src/alp.c **** #include "dae.h"
  29:../../shields/Murata/src/alp.c **** #include "fifo.h"
  30:../../shields/Murata/src/alp.c **** #include "d7ap.h"
  31:../../shields/Murata/src/alp.c **** //#include "log.h"
  32:../../shields/Murata/src/alp.c **** #include "lorawan_stack.h"
ARM GAS  /tmp/ccaG3DAV.s 			page 2


  33:../../shields/Murata/src/alp.c **** 
  34:../../shields/Murata/src/alp.c **** #if defined(FRAMEWORK_LOG_ENABLED) && defined(FRAMEWORK_ALP_LOG_ENABLED)
  35:../../shields/Murata/src/alp.c ****   #define DPRINT(...) log_print_stack_string(LOG_STACK_ALP, __VA_ARGS__)
  36:../../shields/Murata/src/alp.c **** #else
  37:../../shields/Murata/src/alp.c ****   #define DPRINT(...)
  38:../../shields/Murata/src/alp.c **** #endif
  39:../../shields/Murata/src/alp.c **** 
  40:../../shields/Murata/src/alp.c **** 
  41:../../shields/Murata/src/alp.c **** alp_operation_t alp_get_operation(uint8_t* alp_command)
  42:../../shields/Murata/src/alp.c **** {
  43:../../shields/Murata/src/alp.c ****     alp_control_t alp_ctrl;
  44:../../shields/Murata/src/alp.c ****     alp_ctrl.raw = (*alp_command);
  45:../../shields/Murata/src/alp.c ****     return alp_ctrl.operation;
  46:../../shields/Murata/src/alp.c **** }
  47:../../shields/Murata/src/alp.c **** 
  48:../../shields/Murata/src/alp.c **** uint32_t alp_parse_length_operand(fifo_t* cmd_fifo) {
  49:../../shields/Murata/src/alp.c ****   uint8_t len = 0;
  50:../../shields/Murata/src/alp.c ****   fifo_pop(cmd_fifo, (uint8_t*)&len, 1);
  51:../../shields/Murata/src/alp.c ****   uint8_t field_len = len >> 6;
  52:../../shields/Murata/src/alp.c ****   if(field_len == 0)
  53:../../shields/Murata/src/alp.c ****     return (uint32_t)len;
  54:../../shields/Murata/src/alp.c **** 
  55:../../shields/Murata/src/alp.c ****   uint32_t full_length = (len & 0x3F) << ( 8 * field_len); // mask field length specificier bits an
  56:../../shields/Murata/src/alp.c ****   fifo_pop(cmd_fifo, (uint8_t*)&full_length, field_len);
  57:../../shields/Murata/src/alp.c ****   return full_length;
  58:../../shields/Murata/src/alp.c **** }
  59:../../shields/Murata/src/alp.c **** 
  60:../../shields/Murata/src/alp.c **** void alp_append_length_operand(fifo_t* fifo, uint32_t length) {
  61:../../shields/Murata/src/alp.c ****   if(length < 64) {
  62:../../shields/Murata/src/alp.c ****     // can be coded in one byte
  63:../../shields/Murata/src/alp.c ****     assert(fifo_put(fifo, (uint8_t*)&length, 1) == oss7SUCCESS);
  64:../../shields/Murata/src/alp.c ****     return;
  65:../../shields/Murata/src/alp.c ****   }
  66:../../shields/Murata/src/alp.c **** 
  67:../../shields/Murata/src/alp.c ****   uint8_t size = 1;
  68:../../shields/Murata/src/alp.c ****   if(length > 0x3FFF)
  69:../../shields/Murata/src/alp.c ****     size = 2;
  70:../../shields/Murata/src/alp.c ****   if(length > 0x3FFFFF)
  71:../../shields/Murata/src/alp.c ****     size = 3;
  72:../../shields/Murata/src/alp.c **** 
  73:../../shields/Murata/src/alp.c ****   uint8_t byte = 0;
  74:../../shields/Murata/src/alp.c ****   byte += (size << 6); // length specifier bits
  75:../../shields/Murata/src/alp.c ****   byte += ((uint8_t*)(&length))[size];
  76:../../shields/Murata/src/alp.c ****   assert(fifo_put(fifo, &byte, 1) == oss7SUCCESS);
  77:../../shields/Murata/src/alp.c ****   do {
  78:../../shields/Murata/src/alp.c ****     size--;
  79:../../shields/Murata/src/alp.c ****     assert(fifo_put(fifo, (uint8_t*)&length + size, 1) == oss7SUCCESS);
  80:../../shields/Murata/src/alp.c ****   } while(size > 0);
  81:../../shields/Murata/src/alp.c **** }
  82:../../shields/Murata/src/alp.c **** 
  83:../../shields/Murata/src/alp.c **** alp_operand_file_offset_t alp_parse_file_offset_operand(fifo_t* cmd_fifo) {
  84:../../shields/Murata/src/alp.c ****   alp_operand_file_offset_t operand;
  85:../../shields/Murata/src/alp.c ****   error_t err = fifo_pop(cmd_fifo, &operand.file_id, 1); assert(err == oss7SUCCESS);
  86:../../shields/Murata/src/alp.c ****   operand.offset = alp_parse_length_operand(cmd_fifo);
  87:../../shields/Murata/src/alp.c ****   return operand;
  88:../../shields/Murata/src/alp.c **** }
  89:../../shields/Murata/src/alp.c **** 
ARM GAS  /tmp/ccaG3DAV.s 			page 3


  90:../../shields/Murata/src/alp.c **** alp_operand_file_header_t alp_parse_file_header_operand(fifo_t* cmd_fifo) {
  91:../../shields/Murata/src/alp.c ****   alp_operand_file_header_t operand;
  92:../../shields/Murata/src/alp.c ****   error_t err = fifo_pop(cmd_fifo, &operand.file_id, 1); assert(err == oss7SUCCESS);
  93:../../shields/Murata/src/alp.c ****   err = fifo_pop(cmd_fifo, (uint8_t*)&operand.file_header, sizeof(fs_file_header_t)); assert(err ==
  94:../../shields/Murata/src/alp.c **** 
  95:../../shields/Murata/src/alp.c ****   // convert to little endian (native)
  96:../../shields/Murata/src/alp.c ****   operand.file_header.length = __builtin_bswap32(operand.file_header.length);
  97:../../shields/Murata/src/alp.c ****   operand.file_header.allocated_length = __builtin_bswap32(operand.file_header.allocated_length);
  98:../../shields/Murata/src/alp.c ****   return operand;
  99:../../shields/Murata/src/alp.c **** }
 100:../../shields/Murata/src/alp.c **** 
 101:../../shields/Murata/src/alp.c **** void alp_append_file_offset_operand(fifo_t* fifo, uint8_t file_id, uint32_t offset) {
 102:../../shields/Murata/src/alp.c ****   assert(fifo_put_byte(fifo, file_id) == oss7SUCCESS);
 103:../../shields/Murata/src/alp.c ****   alp_append_length_operand(fifo, offset);
 104:../../shields/Murata/src/alp.c **** }
 105:../../shields/Murata/src/alp.c **** 
 106:../../shields/Murata/src/alp.c **** void alp_append_forward_action(fifo_t* fifo, uint8_t itf_id, uint8_t *config, uint8_t config_len) {
 107:../../shields/Murata/src/alp.c ****   assert(config!=NULL);
 108:../../shields/Murata/src/alp.c ****   assert(fifo_put_byte(fifo, ALP_OP_FORWARD) == oss7SUCCESS);
 109:../../shields/Murata/src/alp.c ****   assert(fifo_put_byte(fifo, itf_id) == oss7SUCCESS);
 110:../../shields/Murata/src/alp.c **** 
 111:../../shields/Murata/src/alp.c ****   if (itf_id == ALP_ITF_ID_D7ASP)
 112:../../shields/Murata/src/alp.c ****   {
 113:../../shields/Murata/src/alp.c ****     assert(fifo_put_byte(fifo, ((d7ap_session_config_t*)config)->qos.raw) == oss7SUCCESS);
 114:../../shields/Murata/src/alp.c ****     assert(fifo_put_byte(fifo, ((d7ap_session_config_t*)config)->dormant_timeout) == oss7SUCCESS);
 115:../../shields/Murata/src/alp.c ****     assert(fifo_put_byte(fifo, ((d7ap_session_config_t*)config)->addressee.ctrl.raw) == oss7SUCCESS
 116:../../shields/Murata/src/alp.c ****     uint8_t id_length = d7ap_addressee_id_length(((d7ap_session_config_t*)config)->addressee.ctrl.i
 117:../../shields/Murata/src/alp.c ****     assert(fifo_put_byte(fifo, ((d7ap_session_config_t*)config)->addressee.access_class) == oss7SUC
 118:../../shields/Murata/src/alp.c ****     assert(fifo_put(fifo, ((d7ap_session_config_t*)config)->addressee.id, id_length) == oss7SUCCESS
 119:../../shields/Murata/src/alp.c ****   }
 120:../../shields/Murata/src/alp.c ****   else if(itf_id == ALP_ITF_ID_LORAWAN_ABP)
 121:../../shields/Murata/src/alp.c ****   {
 122:../../shields/Murata/src/alp.c ****     uint8_t control_byte = ((lorawan_session_config_abp_t*)config)->request_ack << 1;
 123:../../shields/Murata/src/alp.c ****     assert(fifo_put_byte(fifo, control_byte) == oss7SUCCESS);
 124:../../shields/Murata/src/alp.c ****     assert(fifo_put_byte(fifo, ((lorawan_session_config_abp_t*)config)->application_port) == oss7SU
 125:../../shields/Murata/src/alp.c ****     assert(fifo_put(fifo, ((lorawan_session_config_abp_t*)config)->nwkSKey, 16) == oss7SUCCESS);
 126:../../shields/Murata/src/alp.c ****     assert(fifo_put(fifo, ((lorawan_session_config_abp_t*)config)->appSKey, 16) == oss7SUCCESS);
 127:../../shields/Murata/src/alp.c ****     uint32_t dev_addr = __builtin_bswap32(((lorawan_session_config_abp_t*)config)->devAddr);
 128:../../shields/Murata/src/alp.c ****     assert(fifo_put(fifo, (uint8_t*)&dev_addr, 4) == oss7SUCCESS);
 129:../../shields/Murata/src/alp.c ****     uint32_t network_id = __builtin_bswap32(((lorawan_session_config_abp_t*)config)->network_id);
 130:../../shields/Murata/src/alp.c **** 
 131:../../shields/Murata/src/alp.c ****     assert(fifo_put(fifo, (uint8_t*)&network_id, 4) == oss7SUCCESS);
 132:../../shields/Murata/src/alp.c ****   }
 133:../../shields/Murata/src/alp.c ****   else if(itf_id == ALP_ITF_ID_LORAWAN_OTAA)
 134:../../shields/Murata/src/alp.c ****   {
 135:../../shields/Murata/src/alp.c ****     uint8_t control_byte = ((lorawan_session_config_otaa_t*)config)->request_ack << 1;
 136:../../shields/Murata/src/alp.c ****     assert(fifo_put_byte(fifo, control_byte) == oss7SUCCESS);
 137:../../shields/Murata/src/alp.c ****     assert(fifo_put_byte(fifo, ((lorawan_session_config_otaa_t*)config)->application_port) == oss7S
 138:../../shields/Murata/src/alp.c ****     assert(fifo_put(fifo, ((lorawan_session_config_otaa_t*)config)->devEUI, 8) == oss7SUCCESS);
 139:../../shields/Murata/src/alp.c ****     assert(fifo_put(fifo, ((lorawan_session_config_otaa_t*)config)->appEUI, 8) == oss7SUCCESS);
 140:../../shields/Murata/src/alp.c ****     assert(fifo_put(fifo, ((lorawan_session_config_otaa_t*)config)->appKey, 16) == oss7SUCCESS);
 141:../../shields/Murata/src/alp.c ****   }
 142:../../shields/Murata/src/alp.c ****   else
 143:../../shields/Murata/src/alp.c ****   {
 144:../../shields/Murata/src/alp.c ****     assert(fifo_put(fifo, config, config_len) == oss7SUCCESS);
 145:../../shields/Murata/src/alp.c ****   }
 146:../../shields/Murata/src/alp.c **** 
ARM GAS  /tmp/ccaG3DAV.s 			page 4


 147:../../shields/Murata/src/alp.c ****   DPRINT("FORWARD");
 148:../../shields/Murata/src/alp.c **** }
 149:../../shields/Murata/src/alp.c **** 
 150:../../shields/Murata/src/alp.c **** void alp_append_return_file_data_action(fifo_t* fifo, uint8_t file_id, uint32_t offset, uint32_t le
 151:../../shields/Murata/src/alp.c ****   assert(fifo_put_byte(fifo, ALP_OP_RETURN_FILE_DATA) == oss7SUCCESS);
 152:../../shields/Murata/src/alp.c ****   assert(fifo_put_byte(fifo, file_id) == oss7SUCCESS);
 153:../../shields/Murata/src/alp.c ****   alp_append_length_operand(fifo, offset);
 154:../../shields/Murata/src/alp.c ****   alp_append_length_operand(fifo, length);
 155:../../shields/Murata/src/alp.c ****   assert(fifo_put(fifo, data, length) == oss7SUCCESS);
 156:../../shields/Murata/src/alp.c **** }
 157:../../shields/Murata/src/alp.c **** 
 158:../../shields/Murata/src/alp.c **** static void append_tag_response(fifo_t* fifo, uint8_t tag_id, bool eop, bool error) {
 159:../../shields/Murata/src/alp.c ****   // fill response with tag response
 160:../../shields/Murata/src/alp.c ****   uint8_t op_return_tag = ALP_OP_RETURN_TAG | (eop << 7);
 161:../../shields/Murata/src/alp.c ****   op_return_tag |= (error << 6);
 162:../../shields/Murata/src/alp.c ****   error_t err = fifo_put_byte(fifo, op_return_tag); assert(err == oss7SUCCESS);
 163:../../shields/Murata/src/alp.c ****   err = fifo_put_byte(fifo, tag_id); assert(err == oss7SUCCESS);
 164:../../shields/Murata/src/alp.c **** }
 165:../../shields/Murata/src/alp.c **** 
 166:../../shields/Murata/src/alp.c **** 
 167:../../shields/Murata/src/alp.c **** static void add_interface_status_action(fifo_t* alp_response_fifo, uint8_t itf_id, uint8_t *status,
 168:../../shields/Murata/src/alp.c ****   if (itf_id == ALP_ITF_ID_D7ASP)
 169:../../shields/Murata/src/alp.c ****   {
 170:../../shields/Murata/src/alp.c ****     fifo_put_byte(alp_response_fifo, ALP_OP_RETURN_STATUS + (1 << 6));
 171:../../shields/Murata/src/alp.c ****     fifo_put_byte(alp_response_fifo, ALP_ITF_ID_D7ASP);
 172:../../shields/Murata/src/alp.c ****     //TODO insert status len
 173:../../shields/Murata/src/alp.c ****     fifo_put_byte(alp_response_fifo, ((d7ap_session_result_t*)status)->channel.channel_header);
 174:../../shields/Murata/src/alp.c ****     uint16_t center_freq_index_be = __builtin_bswap16(((d7ap_session_result_t*)status)->channel.cen
 175:../../shields/Murata/src/alp.c ****     fifo_put(alp_response_fifo, (uint8_t*)&center_freq_index_be, 2);
 176:../../shields/Murata/src/alp.c ****     fifo_put_byte(alp_response_fifo, ((d7ap_session_result_t*)status)->rx_level);
 177:../../shields/Murata/src/alp.c ****     fifo_put_byte(alp_response_fifo, ((d7ap_session_result_t*)status)->link_budget);
 178:../../shields/Murata/src/alp.c ****     fifo_put_byte(alp_response_fifo, ((d7ap_session_result_t*)status)->target_rx_level);
 179:../../shields/Murata/src/alp.c ****     fifo_put_byte(alp_response_fifo, ((d7ap_session_result_t*)status)->status.raw);
 180:../../shields/Murata/src/alp.c ****     fifo_put_byte(alp_response_fifo, ((d7ap_session_result_t*)status)->fifo_token);
 181:../../shields/Murata/src/alp.c ****     fifo_put_byte(alp_response_fifo, ((d7ap_session_result_t*)status)->seqnr);
 182:../../shields/Murata/src/alp.c ****     fifo_put_byte(alp_response_fifo, ((d7ap_session_result_t*)status)->response_to);
 183:../../shields/Murata/src/alp.c ****     fifo_put_byte(alp_response_fifo, ((d7ap_session_result_t*)status)->addressee.ctrl.raw);
 184:../../shields/Murata/src/alp.c ****     fifo_put_byte(alp_response_fifo, ((d7ap_session_result_t*)status)->addressee.access_class);
 185:../../shields/Murata/src/alp.c ****     uint8_t address_len = d7ap_addressee_id_length(((d7ap_session_result_t*)status)->addressee.ctrl
 186:../../shields/Murata/src/alp.c ****     fifo_put(alp_response_fifo, ((d7ap_session_result_t*)status)->addressee.id, address_len);
 187:../../shields/Murata/src/alp.c ****   }
 188:../../shields/Murata/src/alp.c **** }
 189:../../shields/Murata/src/alp.c **** 
 190:../../shields/Murata/src/alp.c **** 
 191:../../shields/Murata/src/alp.c **** static void parse_operand_file_data(fifo_t* fifo, alp_action_t* action) {
 192:../../shields/Murata/src/alp.c ****   action->file_data_operand.file_offset = alp_parse_file_offset_operand(fifo);
 193:../../shields/Murata/src/alp.c ****   action->file_data_operand.provided_data_length = alp_parse_length_operand(fifo);
 194:../../shields/Murata/src/alp.c ****   assert(action->file_data_operand.provided_data_length <= sizeof(action->file_data_operand.data));
 195:../../shields/Murata/src/alp.c ****   fifo_pop(fifo, action->file_data_operand.data, action->file_data_operand.provided_data_length);
 196:../../shields/Murata/src/alp.c **** }
 197:../../shields/Murata/src/alp.c **** 
 198:../../shields/Murata/src/alp.c **** static void parse_op_write_file_data(fifo_t* fifo, alp_action_t* action) {
 199:../../shields/Murata/src/alp.c ****   parse_operand_file_data(fifo, action);
 200:../../shields/Murata/src/alp.c ****   DPRINT("parsed write file data file %i, len %i", action->file_data_operand.file_offset.file_id, a
 201:../../shields/Murata/src/alp.c **** }
 202:../../shields/Murata/src/alp.c **** 
 203:../../shields/Murata/src/alp.c **** 
ARM GAS  /tmp/ccaG3DAV.s 			page 5


 204:../../shields/Murata/src/alp.c **** static void parse_op_return_file_data(fifo_t* fifo, alp_action_t* action) {
 205:../../shields/Murata/src/alp.c ****   parse_operand_file_data(fifo, action);
 206:../../shields/Murata/src/alp.c ****   DPRINT("parsed return file data file %i, len %i", action->file_data_operand.file_offset.file_id, 
 207:../../shields/Murata/src/alp.c **** }
 208:../../shields/Murata/src/alp.c **** 
 209:../../shields/Murata/src/alp.c **** static void parse_op_return_tag(fifo_t* fifo, alp_action_t* action, bool b6, bool b7) {
  27              		.loc 1 209 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              	.LVL0:
  32 0000 08B5     		push	{r3, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 3, -8
  36              		.cfi_offset 14, -4
 210:../../shields/Murata/src/alp.c ****   action->tag_response.completed = b7;
  37              		.loc 1 210 0
  38 0002 0B71     		strb	r3, [r1, #4]
 211:../../shields/Murata/src/alp.c ****   action->tag_response.error = b6;
  39              		.loc 1 211 0
  40 0004 4A71     		strb	r2, [r1, #5]
 212:../../shields/Murata/src/alp.c ****   assert(fifo_pop(fifo, &action->tag_response.tag_id, 1) == oss7SUCCESS);
  41              		.loc 1 212 0
  42 0006 0122     		movs	r2, #1
  43              	.LVL1:
  44 0008 0631     		adds	r1, r1, #6
  45              	.LVL2:
  46 000a FFF7FEFF 		bl	fifo_pop
  47              	.LVL3:
  48 000e 00B9     		cbnz	r0, .L4
  49 0010 08BD     		pop	{r3, pc}
  50              	.L4:
  51              		.loc 1 212 0 is_stmt 0 discriminator 1
  52 0012 034B     		ldr	r3, .L5
  53 0014 034A     		ldr	r2, .L5+4
  54 0016 D421     		movs	r1, #212
  55 0018 0348     		ldr	r0, .L5+8
  56 001a FFF7FEFF 		bl	__assert_func
  57              	.LVL4:
  58              	.L6:
  59 001e 00BF     		.align	2
  60              	.L5:
  61 0020 00000000 		.word	.LC0
  62 0024 00000000 		.word	.LANCHOR0
  63 0028 40000000 		.word	.LC1
  64              		.cfi_endproc
  65              	.LFE14:
  67              		.section	.text.parse_op_return_status,"ax",%progbits
  68              		.align	1
  69              		.syntax unified
  70              		.thumb
  71              		.thumb_func
  72              		.fpu fpv4-sp-d16
  74              	parse_op_return_status:
  75              	.LFB15:
 213:../../shields/Murata/src/alp.c ****   DPRINT("parsed return tag %i, eop %i, err %i", action->tag_response.tag_id, action->tag_response.
ARM GAS  /tmp/ccaG3DAV.s 			page 6


 214:../../shields/Murata/src/alp.c **** }
 215:../../shields/Murata/src/alp.c **** 
 216:../../shields/Murata/src/alp.c **** static void parse_op_return_status(fifo_t* fifo, alp_action_t* action, bool b6, bool b7) {
  76              		.loc 1 216 0 is_stmt 1
  77              		.cfi_startproc
  78              		@ args = 0, pretend = 0, frame = 24
  79              		@ frame_needed = 0, uses_anonymous_args = 0
  80              	.LVL5:
  81 0000 70B5     		push	{r4, r5, r6, lr}
  82              	.LCFI1:
  83              		.cfi_def_cfa_offset 16
  84              		.cfi_offset 4, -16
  85              		.cfi_offset 5, -12
  86              		.cfi_offset 6, -8
  87              		.cfi_offset 14, -4
  88 0002 86B0     		sub	sp, sp, #24
  89              	.LCFI2:
  90              		.cfi_def_cfa_offset 40
 217:../../shields/Murata/src/alp.c ****   assert(b6 && !b7); // TODO implement action status
  91              		.loc 1 217 0
  92 0004 AAB1     		cbz	r2, .L8
  93 0006 0446     		mov	r4, r0
  94 0008 0D46     		mov	r5, r1
  95              		.loc 1 217 0 is_stmt 0 discriminator 2
  96 000a 93B9     		cbnz	r3, .L8
 218:../../shields/Murata/src/alp.c ****   uint8_t itf_id;
 219:../../shields/Murata/src/alp.c ****   assert(fifo_pop(fifo, &itf_id, 1) == oss7SUCCESS);
  97              		.loc 1 219 0 is_stmt 1
  98 000c 0122     		movs	r2, #1
  99              	.LVL6:
 100 000e 0DF11701 		add	r1, sp, #23
 101              	.LVL7:
 102 0012 FFF7FEFF 		bl	fifo_pop
 103              	.LVL8:
 104 0016 90B9     		cbnz	r0, .L22
 220:../../shields/Murata/src/alp.c ****   // TODO uint32_t itf_len = parse_length_operand(fifo);
 221:../../shields/Murata/src/alp.c ****   // assert(itf_len == sizeof(d7ap_session_result_t));
 222:../../shields/Murata/src/alp.c ****   action->status.type=itf_id;
 105              		.loc 1 222 0
 106 0018 9DF81730 		ldrb	r3, [sp, #23]	@ zero_extendqisi2
 107 001c 85F80431 		strb	r3, [r5, #260]
 223:../../shields/Murata/src/alp.c ****   if (itf_id == ALP_ITF_ID_D7ASP)
 108              		.loc 1 223 0
 109 0020 D72B     		cmp	r3, #215
 110 0022 12D0     		beq	.L23
 224:../../shields/Murata/src/alp.c ****   {
 225:../../shields/Murata/src/alp.c ****     d7ap_session_result_t interface_status =  *((d7ap_session_result_t*)action->status.data);
 226:../../shields/Murata/src/alp.c **** 
 227:../../shields/Murata/src/alp.c ****     fifo_pop(fifo, &interface_status.channel.channel_header, 1);
 228:../../shields/Murata/src/alp.c ****     fifo_pop(fifo, (uint8_t*)&interface_status.channel.center_freq_index, 2);
 229:../../shields/Murata/src/alp.c ****     interface_status.channel.center_freq_index = __builtin_bswap16(interface_status.channel.center_
 230:../../shields/Murata/src/alp.c ****     fifo_pop(fifo, &interface_status.rx_level, 1);
 231:../../shields/Murata/src/alp.c ****     fifo_pop(fifo, &interface_status.link_budget, 1);
 232:../../shields/Murata/src/alp.c ****     fifo_pop(fifo, &interface_status.target_rx_level, 1);
 233:../../shields/Murata/src/alp.c ****     fifo_pop(fifo, &interface_status.status.raw, 1);
 234:../../shields/Murata/src/alp.c ****     fifo_pop(fifo, &interface_status.fifo_token, 1);
 235:../../shields/Murata/src/alp.c ****     fifo_pop(fifo, &interface_status.seqnr, 1);
ARM GAS  /tmp/ccaG3DAV.s 			page 7


 236:../../shields/Murata/src/alp.c ****     fifo_pop(fifo, &interface_status.response_to, 1);
 237:../../shields/Murata/src/alp.c ****     fifo_pop(fifo, &interface_status.addressee.ctrl.raw, 1);
 238:../../shields/Murata/src/alp.c ****     fifo_pop(fifo, &interface_status.addressee.access_class, 1);
 239:../../shields/Murata/src/alp.c ****     uint8_t addressee_len = d7ap_addressee_id_length(interface_status.addressee.ctrl.id_type);
 240:../../shields/Murata/src/alp.c ****     assert(fifo_pop(fifo, interface_status.addressee.id, addressee_len) == oss7SUCCESS);
 241:../../shields/Murata/src/alp.c ****   }
 242:../../shields/Murata/src/alp.c ****   else if ( (itf_id == ALP_ITF_ID_LORAWAN_OTAA) || (itf_id == ALP_ITF_ID_LORAWAN_ABP))
 111              		.loc 1 242 0
 112 0024 023B     		subs	r3, r3, #2
 113 0026 DBB2     		uxtb	r3, r3
 114 0028 012B     		cmp	r3, #1
 115 002a 40F28480 		bls	.L24
 116              	.LVL9:
 117              	.L7:
 243:../../shields/Murata/src/alp.c ****   {
 244:../../shields/Murata/src/alp.c ****     lorawan_session_result_t interface_status = *((lorawan_session_result_t*)action->status.data);
 245:../../shields/Murata/src/alp.c ****     fifo_skip(fifo,1); //size
 246:../../shields/Murata/src/alp.c ****     fifo_pop(fifo, &interface_status.attempts, 1);
 247:../../shields/Murata/src/alp.c ****     fifo_pop(fifo, &interface_status.error_state, 1);
 248:../../shields/Murata/src/alp.c ****   }
 249:../../shields/Murata/src/alp.c **** 
 250:../../shields/Murata/src/alp.c ****   DPRINT("parsed interface status");
 251:../../shields/Murata/src/alp.c **** }
 118              		.loc 1 251 0
 119 002e 06B0     		add	sp, sp, #24
 120              	.LCFI3:
 121              		.cfi_remember_state
 122              		.cfi_def_cfa_offset 16
 123              		@ sp needed
 124 0030 70BD     		pop	{r4, r5, r6, pc}
 125              	.LVL10:
 126              	.L8:
 127              	.LCFI4:
 128              		.cfi_restore_state
 217:../../shields/Murata/src/alp.c ****   uint8_t itf_id;
 129              		.loc 1 217 0 discriminator 3
 130 0032 4A4B     		ldr	r3, .L25
 131              	.LVL11:
 132 0034 4A4A     		ldr	r2, .L25+4
 133              	.LVL12:
 134 0036 D921     		movs	r1, #217
 135              	.LVL13:
 136 0038 4A48     		ldr	r0, .L25+8
 137              	.LVL14:
 138 003a FFF7FEFF 		bl	__assert_func
 139              	.LVL15:
 140              	.L22:
 219:../../shields/Murata/src/alp.c ****   // TODO uint32_t itf_len = parse_length_operand(fifo);
 141              		.loc 1 219 0 discriminator 1
 142 003e 4A4B     		ldr	r3, .L25+12
 143 0040 474A     		ldr	r2, .L25+4
 144 0042 DB21     		movs	r1, #219
 145 0044 4748     		ldr	r0, .L25+8
 146 0046 FFF7FEFF 		bl	__assert_func
 147              	.LVL16:
 148              	.L23:
 149              	.LBB6:
ARM GAS  /tmp/ccaG3DAV.s 			page 8


 225:../../shields/Murata/src/alp.c **** 
 150              		.loc 1 225 0
 151 004a 6E46     		mov	r6, sp
 152 004c 55F8040F 		ldr	r0, [r5, #4]!	@ unaligned
 153              	.LVL17:
 154 0050 6968     		ldr	r1, [r5, #4]	@ unaligned
 155 0052 AA68     		ldr	r2, [r5, #8]	@ unaligned
 156 0054 EB68     		ldr	r3, [r5, #12]	@ unaligned
 157 0056 0FC6     		stmia	r6!, {r0, r1, r2, r3}
 158 0058 2869     		ldr	r0, [r5, #16]	@ unaligned
 159 005a 3060     		str	r0, [r6]
 160 005c AA8A     		ldrh	r2, [r5, #20]	@ unaligned
 161 005e AB7D     		ldrb	r3, [r5, #22]	@ zero_extendqisi2
 162 0060 B280     		strh	r2, [r6, #4]	@ unaligned
 163 0062 B371     		strb	r3, [r6, #6]
 227:../../shields/Murata/src/alp.c ****     fifo_pop(fifo, (uint8_t*)&interface_status.channel.center_freq_index, 2);
 164              		.loc 1 227 0
 165 0064 0122     		movs	r2, #1
 166 0066 6946     		mov	r1, sp
 167 0068 2046     		mov	r0, r4
 168 006a FFF7FEFF 		bl	fifo_pop
 169              	.LVL18:
 228:../../shields/Murata/src/alp.c ****     interface_status.channel.center_freq_index = __builtin_bswap16(interface_status.channel.center_
 170              		.loc 1 228 0
 171 006e 0222     		movs	r2, #2
 172 0070 0DEB0201 		add	r1, sp, r2
 173 0074 2046     		mov	r0, r4
 174 0076 FFF7FEFF 		bl	fifo_pop
 175              	.LVL19:
 229:../../shields/Murata/src/alp.c ****     fifo_pop(fifo, &interface_status.rx_level, 1);
 176              		.loc 1 229 0
 177 007a BDF80230 		ldrh	r3, [sp, #2]
 178 007e 5BBA     		rev16	r3, r3
 179 0080 ADF80230 		strh	r3, [sp, #2]	@ movhi
 230:../../shields/Murata/src/alp.c ****     fifo_pop(fifo, &interface_status.link_budget, 1);
 180              		.loc 1 230 0
 181 0084 0122     		movs	r2, #1
 182 0086 01A9     		add	r1, sp, #4
 183 0088 2046     		mov	r0, r4
 184 008a FFF7FEFF 		bl	fifo_pop
 185              	.LVL20:
 231:../../shields/Murata/src/alp.c ****     fifo_pop(fifo, &interface_status.target_rx_level, 1);
 186              		.loc 1 231 0
 187 008e 0122     		movs	r2, #1
 188 0090 0DF10501 		add	r1, sp, #5
 189 0094 2046     		mov	r0, r4
 190 0096 FFF7FEFF 		bl	fifo_pop
 191              	.LVL21:
 232:../../shields/Murata/src/alp.c ****     fifo_pop(fifo, &interface_status.status.raw, 1);
 192              		.loc 1 232 0
 193 009a 0122     		movs	r2, #1
 194 009c 0DF10701 		add	r1, sp, #7
 195 00a0 2046     		mov	r0, r4
 196 00a2 FFF7FEFF 		bl	fifo_pop
 197              	.LVL22:
 233:../../shields/Murata/src/alp.c ****     fifo_pop(fifo, &interface_status.fifo_token, 1);
 198              		.loc 1 233 0
ARM GAS  /tmp/ccaG3DAV.s 			page 9


 199 00a6 0122     		movs	r2, #1
 200 00a8 02A9     		add	r1, sp, #8
 201 00aa 2046     		mov	r0, r4
 202 00ac FFF7FEFF 		bl	fifo_pop
 203              	.LVL23:
 234:../../shields/Murata/src/alp.c ****     fifo_pop(fifo, &interface_status.seqnr, 1);
 204              		.loc 1 234 0
 205 00b0 0122     		movs	r2, #1
 206 00b2 0DF10901 		add	r1, sp, #9
 207 00b6 2046     		mov	r0, r4
 208 00b8 FFF7FEFF 		bl	fifo_pop
 209              	.LVL24:
 235:../../shields/Murata/src/alp.c ****     fifo_pop(fifo, &interface_status.response_to, 1);
 210              		.loc 1 235 0
 211 00bc 0122     		movs	r2, #1
 212 00be 0DF10A01 		add	r1, sp, #10
 213 00c2 2046     		mov	r0, r4
 214 00c4 FFF7FEFF 		bl	fifo_pop
 215              	.LVL25:
 236:../../shields/Murata/src/alp.c ****     fifo_pop(fifo, &interface_status.addressee.ctrl.raw, 1);
 216              		.loc 1 236 0
 217 00c8 0122     		movs	r2, #1
 218 00ca 0DF10B01 		add	r1, sp, #11
 219 00ce 2046     		mov	r0, r4
 220 00d0 FFF7FEFF 		bl	fifo_pop
 221              	.LVL26:
 237:../../shields/Murata/src/alp.c ****     fifo_pop(fifo, &interface_status.addressee.access_class, 1);
 222              		.loc 1 237 0
 223 00d4 0122     		movs	r2, #1
 224 00d6 0DF10D01 		add	r1, sp, #13
 225 00da 2046     		mov	r0, r4
 226 00dc FFF7FEFF 		bl	fifo_pop
 227              	.LVL27:
 238:../../shields/Murata/src/alp.c ****     uint8_t addressee_len = d7ap_addressee_id_length(interface_status.addressee.ctrl.id_type);
 228              		.loc 1 238 0
 229 00e0 0122     		movs	r2, #1
 230 00e2 0DF10E01 		add	r1, sp, #14
 231 00e6 2046     		mov	r0, r4
 232 00e8 FFF7FEFF 		bl	fifo_pop
 233              	.LVL28:
 239:../../shields/Murata/src/alp.c ****     assert(fifo_pop(fifo, interface_status.addressee.id, addressee_len) == oss7SUCCESS);
 234              		.loc 1 239 0
 235 00ec 9DF80D30 		ldrb	r3, [sp, #13]	@ zero_extendqisi2
 236 00f0 C3F30113 		ubfx	r3, r3, #4, #2
 237              	.LVL29:
 238              	.LBB7:
 239              	.LBB8:
 240              		.file 2 "../../shields/Murata/inc/d7ap.h"
   1:../../shields/Murata/inc/d7ap.h **** 
   2:../../shields/Murata/inc/d7ap.h **** /* * OSS-7 - An opensource implementation of the DASH7 Alliance Protocol for ultra
   3:../../shields/Murata/inc/d7ap.h ****  * lowpower wireless sensor communication
   4:../../shields/Murata/inc/d7ap.h ****  *
   5:../../shields/Murata/inc/d7ap.h ****  * Copyright 2018 University of Antwerp
   6:../../shields/Murata/inc/d7ap.h ****  * Copyright 2018 CORTUS SA
   7:../../shields/Murata/inc/d7ap.h ****  *
   8:../../shields/Murata/inc/d7ap.h ****  * Licensed under the Apache License, Version 2.0 (the "License");
   9:../../shields/Murata/inc/d7ap.h ****  * you may not use this file except in compliance with the License.
ARM GAS  /tmp/ccaG3DAV.s 			page 10


  10:../../shields/Murata/inc/d7ap.h ****  * You may obtain a copy of the License at
  11:../../shields/Murata/inc/d7ap.h ****  *
  12:../../shields/Murata/inc/d7ap.h ****  *   http://www.apache.org/licenses/LICENSE-2.0
  13:../../shields/Murata/inc/d7ap.h ****  *
  14:../../shields/Murata/inc/d7ap.h ****  * Unless required by applicable law or agreed to in writing, software
  15:../../shields/Murata/inc/d7ap.h ****  * distributed under the License is distributed on an "AS IS" BASIS,
  16:../../shields/Murata/inc/d7ap.h ****  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  17:../../shields/Murata/inc/d7ap.h ****  * See the License for the specific language governing permissions and
  18:../../shields/Murata/inc/d7ap.h ****  * limitations under the License.
  19:../../shields/Murata/inc/d7ap.h ****  *
  20:../../shields/Murata/inc/d7ap.h ****  * \author philippe.nunes@cortus.com
  21:../../shields/Murata/inc/d7ap.h ****  */
  22:../../shields/Murata/inc/d7ap.h **** 
  23:../../shields/Murata/inc/d7ap.h **** /**
  24:../../shields/Murata/inc/d7ap.h ****  * @file d7ap.h
  25:../../shields/Murata/inc/d7ap.h ****  * @addtogroup d7ap
  26:../../shields/Murata/inc/d7ap.h ****  * @ingroup framework
  27:../../shields/Murata/inc/d7ap.h ****  * @{
  28:../../shields/Murata/inc/d7ap.h ****  * @brief D7AP public types (used for modem and/or D7AP stack itself)
  29:../../shields/Murata/inc/d7ap.h ****  *
  30:../../shields/Murata/inc/d7ap.h ****  */
  31:../../shields/Murata/inc/d7ap.h **** 
  32:../../shields/Murata/inc/d7ap.h **** #ifndef D7AP_H
  33:../../shields/Murata/inc/d7ap.h **** #define D7AP_H
  34:../../shields/Murata/inc/d7ap.h **** 
  35:../../shields/Murata/inc/d7ap.h **** #include "types.h"
  36:../../shields/Murata/inc/d7ap.h **** #include "assert.h"
  37:../../shields/Murata/inc/d7ap.h **** 
  38:../../shields/Murata/inc/d7ap.h **** #define D7AP_MAX_CLIENT_COUNT 8
  39:../../shields/Murata/inc/d7ap.h **** 
  40:../../shields/Murata/inc/d7ap.h **** #define D7A_FILE_UID_FILE_ID 0x00
  41:../../shields/Murata/inc/d7ap.h **** #define D7A_FILE_UID_SIZE 8
  42:../../shields/Murata/inc/d7ap.h **** 
  43:../../shields/Murata/inc/d7ap.h **** #define D7A_FILE_FIRMWARE_VERSION_FILE_ID 0x02
  44:../../shields/Murata/inc/d7ap.h **** #define D7A_FILE_FIRMWARE_VERSION_APP_NAME_SIZE 6
  45:../../shields/Murata/inc/d7ap.h **** #define D7A_FILE_FIRMWARE_VERSION_GIT_SHA1_SIZE 7
  46:../../shields/Murata/inc/d7ap.h **** #define D7A_FILE_FIRMWARE_VERSION_SIZE (2 + D7A_FILE_FIRMWARE_VERSION_APP_NAME_SIZE + D7A_FILE_FIRM
  47:../../shields/Murata/inc/d7ap.h **** 
  48:../../shields/Murata/inc/d7ap.h **** #define D7A_FILE_DLL_CONF_FILE_ID	0x0A
  49:../../shields/Murata/inc/d7ap.h **** #define D7A_FILE_DLL_CONF_SIZE		6
  50:../../shields/Murata/inc/d7ap.h **** 
  51:../../shields/Murata/inc/d7ap.h **** #define D7A_FILE_ACCESS_PROFILE_ID 0x20 // the first access class file
  52:../../shields/Murata/inc/d7ap.h **** #define D7A_FILE_ACCESS_PROFILE_SIZE 65
  53:../../shields/Murata/inc/d7ap.h **** #define D7A_FILE_ACCESS_PROFILE_COUNT 15
  54:../../shields/Murata/inc/d7ap.h **** 
  55:../../shields/Murata/inc/d7ap.h **** #define D7A_FILE_NWL_SECURITY		0x0D
  56:../../shields/Murata/inc/d7ap.h **** #define D7A_FILE_NWL_SECURITY_SIZE	5
  57:../../shields/Murata/inc/d7ap.h **** 
  58:../../shields/Murata/inc/d7ap.h **** #define D7A_FILE_NWL_SECURITY_KEY		0x0E
  59:../../shields/Murata/inc/d7ap.h **** #define D7A_FILE_NWL_SECURITY_KEY_SIZE	16
  60:../../shields/Murata/inc/d7ap.h **** 
  61:../../shields/Murata/inc/d7ap.h **** #define D7A_FILE_NWL_SECURITY_STATE_REG			0x0F
  62:../../shields/Murata/inc/d7ap.h **** #define D7A_FILE_NWL_SECURITY_STATE_REG_SIZE	2 + (FRAMEWORK_FS_TRUSTED_NODE_TABLE_SIZE)*(D7A_FILE_N
  63:../../shields/Murata/inc/d7ap.h **** 
  64:../../shields/Murata/inc/d7ap.h **** 
  65:../../shields/Murata/inc/d7ap.h **** #define ID_TYPE_NBID_ID_LENGTH 1
  66:../../shields/Murata/inc/d7ap.h **** #define ID_TYPE_NOID_ID_LENGTH 0
ARM GAS  /tmp/ccaG3DAV.s 			page 11


  67:../../shields/Murata/inc/d7ap.h **** #define ID_TYPE_UID_ID_LENGTH   8
  68:../../shields/Murata/inc/d7ap.h **** #define ID_TYPE_VID_LENGTH      2
  69:../../shields/Murata/inc/d7ap.h **** 
  70:../../shields/Murata/inc/d7ap.h **** #define ID_TYPE_IS_BROADCAST(id_type) (id_type == ID_TYPE_NBID || id_type == ID_TYPE_NOID)
  71:../../shields/Murata/inc/d7ap.h **** 
  72:../../shields/Murata/inc/d7ap.h **** #define D7A_PAYLOAD_MAX_SIZE 239 // TODO confirm this value when FEC and security are disabled
  73:../../shields/Murata/inc/d7ap.h **** 
  74:../../shields/Murata/inc/d7ap.h **** 
  75:../../shields/Murata/inc/d7ap.h **** typedef enum {
  76:../../shields/Murata/inc/d7ap.h ****     ID_TYPE_NBID = 0,
  77:../../shields/Murata/inc/d7ap.h ****     ID_TYPE_NOID = 1,
  78:../../shields/Murata/inc/d7ap.h ****     ID_TYPE_UID = 2,
  79:../../shields/Murata/inc/d7ap.h ****     ID_TYPE_VID = 3
  80:../../shields/Murata/inc/d7ap.h **** } d7ap_addressee_id_type_t;
  81:../../shields/Murata/inc/d7ap.h **** 
  82:../../shields/Murata/inc/d7ap.h **** typedef enum
  83:../../shields/Murata/inc/d7ap.h **** {
  84:../../shields/Murata/inc/d7ap.h ****     AES_NONE = 0, /* No security */
  85:../../shields/Murata/inc/d7ap.h ****     AES_CTR = 0x01, /* data confidentiality */
  86:../../shields/Murata/inc/d7ap.h ****     AES_CBC_MAC_128 = 0x02, /* data authenticity */
  87:../../shields/Murata/inc/d7ap.h ****     AES_CBC_MAC_64 = 0x03, /* data authenticity */
  88:../../shields/Murata/inc/d7ap.h ****     AES_CBC_MAC_32 = 0x04, /* data authenticity */
  89:../../shields/Murata/inc/d7ap.h ****     AES_CCM_128 = 0x05, /* data confidentiality and authenticity*/
  90:../../shields/Murata/inc/d7ap.h ****     AES_CCM_64 = 0x06, /* data confidentiality and authenticity*/
  91:../../shields/Murata/inc/d7ap.h ****     AES_CCM_32 = 0x07, /* data confidentiality and authenticity*/
  92:../../shields/Murata/inc/d7ap.h **** } nls_method_t;
  93:../../shields/Murata/inc/d7ap.h **** 
  94:../../shields/Murata/inc/d7ap.h **** typedef struct {
  95:../../shields/Murata/inc/d7ap.h ****     union {
  96:../../shields/Murata/inc/d7ap.h ****         uint8_t raw;
  97:../../shields/Murata/inc/d7ap.h ****         struct {
  98:../../shields/Murata/inc/d7ap.h ****             nls_method_t nls_method : 4;
  99:../../shields/Murata/inc/d7ap.h ****             d7ap_addressee_id_type_t id_type : 2;
 100:../../shields/Murata/inc/d7ap.h ****             uint8_t _rfu : 2;
 101:../../shields/Murata/inc/d7ap.h ****         };
 102:../../shields/Murata/inc/d7ap.h ****     };
 103:../../shields/Murata/inc/d7ap.h **** } d7ap_addressee_ctrl_t;
 104:../../shields/Murata/inc/d7ap.h **** 
 105:../../shields/Murata/inc/d7ap.h **** typedef struct __attribute__((__packed__)) {
 106:../../shields/Murata/inc/d7ap.h ****     d7ap_addressee_ctrl_t ctrl;
 107:../../shields/Murata/inc/d7ap.h ****     union {
 108:../../shields/Murata/inc/d7ap.h ****         uint8_t access_class;
 109:../../shields/Murata/inc/d7ap.h ****         struct {
 110:../../shields/Murata/inc/d7ap.h ****             uint8_t access_mask : 4;
 111:../../shields/Murata/inc/d7ap.h ****             uint8_t access_specifier : 4;
 112:../../shields/Murata/inc/d7ap.h ****         };
 113:../../shields/Murata/inc/d7ap.h ****     };
 114:../../shields/Murata/inc/d7ap.h ****     uint8_t id[8]; // TODO assuming 8 byte id for now
 115:../../shields/Murata/inc/d7ap.h **** } d7ap_addressee_t;
 116:../../shields/Murata/inc/d7ap.h **** 
 117:../../shields/Murata/inc/d7ap.h **** typedef struct {
 118:../../shields/Murata/inc/d7ap.h ****     union {
 119:../../shields/Murata/inc/d7ap.h ****         uint8_t raw;
 120:../../shields/Murata/inc/d7ap.h ****         struct {
 121:../../shields/Murata/inc/d7ap.h ****             uint8_t _rfu : 4;
 122:../../shields/Murata/inc/d7ap.h ****             bool ucast : 1;
 123:../../shields/Murata/inc/d7ap.h ****             bool retry : 1;
ARM GAS  /tmp/ccaG3DAV.s 			page 12


 124:../../shields/Murata/inc/d7ap.h ****             bool missed : 1;
 125:../../shields/Murata/inc/d7ap.h ****             bool nls : 1;
 126:../../shields/Murata/inc/d7ap.h ****         };
 127:../../shields/Murata/inc/d7ap.h ****     };
 128:../../shields/Murata/inc/d7ap.h **** } d7ap_sp_state_t;
 129:../../shields/Murata/inc/d7ap.h **** 
 130:../../shields/Murata/inc/d7ap.h **** typedef struct
 131:../../shields/Murata/inc/d7ap.h **** {
 132:../../shields/Murata/inc/d7ap.h ****     uint8_t channel_header;         /**< PHY layer channel header */
 133:../../shields/Murata/inc/d7ap.h ****     uint16_t center_freq_index;     /**< The center frequency index of the channel id */
 134:../../shields/Murata/inc/d7ap.h **** } d7ap_channel_t;
 135:../../shields/Murata/inc/d7ap.h **** 
 136:../../shields/Murata/inc/d7ap.h **** typedef struct __attribute__((__packed__)) {
 137:../../shields/Murata/inc/d7ap.h ****     d7ap_channel_t channel;
 138:../../shields/Murata/inc/d7ap.h ****     uint8_t rx_level;
 139:../../shields/Murata/inc/d7ap.h ****     uint8_t link_budget;
 140:../../shields/Murata/inc/d7ap.h ****     uint8_t link_quality;
 141:../../shields/Murata/inc/d7ap.h ****     uint8_t target_rx_level;
 142:../../shields/Murata/inc/d7ap.h ****     d7ap_sp_state_t status;
 143:../../shields/Murata/inc/d7ap.h ****     uint8_t fifo_token;
 144:../../shields/Murata/inc/d7ap.h ****     uint8_t seqnr;
 145:../../shields/Murata/inc/d7ap.h ****     uint8_t response_to;
 146:../../shields/Murata/inc/d7ap.h ****     bool response_expected;
 147:../../shields/Murata/inc/d7ap.h ****     d7ap_addressee_t addressee;
 148:../../shields/Murata/inc/d7ap.h **** } d7ap_session_result_t;
 149:../../shields/Murata/inc/d7ap.h **** 
 150:../../shields/Murata/inc/d7ap.h **** typedef enum  {
 151:../../shields/Murata/inc/d7ap.h ****     SESSION_RESP_MODE_NO = 0,
 152:../../shields/Murata/inc/d7ap.h ****     SESSION_RESP_MODE_ALL = 1,
 153:../../shields/Murata/inc/d7ap.h ****     SESSION_RESP_MODE_ANY = 2,
 154:../../shields/Murata/inc/d7ap.h ****     SESSION_RESP_MODE_NO_RPT = 4,
 155:../../shields/Murata/inc/d7ap.h ****     SESSION_RESP_MODE_ON_ERR = 5,
 156:../../shields/Murata/inc/d7ap.h ****     SESSION_RESP_MODE_PREFERRED = 6,
 157:../../shields/Murata/inc/d7ap.h **** } d7ap_session_resp_mode_t;
 158:../../shields/Murata/inc/d7ap.h **** 
 159:../../shields/Murata/inc/d7ap.h **** typedef enum {
 160:../../shields/Murata/inc/d7ap.h ****     SESSION_RETRY_MODE_NO = 0
 161:../../shields/Murata/inc/d7ap.h **** } d7ap_session_retry_mode_t;
 162:../../shields/Murata/inc/d7ap.h **** 
 163:../../shields/Murata/inc/d7ap.h **** typedef struct {
 164:../../shields/Murata/inc/d7ap.h ****     union {
 165:../../shields/Murata/inc/d7ap.h ****         uint8_t raw;
 166:../../shields/Murata/inc/d7ap.h ****         struct {
 167:../../shields/Murata/inc/d7ap.h ****             d7ap_session_resp_mode_t qos_resp_mode : 3;
 168:../../shields/Murata/inc/d7ap.h ****             d7ap_session_retry_mode_t qos_retry_mode: 3;
 169:../../shields/Murata/inc/d7ap.h ****             bool qos_record : 1;
 170:../../shields/Murata/inc/d7ap.h ****             bool qos_stop_on_error : 1;
 171:../../shields/Murata/inc/d7ap.h ****         };
 172:../../shields/Murata/inc/d7ap.h ****     };
 173:../../shields/Murata/inc/d7ap.h **** } d7ap_session_qos_t;
 174:../../shields/Murata/inc/d7ap.h **** 
 175:../../shields/Murata/inc/d7ap.h **** typedef struct {
 176:../../shields/Murata/inc/d7ap.h ****     d7ap_session_qos_t qos;
 177:../../shields/Murata/inc/d7ap.h ****     uint8_t dormant_timeout;
 178:../../shields/Murata/inc/d7ap.h ****     d7ap_addressee_t addressee;
 179:../../shields/Murata/inc/d7ap.h **** } d7ap_session_config_t;
 180:../../shields/Murata/inc/d7ap.h **** 
ARM GAS  /tmp/ccaG3DAV.s 			page 13


 181:../../shields/Murata/inc/d7ap.h **** typedef void (*d7ap_receive_callback)(uint16_t trans_id, uint8_t* payload, uint8_t len, d7ap_sessio
 182:../../shields/Murata/inc/d7ap.h **** /**
 183:../../shields/Murata/inc/d7ap.h ****  * @brief Called when the stack received an unsolicited message
 184:../../shields/Murata/inc/d7ap.h ****  * @returns true when the unsolicited request will result in a response payload from the upper laye
 185:../../shields/Murata/inc/d7ap.h ****  * the upper layer should return false, so the stack can respond with an ack immediately (if reques
 186:../../shields/Murata/inc/d7ap.h ****  */
 187:../../shields/Murata/inc/d7ap.h **** typedef bool (*d7ap_receive_unsolicited_callback)(uint8_t* payload, uint8_t len, d7ap_session_resul
 188:../../shields/Murata/inc/d7ap.h **** typedef void (*d7ap_transmitted_callback)(uint16_t trans_id, error_t error);
 189:../../shields/Murata/inc/d7ap.h **** 
 190:../../shields/Murata/inc/d7ap.h **** typedef struct{
 191:../../shields/Murata/inc/d7ap.h ****     d7ap_receive_callback  receive_cb;                /*< receive callback,
 192:../../shields/Murata/inc/d7ap.h ****                                                           if NULL, all message received for clientI
 193:../../shields/Murata/inc/d7ap.h ****     d7ap_transmitted_callback transmitted_cb;         /*< send completion callback,
 194:../../shields/Murata/inc/d7ap.h ****                                                           if NULL, the associated packet will be re
 195:../../shields/Murata/inc/d7ap.h ****     d7ap_receive_unsolicited_callback unsolicited_cb; /*< unsolicited data callback,
 196:../../shields/Murata/inc/d7ap.h ****                                                           if NULL, the associated packet will be re
 197:../../shields/Murata/inc/d7ap.h **** } d7ap_resource_desc_t;
 198:../../shields/Murata/inc/d7ap.h **** 
 199:../../shields/Murata/inc/d7ap.h **** 
 200:../../shields/Murata/inc/d7ap.h **** //=========================== prototypes ======================================
 201:../../shields/Murata/inc/d7ap.h **** /**
 202:../../shields/Murata/inc/d7ap.h ****  * @brief   Initializes d7a module
 203:../../shields/Murata/inc/d7ap.h ****  */
 204:../../shields/Murata/inc/d7ap.h **** void d7ap_init(void);
 205:../../shields/Murata/inc/d7ap.h **** 
 206:../../shields/Murata/inc/d7ap.h **** 
 207:../../shields/Murata/inc/d7ap.h **** /**
 208:../../shields/Murata/inc/d7ap.h ****  * @brief   Register the client callbacks
 209:../../shields/Murata/inc/d7ap.h ****  *
 210:../../shields/Murata/inc/d7ap.h ****  * @param[in] desc pointer to the client resource
 211:../../shields/Murata/inc/d7ap.h ****  *
 212:../../shields/Murata/inc/d7ap.h ****  * @return  the client Id
 213:../../shields/Murata/inc/d7ap.h ****  */
 214:../../shields/Murata/inc/d7ap.h **** uint8_t d7ap_register(d7ap_resource_desc_t* desc);
 215:../../shields/Murata/inc/d7ap.h **** 
 216:../../shields/Murata/inc/d7ap.h **** 
 217:../../shields/Murata/inc/d7ap.h **** /**
 218:../../shields/Murata/inc/d7ap.h ****  * @brief   Gets the device address UID/VID
 219:../../shields/Murata/inc/d7ap.h ****  *
 220:../../shields/Murata/inc/d7ap.h ****  * @param[out] *addr   Pointer to the device addressee UID/VID
 221:../../shields/Murata/inc/d7ap.h ****  */
 222:../../shields/Murata/inc/d7ap.h **** void d7ap_get_dev_addr(d7ap_addressee_t* addr);
 223:../../shields/Murata/inc/d7ap.h **** 
 224:../../shields/Murata/inc/d7ap.h **** 
 225:../../shields/Murata/inc/d7ap.h **** /**
 226:../../shields/Murata/inc/d7ap.h ****  * @brief Get the maximum payload size.
 227:../../shields/Murata/inc/d7ap.h ****  *
 228:../../shields/Murata/inc/d7ap.h ****  * @param[in] clientId  The d7A  instance Id.
 229:../../shields/Murata/inc/d7ap.h ****  *
 230:../../shields/Murata/inc/d7ap.h ****  * @returns the maximum payload size in bytes.
 231:../../shields/Murata/inc/d7ap.h ****  */
 232:../../shields/Murata/inc/d7ap.h **** uint8_t d7ap_get_payload_max_size(uint8_t clientId);
 233:../../shields/Murata/inc/d7ap.h **** 
 234:../../shields/Murata/inc/d7ap.h **** 
 235:../../shields/Murata/inc/d7ap.h **** /**
 236:../../shields/Murata/inc/d7ap.h ****  * @brief   Send a packet over DASH7 network
 237:../../shields/Murata/inc/d7ap.h ****  *
ARM GAS  /tmp/ccaG3DAV.s 			page 14


 238:../../shields/Murata/inc/d7ap.h ****  * @param[in] clientID  The registered client Id
 239:../../shields/Murata/inc/d7ap.h ****  * @param[in] config    The configuration for the d7a session. Set to NULL to use the current confi
 240:../../shields/Murata/inc/d7ap.h ****  * @param[in] payload   The pointer to the payload buffer
 241:../../shields/Murata/inc/d7ap.h ****  * @param[in] len       The length of the payload
 242:../../shields/Murata/inc/d7ap.h ****  * @param[in] expected_response_len The length of the expected response
 243:../../shields/Murata/inc/d7ap.h ****  * @param[in,out] trans_id   Set the value of this parameter to NULL to cause the function to execu
 244:../../shields/Murata/inc/d7ap.h ****  *                           If this parameter is not NULL, the call executes asynchronously. Upon 
 245:../../shields/Murata/inc/d7ap.h ****  *                           this points to the transaction identifier associated with the asynchro
 246:../../shields/Murata/inc/d7ap.h ****  * @return 0 on success
 247:../../shields/Murata/inc/d7ap.h ****  * @return an error (errno.h) in case of failure
 248:../../shields/Murata/inc/d7ap.h ****  */
 249:../../shields/Murata/inc/d7ap.h **** error_t d7ap_send(uint8_t clientId, d7ap_session_config_t* config, uint8_t* payload,
 250:../../shields/Murata/inc/d7ap.h ****                    uint8_t len, uint8_t expected_response_len, uint16_t* trans_id);
 251:../../shields/Murata/inc/d7ap.h **** 
 252:../../shields/Murata/inc/d7ap.h **** 
 253:../../shields/Murata/inc/d7ap.h **** /**
 254:../../shields/Murata/inc/d7ap.h ****  * @brief   Sets the channels TX power index
 255:../../shields/Murata/inc/d7ap.h ****  *
 256:../../shields/Murata/inc/d7ap.h ****  * @param[in] power  The TX power index (from 1 to 16)
 257:../../shields/Murata/inc/d7ap.h ****  */
 258:../../shields/Murata/inc/d7ap.h **** void d7ap_set_tx_power(uint8_t power);
 259:../../shields/Murata/inc/d7ap.h **** 
 260:../../shields/Murata/inc/d7ap.h **** 
 261:../../shields/Murata/inc/d7ap.h **** /**
 262:../../shields/Murata/inc/d7ap.h ****  * @brief   Gets the channels TX power index
 263:../../shields/Murata/inc/d7ap.h ****  *
 264:../../shields/Murata/inc/d7ap.h ****  * @return  The TX power index (from 1 to 16)
 265:../../shields/Murata/inc/d7ap.h ****  */
 266:../../shields/Murata/inc/d7ap.h **** uint8_t d7ap_get_tx_power(void);
 267:../../shields/Murata/inc/d7ap.h **** 
 268:../../shields/Murata/inc/d7ap.h **** 
 269:../../shields/Murata/inc/d7ap.h **** /**
 270:../../shields/Murata/inc/d7ap.h ****  * @brief   Sets the device access class
 271:../../shields/Murata/inc/d7ap.h ****  *
 272:../../shields/Murata/inc/d7ap.h ****  * @param[in] access_class  The device access class
 273:../../shields/Murata/inc/d7ap.h ****  */
 274:../../shields/Murata/inc/d7ap.h **** void d7ap_set_access_class(uint8_t access_class);
 275:../../shields/Murata/inc/d7ap.h **** 
 276:../../shields/Murata/inc/d7ap.h **** 
 277:../../shields/Murata/inc/d7ap.h **** /**
 278:../../shields/Murata/inc/d7ap.h ****  * @brief   Gets the device access class
 279:../../shields/Murata/inc/d7ap.h ****  *
 280:../../shields/Murata/inc/d7ap.h ****  * @return  The device access class
 281:../../shields/Murata/inc/d7ap.h ****  */
 282:../../shields/Murata/inc/d7ap.h **** uint8_t d7ap_get_access_class(void);
 283:../../shields/Murata/inc/d7ap.h **** 
 284:../../shields/Murata/inc/d7ap.h **** /**
 285:../../shields/Murata/inc/d7ap.h ****  * @brief   Gets the length of the addressee Id
 286:../../shields/Murata/inc/d7ap.h ****  *
 287:../../shields/Murata/inc/d7ap.h ****  * @param[in] id_type  The addressee Id type
 288:../../shields/Murata/inc/d7ap.h ****  * @return  The length of the addressee Id according the addressee Id type
 289:../../shields/Murata/inc/d7ap.h ****  */
 290:../../shields/Murata/inc/d7ap.h **** static inline uint8_t d7ap_addressee_id_length(d7ap_addressee_id_type_t id_type) {
 291:../../shields/Murata/inc/d7ap.h ****   switch(id_type)
 241              		.loc 2 291 0
 242 00f4 032B     		cmp	r3, #3
 243 00f6 07D8     		bhi	.L12
ARM GAS  /tmp/ccaG3DAV.s 			page 15


 244 00f8 DFE803F0 		tbb	[pc, r3]
 245              	.L14:
 246 00fc 0F       		.byte	(.L20-.L14)/2
 247 00fd 0D       		.byte	(.L15-.L14)/2
 248 00fe 02       		.byte	(.L16-.L14)/2
 249 00ff 04       		.byte	(.L17-.L14)/2
 250              		.p2align 1
 251              	.L16:
 292:../../shields/Murata/inc/d7ap.h ****   {
 293:../../shields/Murata/inc/d7ap.h ****       case ID_TYPE_NOID:
 294:../../shields/Murata/inc/d7ap.h ****         return ID_TYPE_NOID_ID_LENGTH;
 295:../../shields/Murata/inc/d7ap.h ****       case ID_TYPE_NBID:
 296:../../shields/Murata/inc/d7ap.h ****         return ID_TYPE_NBID_ID_LENGTH;
 297:../../shields/Murata/inc/d7ap.h ****       case ID_TYPE_UID:
 298:../../shields/Murata/inc/d7ap.h ****         return ID_TYPE_UID_ID_LENGTH;
 252              		.loc 2 298 0
 253 0100 0822     		movs	r2, #8
 254 0102 0BE0     		b	.L13
 255              	.L17:
 299:../../shields/Murata/inc/d7ap.h ****       case ID_TYPE_VID:
 300:../../shields/Murata/inc/d7ap.h ****         return ID_TYPE_VID_LENGTH;
 256              		.loc 2 300 0
 257 0104 0222     		movs	r2, #2
 258 0106 09E0     		b	.L13
 259              	.L12:
 301:../../shields/Murata/inc/d7ap.h ****       default:
 302:../../shields/Murata/inc/d7ap.h ****         assert(false);
 260              		.loc 2 302 0
 261 0108 184B     		ldr	r3, .L25+16
 262 010a 194A     		ldr	r2, .L25+20
 263 010c 4FF49771 		mov	r1, #302
 264 0110 1848     		ldr	r0, .L25+24
 265 0112 FFF7FEFF 		bl	__assert_func
 266              	.LVL30:
 267              	.L15:
 294:../../shields/Murata/inc/d7ap.h ****       case ID_TYPE_NBID:
 268              		.loc 2 294 0
 269 0116 0022     		movs	r2, #0
 270 0118 00E0     		b	.L13
 271              	.L20:
 296:../../shields/Murata/inc/d7ap.h ****       case ID_TYPE_UID:
 272              		.loc 2 296 0
 273 011a 0122     		movs	r2, #1
 274              	.L13:
 275              	.LVL31:
 276              	.LBE8:
 277              	.LBE7:
 240:../../shields/Murata/src/alp.c ****   }
 278              		.loc 1 240 0
 279 011c 0DF10F01 		add	r1, sp, #15
 280 0120 2046     		mov	r0, r4
 281 0122 FFF7FEFF 		bl	fifo_pop
 282              	.LVL32:
 283 0126 0028     		cmp	r0, #0
 284 0128 81D0     		beq	.L7
 240:../../shields/Murata/src/alp.c ****   }
 285              		.loc 1 240 0 is_stmt 0 discriminator 1
ARM GAS  /tmp/ccaG3DAV.s 			page 16


 286 012a 134B     		ldr	r3, .L25+28
 287 012c 0C4A     		ldr	r2, .L25+4
 288 012e F021     		movs	r1, #240
 289 0130 0C48     		ldr	r0, .L25+8
 290 0132 FFF7FEFF 		bl	__assert_func
 291              	.LVL33:
 292              	.L24:
 293              	.LBE6:
 294              	.LBB9:
 244:../../shields/Murata/src/alp.c ****     fifo_skip(fifo,1); //size
 295              		.loc 1 244 0 is_stmt 1 discriminator 2
 296 0136 AB88     		ldrh	r3, [r5, #4]	@ unaligned
 297 0138 ADF80030 		strh	r3, [sp]	@ unaligned
 245:../../shields/Murata/src/alp.c ****     fifo_pop(fifo, &interface_status.attempts, 1);
 298              		.loc 1 245 0 discriminator 2
 299 013c 0121     		movs	r1, #1
 300 013e 2046     		mov	r0, r4
 301 0140 FFF7FEFF 		bl	fifo_skip
 302              	.LVL34:
 246:../../shields/Murata/src/alp.c ****     fifo_pop(fifo, &interface_status.error_state, 1);
 303              		.loc 1 246 0 discriminator 2
 304 0144 0122     		movs	r2, #1
 305 0146 6946     		mov	r1, sp
 306 0148 2046     		mov	r0, r4
 307 014a FFF7FEFF 		bl	fifo_pop
 308              	.LVL35:
 247:../../shields/Murata/src/alp.c ****   }
 309              		.loc 1 247 0 discriminator 2
 310 014e 0122     		movs	r2, #1
 311 0150 0DEB0201 		add	r1, sp, r2
 312 0154 2046     		mov	r0, r4
 313 0156 FFF7FEFF 		bl	fifo_pop
 314              	.LVL36:
 315              	.LBE9:
 316              		.loc 1 251 0 discriminator 2
 317 015a 68E7     		b	.L7
 318              	.L26:
 319              		.align	2
 320              	.L25:
 321 015c 00000000 		.word	.LC2
 322 0160 00000000 		.word	.LANCHOR1
 323 0164 40000000 		.word	.LC1
 324 0168 0C000000 		.word	.LC3
 325 016c 38000000 		.word	.LC4
 326 0170 00000000 		.word	.LANCHOR2
 327 0174 40000000 		.word	.LC5
 328 0178 60000000 		.word	.LC6
 329              		.cfi_endproc
 330              	.LFE15:
 332              		.section	.text.alp_get_operation,"ax",%progbits
 333              		.align	1
 334              		.global	alp_get_operation
 335              		.syntax unified
 336              		.thumb
 337              		.thumb_func
 338              		.fpu fpv4-sp-d16
 340              	alp_get_operation:
ARM GAS  /tmp/ccaG3DAV.s 			page 17


 341              	.LFB1:
  42:../../shields/Murata/src/alp.c ****     alp_control_t alp_ctrl;
 342              		.loc 1 42 0
 343              		.cfi_startproc
 344              		@ args = 0, pretend = 0, frame = 0
 345              		@ frame_needed = 0, uses_anonymous_args = 0
 346              		@ link register save eliminated.
 347              	.LVL37:
  44:../../shields/Murata/src/alp.c ****     return alp_ctrl.operation;
 348              		.loc 1 44 0
 349 0000 0078     		ldrb	r0, [r0]	@ zero_extendqisi2
 350              	.LVL38:
  46:../../shields/Murata/src/alp.c **** 
 351              		.loc 1 46 0
 352 0002 00F03F00 		and	r0, r0, #63
 353 0006 7047     		bx	lr
 354              		.cfi_endproc
 355              	.LFE1:
 357              		.section	.text.alp_parse_length_operand,"ax",%progbits
 358              		.align	1
 359              		.global	alp_parse_length_operand
 360              		.syntax unified
 361              		.thumb
 362              		.thumb_func
 363              		.fpu fpv4-sp-d16
 365              	alp_parse_length_operand:
 366              	.LFB2:
  48:../../shields/Murata/src/alp.c ****   uint8_t len = 0;
 367              		.loc 1 48 0
 368              		.cfi_startproc
 369              		@ args = 0, pretend = 0, frame = 8
 370              		@ frame_needed = 0, uses_anonymous_args = 0
 371              	.LVL39:
 372 0000 10B5     		push	{r4, lr}
 373              	.LCFI5:
 374              		.cfi_def_cfa_offset 8
 375              		.cfi_offset 4, -8
 376              		.cfi_offset 14, -4
 377 0002 82B0     		sub	sp, sp, #8
 378              	.LCFI6:
 379              		.cfi_def_cfa_offset 16
 380 0004 0446     		mov	r4, r0
  49:../../shields/Murata/src/alp.c ****   fifo_pop(cmd_fifo, (uint8_t*)&len, 1);
 381              		.loc 1 49 0
 382 0006 02A9     		add	r1, sp, #8
 383 0008 0023     		movs	r3, #0
 384 000a 01F8013D 		strb	r3, [r1, #-1]!
  50:../../shields/Murata/src/alp.c ****   uint8_t field_len = len >> 6;
 385              		.loc 1 50 0
 386 000e 0122     		movs	r2, #1
 387 0010 FFF7FEFF 		bl	fifo_pop
 388              	.LVL40:
  51:../../shields/Murata/src/alp.c ****   if(field_len == 0)
 389              		.loc 1 51 0
 390 0014 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 391              	.LVL41:
  52:../../shields/Murata/src/alp.c ****     return (uint32_t)len;
ARM GAS  /tmp/ccaG3DAV.s 			page 18


 392              		.loc 1 52 0
 393 0018 8209     		lsrs	r2, r0, #6
 394 001a 01D1     		bne	.L32
 395              	.LVL42:
 396              	.L28:
  58:../../shields/Murata/src/alp.c **** 
 397              		.loc 1 58 0
 398 001c 02B0     		add	sp, sp, #8
 399              	.LCFI7:
 400              		.cfi_remember_state
 401              		.cfi_def_cfa_offset 8
 402              		@ sp needed
 403 001e 10BD     		pop	{r4, pc}
 404              	.LVL43:
 405              	.L32:
 406              	.LCFI8:
 407              		.cfi_restore_state
  55:../../shields/Murata/src/alp.c ****   fifo_pop(cmd_fifo, (uint8_t*)&full_length, field_len);
 408              		.loc 1 55 0
 409 0020 00F03F00 		and	r0, r0, #63
 410              	.LVL44:
 411 0024 D300     		lsls	r3, r2, #3
 412 0026 9840     		lsls	r0, r0, r3
 413 0028 02A9     		add	r1, sp, #8
 414 002a 41F8080D 		str	r0, [r1, #-8]!
  56:../../shields/Murata/src/alp.c ****   return full_length;
 415              		.loc 1 56 0
 416 002e 2046     		mov	r0, r4
 417 0030 FFF7FEFF 		bl	fifo_pop
 418              	.LVL45:
  57:../../shields/Murata/src/alp.c **** }
 419              		.loc 1 57 0
 420 0034 0098     		ldr	r0, [sp]
 421 0036 F1E7     		b	.L28
 422              		.cfi_endproc
 423              	.LFE2:
 425              		.section	.text.alp_append_length_operand,"ax",%progbits
 426              		.align	1
 427              		.global	alp_append_length_operand
 428              		.syntax unified
 429              		.thumb
 430              		.thumb_func
 431              		.fpu fpv4-sp-d16
 433              	alp_append_length_operand:
 434              	.LFB3:
  60:../../shields/Murata/src/alp.c ****   if(length < 64) {
 435              		.loc 1 60 0
 436              		.cfi_startproc
 437              		@ args = 0, pretend = 0, frame = 16
 438              		@ frame_needed = 0, uses_anonymous_args = 0
 439              	.LVL46:
 440 0000 30B5     		push	{r4, r5, lr}
 441              	.LCFI9:
 442              		.cfi_def_cfa_offset 12
 443              		.cfi_offset 4, -12
 444              		.cfi_offset 5, -8
 445              		.cfi_offset 14, -4
ARM GAS  /tmp/ccaG3DAV.s 			page 19


 446 0002 85B0     		sub	sp, sp, #20
 447              	.LCFI10:
 448              		.cfi_def_cfa_offset 32
 449 0004 0546     		mov	r5, r0
 450 0006 0191     		str	r1, [sp, #4]
  61:../../shields/Murata/src/alp.c ****     // can be coded in one byte
 451              		.loc 1 61 0
 452 0008 3F29     		cmp	r1, #63
 453 000a 25D9     		bls	.L44
 454              	.LVL47:
  68:../../shields/Murata/src/alp.c ****     size = 2;
 455              		.loc 1 68 0
 456 000c B1F5804F 		cmp	r1, #16384
 457 0010 2ED2     		bcs	.L41
  67:../../shields/Murata/src/alp.c ****   if(length > 0x3FFF)
 458              		.loc 1 67 0
 459 0012 0124     		movs	r4, #1
 460              	.L36:
 461              	.LVL48:
  70:../../shields/Murata/src/alp.c ****     size = 3;
 462              		.loc 1 70 0
 463 0014 B1F5800F 		cmp	r1, #4194304
 464 0018 00D3     		bcc	.L37
  71:../../shields/Murata/src/alp.c **** 
 465              		.loc 1 71 0
 466 001a 0324     		movs	r4, #3
 467              	.LVL49:
 468              	.L37:
  74:../../shields/Murata/src/alp.c ****   byte += ((uint8_t*)(&length))[size];
 469              		.loc 1 74 0
 470 001c A301     		lsls	r3, r4, #6
 471 001e DBB2     		uxtb	r3, r3
 472 0020 8DF80F30 		strb	r3, [sp, #15]
  75:../../shields/Murata/src/alp.c ****   assert(fifo_put(fifo, &byte, 1) == oss7SUCCESS);
 473              		.loc 1 75 0
 474 0024 04AA     		add	r2, sp, #16
 475 0026 2244     		add	r2, r2, r4
 476 0028 12F80C2C 		ldrb	r2, [r2, #-12]	@ zero_extendqisi2
 477 002c 1344     		add	r3, r3, r2
 478 002e 04A9     		add	r1, sp, #16
 479              	.LVL50:
 480 0030 01F8013D 		strb	r3, [r1, #-1]!
  76:../../shields/Murata/src/alp.c ****   do {
 481              		.loc 1 76 0
 482 0034 0122     		movs	r2, #1
 483 0036 2846     		mov	r0, r5
 484              	.LVL51:
 485 0038 FFF7FEFF 		bl	fifo_put
 486              	.LVL52:
 487 003c D0B9     		cbnz	r0, .L45
 488              	.L38:
  78:../../shields/Murata/src/alp.c ****     assert(fifo_put(fifo, (uint8_t*)&length + size, 1) == oss7SUCCESS);
 489              		.loc 1 78 0
 490 003e 013C     		subs	r4, r4, #1
 491              	.LVL53:
 492 0040 E4B2     		uxtb	r4, r4
 493              	.LVL54:
ARM GAS  /tmp/ccaG3DAV.s 			page 20


  79:../../shields/Murata/src/alp.c ****   } while(size > 0);
 494              		.loc 1 79 0
 495 0042 0122     		movs	r2, #1
 496 0044 01AB     		add	r3, sp, #4
 497 0046 1919     		adds	r1, r3, r4
 498 0048 2846     		mov	r0, r5
 499 004a FFF7FEFF 		bl	fifo_put
 500              	.LVL55:
 501 004e B8B9     		cbnz	r0, .L46
  80:../../shields/Murata/src/alp.c **** }
 502              		.loc 1 80 0
 503 0050 002C     		cmp	r4, #0
 504 0052 F4D1     		bne	.L38
 505              	.LVL56:
 506              	.L33:
  81:../../shields/Murata/src/alp.c **** 
 507              		.loc 1 81 0
 508 0054 05B0     		add	sp, sp, #20
 509              	.LCFI11:
 510              		.cfi_remember_state
 511              		.cfi_def_cfa_offset 12
 512              		@ sp needed
 513 0056 30BD     		pop	{r4, r5, pc}
 514              	.LVL57:
 515              	.L44:
 516              	.LCFI12:
 517              		.cfi_restore_state
  63:../../shields/Murata/src/alp.c ****     return;
 518              		.loc 1 63 0
 519 0058 0122     		movs	r2, #1
 520 005a 01A9     		add	r1, sp, #4
 521              	.LVL58:
 522 005c FFF7FEFF 		bl	fifo_put
 523              	.LVL59:
 524 0060 0028     		cmp	r0, #0
 525 0062 F7D0     		beq	.L33
  63:../../shields/Murata/src/alp.c ****     return;
 526              		.loc 1 63 0 is_stmt 0 discriminator 1
 527 0064 094B     		ldr	r3, .L47
 528 0066 0A4A     		ldr	r2, .L47+4
 529 0068 3F21     		movs	r1, #63
 530 006a 0A48     		ldr	r0, .L47+8
 531 006c FFF7FEFF 		bl	__assert_func
 532              	.LVL60:
 533              	.L41:
  69:../../shields/Murata/src/alp.c ****   if(length > 0x3FFFFF)
 534              		.loc 1 69 0 is_stmt 1
 535 0070 0224     		movs	r4, #2
 536 0072 CFE7     		b	.L36
 537              	.LVL61:
 538              	.L45:
  76:../../shields/Murata/src/alp.c ****   do {
 539              		.loc 1 76 0 discriminator 1
 540 0074 084B     		ldr	r3, .L47+12
 541 0076 064A     		ldr	r2, .L47+4
 542 0078 4C21     		movs	r1, #76
 543 007a 0648     		ldr	r0, .L47+8
ARM GAS  /tmp/ccaG3DAV.s 			page 21


 544 007c FFF7FEFF 		bl	__assert_func
 545              	.LVL62:
 546              	.L46:
  79:../../shields/Murata/src/alp.c ****   } while(size > 0);
 547              		.loc 1 79 0 discriminator 1
 548 0080 064B     		ldr	r3, .L47+16
 549 0082 034A     		ldr	r2, .L47+4
 550 0084 4F21     		movs	r1, #79
 551 0086 0348     		ldr	r0, .L47+8
 552 0088 FFF7FEFF 		bl	__assert_func
 553              	.LVL63:
 554              	.L48:
 555              		.align	2
 556              	.L47:
 557 008c 00000000 		.word	.LC7
 558 0090 00000000 		.word	.LANCHOR3
 559 0094 40000000 		.word	.LC1
 560 0098 34000000 		.word	.LC8
 561 009c 5C000000 		.word	.LC9
 562              		.cfi_endproc
 563              	.LFE3:
 565              		.section	.text.alp_parse_file_offset_operand,"ax",%progbits
 566              		.align	1
 567              		.global	alp_parse_file_offset_operand
 568              		.syntax unified
 569              		.thumb
 570              		.thumb_func
 571              		.fpu fpv4-sp-d16
 573              	alp_parse_file_offset_operand:
 574              	.LFB4:
  83:../../shields/Murata/src/alp.c ****   alp_operand_file_offset_t operand;
 575              		.loc 1 83 0
 576              		.cfi_startproc
 577              		@ args = 0, pretend = 0, frame = 8
 578              		@ frame_needed = 0, uses_anonymous_args = 0
 579              	.LVL64:
 580 0000 30B5     		push	{r4, r5, lr}
 581              	.LCFI13:
 582              		.cfi_def_cfa_offset 12
 583              		.cfi_offset 4, -12
 584              		.cfi_offset 5, -8
 585              		.cfi_offset 14, -4
 586 0002 83B0     		sub	sp, sp, #12
 587              	.LCFI14:
 588              		.cfi_def_cfa_offset 24
 589 0004 0446     		mov	r4, r0
 590 0006 0D46     		mov	r5, r1
  85:../../shields/Murata/src/alp.c ****   operand.offset = alp_parse_length_operand(cmd_fifo);
 591              		.loc 1 85 0
 592 0008 0122     		movs	r2, #1
 593 000a 6946     		mov	r1, sp
 594              	.LVL65:
 595 000c 2846     		mov	r0, r5
 596              	.LVL66:
 597 000e FFF7FEFF 		bl	fifo_pop
 598              	.LVL67:
 599 0012 58B9     		cbnz	r0, .L52
ARM GAS  /tmp/ccaG3DAV.s 			page 22


  86:../../shields/Murata/src/alp.c ****   return operand;
 600              		.loc 1 86 0
 601 0014 2846     		mov	r0, r5
 602              	.LVL68:
 603 0016 FFF7FEFF 		bl	alp_parse_length_operand
 604              	.LVL69:
 605 001a 0190     		str	r0, [sp, #4]
  87:../../shields/Murata/src/alp.c **** }
 606              		.loc 1 87 0
 607 001c 02AB     		add	r3, sp, #8
 608 001e 13E90300 		ldmdb	r3, {r0, r1}
 609 0022 84E80300 		stm	r4, {r0, r1}
  88:../../shields/Murata/src/alp.c **** 
 610              		.loc 1 88 0
 611 0026 2046     		mov	r0, r4
 612 0028 03B0     		add	sp, sp, #12
 613              	.LCFI15:
 614              		.cfi_remember_state
 615              		.cfi_def_cfa_offset 12
 616              		@ sp needed
 617 002a 30BD     		pop	{r4, r5, pc}
 618              	.LVL70:
 619              	.L52:
 620              	.LCFI16:
 621              		.cfi_restore_state
  85:../../shields/Murata/src/alp.c ****   operand.offset = alp_parse_length_operand(cmd_fifo);
 622              		.loc 1 85 0 discriminator 1
 623 002c 024B     		ldr	r3, .L53
 624 002e 034A     		ldr	r2, .L53+4
 625 0030 5521     		movs	r1, #85
 626 0032 0348     		ldr	r0, .L53+8
 627              	.LVL71:
 628 0034 FFF7FEFF 		bl	__assert_func
 629              	.LVL72:
 630              	.L54:
 631              		.align	2
 632              	.L53:
 633 0038 00000000 		.word	.LC10
 634 003c 00000000 		.word	.LANCHOR4
 635 0040 40000000 		.word	.LC1
 636              		.cfi_endproc
 637              	.LFE4:
 639              		.section	.text.parse_operand_file_data,"ax",%progbits
 640              		.align	1
 641              		.syntax unified
 642              		.thumb
 643              		.thumb_func
 644              		.fpu fpv4-sp-d16
 646              	parse_operand_file_data:
 647              	.LFB11:
 191:../../shields/Murata/src/alp.c ****   action->file_data_operand.file_offset = alp_parse_file_offset_operand(fifo);
 648              		.loc 1 191 0
 649              		.cfi_startproc
 650              		@ args = 0, pretend = 0, frame = 8
 651              		@ frame_needed = 0, uses_anonymous_args = 0
 652              	.LVL73:
 653 0000 70B5     		push	{r4, r5, r6, lr}
ARM GAS  /tmp/ccaG3DAV.s 			page 23


 654              	.LCFI17:
 655              		.cfi_def_cfa_offset 16
 656              		.cfi_offset 4, -16
 657              		.cfi_offset 5, -12
 658              		.cfi_offset 6, -8
 659              		.cfi_offset 14, -4
 660 0002 82B0     		sub	sp, sp, #8
 661              	.LCFI18:
 662              		.cfi_def_cfa_offset 24
 663 0004 0546     		mov	r5, r0
 664 0006 0E46     		mov	r6, r1
 192:../../shields/Murata/src/alp.c ****   action->file_data_operand.provided_data_length = alp_parse_length_operand(fifo);
 665              		.loc 1 192 0
 666 0008 0146     		mov	r1, r0
 667              	.LVL74:
 668 000a 6846     		mov	r0, sp
 669              	.LVL75:
 670 000c FFF7FEFF 		bl	alp_parse_file_offset_operand
 671              	.LVL76:
 672 0010 331D     		adds	r3, r6, #4
 673 0012 9DE80300 		ldm	sp, {r0, r1}
 674 0016 83E80300 		stm	r3, {r0, r1}
 193:../../shields/Murata/src/alp.c ****   assert(action->file_data_operand.provided_data_length <= sizeof(action->file_data_operand.data));
 675              		.loc 1 193 0
 676 001a 2846     		mov	r0, r5
 677 001c FFF7FEFF 		bl	alp_parse_length_operand
 678              	.LVL77:
 679 0020 F060     		str	r0, [r6, #12]
 194:../../shields/Murata/src/alp.c ****   fifo_pop(fifo, action->file_data_operand.data, action->file_data_operand.provided_data_length);
 680              		.loc 1 194 0
 681 0022 FF28     		cmp	r0, #255
 682 0024 07D8     		bhi	.L58
 195:../../shields/Murata/src/alp.c **** }
 683              		.loc 1 195 0
 684 0026 82B2     		uxth	r2, r0
 685 0028 06F11001 		add	r1, r6, #16
 686 002c 2846     		mov	r0, r5
 687 002e FFF7FEFF 		bl	fifo_pop
 688              	.LVL78:
 196:../../shields/Murata/src/alp.c **** 
 689              		.loc 1 196 0
 690 0032 02B0     		add	sp, sp, #8
 691              	.LCFI19:
 692              		.cfi_remember_state
 693              		.cfi_def_cfa_offset 16
 694              		@ sp needed
 695 0034 70BD     		pop	{r4, r5, r6, pc}
 696              	.LVL79:
 697              	.L58:
 698              	.LCFI20:
 699              		.cfi_restore_state
 194:../../shields/Murata/src/alp.c ****   fifo_pop(fifo, action->file_data_operand.data, action->file_data_operand.provided_data_length);
 700              		.loc 1 194 0 discriminator 1
 701 0036 034B     		ldr	r3, .L59
 702 0038 034A     		ldr	r2, .L59+4
 703 003a C221     		movs	r1, #194
 704 003c 0348     		ldr	r0, .L59+8
ARM GAS  /tmp/ccaG3DAV.s 			page 24


 705 003e FFF7FEFF 		bl	__assert_func
 706              	.LVL80:
 707              	.L60:
 708 0042 00BF     		.align	2
 709              	.L59:
 710 0044 00000000 		.word	.LC11
 711 0048 00000000 		.word	.LANCHOR5
 712 004c 40000000 		.word	.LC1
 713              		.cfi_endproc
 714              	.LFE11:
 716              		.section	.text.parse_op_write_file_data,"ax",%progbits
 717              		.align	1
 718              		.syntax unified
 719              		.thumb
 720              		.thumb_func
 721              		.fpu fpv4-sp-d16
 723              	parse_op_write_file_data:
 724              	.LFB12:
 198:../../shields/Murata/src/alp.c ****   parse_operand_file_data(fifo, action);
 725              		.loc 1 198 0
 726              		.cfi_startproc
 727              		@ args = 0, pretend = 0, frame = 0
 728              		@ frame_needed = 0, uses_anonymous_args = 0
 729              	.LVL81:
 730 0000 08B5     		push	{r3, lr}
 731              	.LCFI21:
 732              		.cfi_def_cfa_offset 8
 733              		.cfi_offset 3, -8
 734              		.cfi_offset 14, -4
 199:../../shields/Murata/src/alp.c ****   DPRINT("parsed write file data file %i, len %i", action->file_data_operand.file_offset.file_id, a
 735              		.loc 1 199 0
 736 0002 FFF7FEFF 		bl	parse_operand_file_data
 737              	.LVL82:
 738 0006 08BD     		pop	{r3, pc}
 739              		.cfi_endproc
 740              	.LFE12:
 742              		.section	.text.parse_op_return_file_data,"ax",%progbits
 743              		.align	1
 744              		.syntax unified
 745              		.thumb
 746              		.thumb_func
 747              		.fpu fpv4-sp-d16
 749              	parse_op_return_file_data:
 750              	.LFB13:
 204:../../shields/Murata/src/alp.c ****   parse_operand_file_data(fifo, action);
 751              		.loc 1 204 0
 752              		.cfi_startproc
 753              		@ args = 0, pretend = 0, frame = 0
 754              		@ frame_needed = 0, uses_anonymous_args = 0
 755              	.LVL83:
 756 0000 08B5     		push	{r3, lr}
 757              	.LCFI22:
 758              		.cfi_def_cfa_offset 8
 759              		.cfi_offset 3, -8
 760              		.cfi_offset 14, -4
 205:../../shields/Murata/src/alp.c ****   DPRINT("parsed return file data file %i, len %i", action->file_data_operand.file_offset.file_id, 
 761              		.loc 1 205 0
ARM GAS  /tmp/ccaG3DAV.s 			page 25


 762 0002 FFF7FEFF 		bl	parse_operand_file_data
 763              	.LVL84:
 764 0006 08BD     		pop	{r3, pc}
 765              		.cfi_endproc
 766              	.LFE13:
 768              		.section	.text.alp_parse_file_header_operand,"ax",%progbits
 769              		.align	1
 770              		.global	alp_parse_file_header_operand
 771              		.syntax unified
 772              		.thumb
 773              		.thumb_func
 774              		.fpu fpv4-sp-d16
 776              	alp_parse_file_header_operand:
 777              	.LFB5:
  90:../../shields/Murata/src/alp.c ****   alp_operand_file_header_t operand;
 778              		.loc 1 90 0
 779              		.cfi_startproc
 780              		@ args = 0, pretend = 0, frame = 16
 781              		@ frame_needed = 0, uses_anonymous_args = 0
 782              	.LVL85:
 783 0000 30B5     		push	{r4, r5, lr}
 784              	.LCFI23:
 785              		.cfi_def_cfa_offset 12
 786              		.cfi_offset 4, -12
 787              		.cfi_offset 5, -8
 788              		.cfi_offset 14, -4
 789 0002 85B0     		sub	sp, sp, #20
 790              	.LCFI24:
 791              		.cfi_def_cfa_offset 32
 792 0004 0446     		mov	r4, r0
 793 0006 0D46     		mov	r5, r1
  92:../../shields/Murata/src/alp.c ****   err = fifo_pop(cmd_fifo, (uint8_t*)&operand.file_header, sizeof(fs_file_header_t)); assert(err ==
 794              		.loc 1 92 0
 795 0008 0122     		movs	r2, #1
 796 000a 6946     		mov	r1, sp
 797              	.LVL86:
 798 000c 2846     		mov	r0, r5
 799              	.LVL87:
 800 000e FFF7FEFF 		bl	fifo_pop
 801              	.LVL88:
 802 0012 D0B9     		cbnz	r0, .L69
  93:../../shields/Murata/src/alp.c **** 
 803              		.loc 1 93 0
 804 0014 0C22     		movs	r2, #12
 805 0016 0DF10101 		add	r1, sp, #1
 806 001a 2846     		mov	r0, r5
 807              	.LVL89:
 808 001c FFF7FEFF 		bl	fifo_pop
 809              	.LVL90:
 810 0020 C8B9     		cbnz	r0, .L70
  96:../../shields/Murata/src/alp.c ****   operand.file_header.allocated_length = __builtin_bswap32(operand.file_header.allocated_length);
 811              		.loc 1 96 0
 812 0022 DDF80530 		ldr	r3, [sp, #5]	@ unaligned
 813 0026 1BBA     		rev	r3, r3
 814 0028 CDF80530 		str	r3, [sp, #5]	@ unaligned
  97:../../shields/Murata/src/alp.c ****   return operand;
 815              		.loc 1 97 0
ARM GAS  /tmp/ccaG3DAV.s 			page 26


 816 002c DDF80930 		ldr	r3, [sp, #9]	@ unaligned
 817 0030 1BBA     		rev	r3, r3
 818 0032 CDF80930 		str	r3, [sp, #9]	@ unaligned
  98:../../shields/Murata/src/alp.c **** }
 819              		.loc 1 98 0
 820 0036 6B46     		mov	r3, sp
 821 0038 07CB     		ldmia	r3!, {r0, r1, r2}
 822              	.LVL91:
 823 003a 2060     		str	r0, [r4]	@ unaligned
 824 003c 6160     		str	r1, [r4, #4]	@ unaligned
 825 003e A260     		str	r2, [r4, #8]	@ unaligned
 826 0040 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 827 0042 2373     		strb	r3, [r4, #12]
  99:../../shields/Murata/src/alp.c **** 
 828              		.loc 1 99 0
 829 0044 2046     		mov	r0, r4
 830 0046 05B0     		add	sp, sp, #20
 831              	.LCFI25:
 832              		.cfi_remember_state
 833              		.cfi_def_cfa_offset 12
 834              		@ sp needed
 835 0048 30BD     		pop	{r4, r5, pc}
 836              	.LVL92:
 837              	.L69:
 838              	.LCFI26:
 839              		.cfi_restore_state
  92:../../shields/Murata/src/alp.c ****   err = fifo_pop(cmd_fifo, (uint8_t*)&operand.file_header, sizeof(fs_file_header_t)); assert(err ==
 840              		.loc 1 92 0 discriminator 1
 841 004a 064B     		ldr	r3, .L71
 842 004c 064A     		ldr	r2, .L71+4
 843 004e 5C21     		movs	r1, #92
 844 0050 0648     		ldr	r0, .L71+8
 845              	.LVL93:
 846 0052 FFF7FEFF 		bl	__assert_func
 847              	.LVL94:
 848              	.L70:
  93:../../shields/Murata/src/alp.c **** 
 849              		.loc 1 93 0 discriminator 1
 850 0056 034B     		ldr	r3, .L71
 851 0058 034A     		ldr	r2, .L71+4
 852 005a 5D21     		movs	r1, #93
 853 005c 0348     		ldr	r0, .L71+8
 854              	.LVL95:
 855 005e FFF7FEFF 		bl	__assert_func
 856              	.LVL96:
 857              	.L72:
 858 0062 00BF     		.align	2
 859              	.L71:
 860 0064 00000000 		.word	.LC10
 861 0068 00000000 		.word	.LANCHOR6
 862 006c 40000000 		.word	.LC1
 863              		.cfi_endproc
 864              	.LFE5:
 866              		.section	.text.alp_append_file_offset_operand,"ax",%progbits
 867              		.align	1
 868              		.global	alp_append_file_offset_operand
 869              		.syntax unified
ARM GAS  /tmp/ccaG3DAV.s 			page 27


 870              		.thumb
 871              		.thumb_func
 872              		.fpu fpv4-sp-d16
 874              	alp_append_file_offset_operand:
 875              	.LFB6:
 101:../../shields/Murata/src/alp.c ****   assert(fifo_put_byte(fifo, file_id) == oss7SUCCESS);
 876              		.loc 1 101 0
 877              		.cfi_startproc
 878              		@ args = 0, pretend = 0, frame = 0
 879              		@ frame_needed = 0, uses_anonymous_args = 0
 880              	.LVL97:
 881 0000 38B5     		push	{r3, r4, r5, lr}
 882              	.LCFI27:
 883              		.cfi_def_cfa_offset 16
 884              		.cfi_offset 3, -16
 885              		.cfi_offset 4, -12
 886              		.cfi_offset 5, -8
 887              		.cfi_offset 14, -4
 888 0002 0446     		mov	r4, r0
 889 0004 1546     		mov	r5, r2
 102:../../shields/Murata/src/alp.c ****   alp_append_length_operand(fifo, offset);
 890              		.loc 1 102 0
 891 0006 FFF7FEFF 		bl	fifo_put_byte
 892              	.LVL98:
 893 000a 20B9     		cbnz	r0, .L76
 103:../../shields/Murata/src/alp.c **** }
 894              		.loc 1 103 0
 895 000c 2946     		mov	r1, r5
 896 000e 2046     		mov	r0, r4
 897 0010 FFF7FEFF 		bl	alp_append_length_operand
 898              	.LVL99:
 899 0014 38BD     		pop	{r3, r4, r5, pc}
 900              	.LVL100:
 901              	.L76:
 102:../../shields/Murata/src/alp.c ****   alp_append_length_operand(fifo, offset);
 902              		.loc 1 102 0 discriminator 1
 903 0016 034B     		ldr	r3, .L77
 904 0018 034A     		ldr	r2, .L77+4
 905 001a 6621     		movs	r1, #102
 906 001c 0348     		ldr	r0, .L77+8
 907 001e FFF7FEFF 		bl	__assert_func
 908              	.LVL101:
 909              	.L78:
 910 0022 00BF     		.align	2
 911              	.L77:
 912 0024 00000000 		.word	.LC12
 913 0028 00000000 		.word	.LANCHOR7
 914 002c 40000000 		.word	.LC1
 915              		.cfi_endproc
 916              	.LFE6:
 918              		.section	.text.alp_append_forward_action,"ax",%progbits
 919              		.align	1
 920              		.global	alp_append_forward_action
 921              		.syntax unified
 922              		.thumb
 923              		.thumb_func
 924              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccaG3DAV.s 			page 28


 926              	alp_append_forward_action:
 927              	.LFB7:
 106:../../shields/Murata/src/alp.c ****   assert(config!=NULL);
 928              		.loc 1 106 0
 929              		.cfi_startproc
 930              		@ args = 0, pretend = 0, frame = 8
 931              		@ frame_needed = 0, uses_anonymous_args = 0
 932              	.LVL102:
 933 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 934              	.LCFI28:
 935              		.cfi_def_cfa_offset 20
 936              		.cfi_offset 4, -20
 937              		.cfi_offset 5, -16
 938              		.cfi_offset 6, -12
 939              		.cfi_offset 7, -8
 940              		.cfi_offset 14, -4
 941 0002 83B0     		sub	sp, sp, #12
 942              	.LCFI29:
 943              		.cfi_def_cfa_offset 32
 107:../../shields/Murata/src/alp.c ****   assert(fifo_put_byte(fifo, ALP_OP_FORWARD) == oss7SUCCESS);
 944              		.loc 1 107 0
 945 0004 EAB1     		cbz	r2, .L109
 946 0006 0446     		mov	r4, r0
 947 0008 0D46     		mov	r5, r1
 948 000a 1F46     		mov	r7, r3
 949 000c 1646     		mov	r6, r2
 108:../../shields/Murata/src/alp.c ****   assert(fifo_put_byte(fifo, itf_id) == oss7SUCCESS);
 950              		.loc 1 108 0
 951 000e 3221     		movs	r1, #50
 952              	.LVL103:
 953 0010 FFF7FEFF 		bl	fifo_put_byte
 954              	.LVL104:
 955 0014 D8B9     		cbnz	r0, .L110
 109:../../shields/Murata/src/alp.c **** 
 956              		.loc 1 109 0
 957 0016 2946     		mov	r1, r5
 958 0018 2046     		mov	r0, r4
 959 001a FFF7FEFF 		bl	fifo_put_byte
 960              	.LVL105:
 961 001e E0B9     		cbnz	r0, .L111
 111:../../shields/Murata/src/alp.c ****   {
 962              		.loc 1 111 0
 963 0020 D72D     		cmp	r5, #215
 964 0022 20D0     		beq	.L112
 120:../../shields/Murata/src/alp.c ****   {
 965              		.loc 1 120 0
 966 0024 022D     		cmp	r5, #2
 967 0026 6ED0     		beq	.L113
 133:../../shields/Murata/src/alp.c ****   {
 968              		.loc 1 133 0
 969 0028 032D     		cmp	r5, #3
 970 002a 00F0C180 		beq	.L114
 144:../../shields/Murata/src/alp.c ****   }
 971              		.loc 1 144 0
 972 002e 3A46     		mov	r2, r7
 973 0030 3146     		mov	r1, r6
 974 0032 2046     		mov	r0, r4
ARM GAS  /tmp/ccaG3DAV.s 			page 29


 975 0034 FFF7FEFF 		bl	fifo_put
 976              	.LVL106:
 977 0038 0028     		cmp	r0, #0
 978 003a 40F0FA80 		bne	.L115
 979              	.L79:
 148:../../shields/Murata/src/alp.c **** 
 980              		.loc 1 148 0
 981 003e 03B0     		add	sp, sp, #12
 982              	.LCFI30:
 983              		.cfi_remember_state
 984              		.cfi_def_cfa_offset 20
 985              		@ sp needed
 986 0040 F0BD     		pop	{r4, r5, r6, r7, pc}
 987              	.LVL107:
 988              	.L109:
 989              	.LCFI31:
 990              		.cfi_restore_state
 107:../../shields/Murata/src/alp.c ****   assert(fifo_put_byte(fifo, ALP_OP_FORWARD) == oss7SUCCESS);
 991              		.loc 1 107 0 discriminator 1
 992 0042 7F4B     		ldr	r3, .L129
 993              	.LVL108:
 994 0044 7F4A     		ldr	r2, .L129+4
 995              	.LVL109:
 996 0046 6B21     		movs	r1, #107
 997              	.LVL110:
 998 0048 7F48     		ldr	r0, .L129+8
 999              	.LVL111:
 1000 004a FFF7FEFF 		bl	__assert_func
 1001              	.LVL112:
 1002              	.L110:
 108:../../shields/Murata/src/alp.c ****   assert(fifo_put_byte(fifo, itf_id) == oss7SUCCESS);
 1003              		.loc 1 108 0 discriminator 1
 1004 004e 7F4B     		ldr	r3, .L129+12
 1005 0050 7C4A     		ldr	r2, .L129+4
 1006 0052 6C21     		movs	r1, #108
 1007 0054 7C48     		ldr	r0, .L129+8
 1008 0056 FFF7FEFF 		bl	__assert_func
 1009              	.LVL113:
 1010              	.L111:
 109:../../shields/Murata/src/alp.c **** 
 1011              		.loc 1 109 0 discriminator 1
 1012 005a 7D4B     		ldr	r3, .L129+16
 1013 005c 794A     		ldr	r2, .L129+4
 1014 005e 6D21     		movs	r1, #109
 1015 0060 7948     		ldr	r0, .L129+8
 1016 0062 FFF7FEFF 		bl	__assert_func
 1017              	.LVL114:
 1018              	.L112:
 1019              	.LBB15:
 113:../../shields/Murata/src/alp.c ****     assert(fifo_put_byte(fifo, ((d7ap_session_config_t*)config)->dormant_timeout) == oss7SUCCESS);
 1020              		.loc 1 113 0
 1021 0066 3178     		ldrb	r1, [r6]	@ zero_extendqisi2
 1022 0068 2046     		mov	r0, r4
 1023 006a FFF7FEFF 		bl	fifo_put_byte
 1024              	.LVL115:
 1025 006e 90B9     		cbnz	r0, .L116
 114:../../shields/Murata/src/alp.c ****     assert(fifo_put_byte(fifo, ((d7ap_session_config_t*)config)->addressee.ctrl.raw) == oss7SUCCESS
ARM GAS  /tmp/ccaG3DAV.s 			page 30


 1026              		.loc 1 114 0
 1027 0070 7178     		ldrb	r1, [r6, #1]	@ zero_extendqisi2
 1028 0072 2046     		mov	r0, r4
 1029 0074 FFF7FEFF 		bl	fifo_put_byte
 1030              	.LVL116:
 1031 0078 98B9     		cbnz	r0, .L117
 115:../../shields/Murata/src/alp.c ****     uint8_t id_length = d7ap_addressee_id_length(((d7ap_session_config_t*)config)->addressee.ctrl.i
 1032              		.loc 1 115 0
 1033 007a B178     		ldrb	r1, [r6, #2]	@ zero_extendqisi2
 1034 007c 2046     		mov	r0, r4
 1035 007e FFF7FEFF 		bl	fifo_put_byte
 1036              	.LVL117:
 1037 0082 A0B9     		cbnz	r0, .L118
 116:../../shields/Murata/src/alp.c ****     assert(fifo_put_byte(fifo, ((d7ap_session_config_t*)config)->addressee.access_class) == oss7SUC
 1038              		.loc 1 116 0
 1039 0084 B378     		ldrb	r3, [r6, #2]	@ zero_extendqisi2
 1040 0086 C3F30113 		ubfx	r3, r3, #4, #2
 1041              	.LVL118:
 1042              	.LBB16:
 1043              	.LBB17:
 291:../../shields/Murata/inc/d7ap.h ****   {
 1044              		.loc 2 291 0
 1045 008a 032B     		cmp	r3, #3
 1046 008c 19D8     		bhi	.L87
 1047 008e DFE803F0 		tbb	[pc, r3]
 1048              	.L89:
 1049 0092 21       		.byte	(.L107-.L89)/2
 1050 0093 1F       		.byte	(.L90-.L89)/2
 1051 0094 14       		.byte	(.L91-.L89)/2
 1052 0095 16       		.byte	(.L92-.L89)/2
 1053              	.LVL119:
 1054              		.p2align 1
 1055              	.L116:
 1056              	.LBE17:
 1057              	.LBE16:
 113:../../shields/Murata/src/alp.c ****     assert(fifo_put_byte(fifo, ((d7ap_session_config_t*)config)->dormant_timeout) == oss7SUCCESS);
 1058              		.loc 1 113 0 discriminator 1
 1059 0096 6F4B     		ldr	r3, .L129+20
 1060 0098 6A4A     		ldr	r2, .L129+4
 1061 009a 7121     		movs	r1, #113
 1062 009c 6A48     		ldr	r0, .L129+8
 1063 009e FFF7FEFF 		bl	__assert_func
 1064              	.LVL120:
 1065              	.L117:
 114:../../shields/Murata/src/alp.c ****     assert(fifo_put_byte(fifo, ((d7ap_session_config_t*)config)->addressee.ctrl.raw) == oss7SUCCESS
 1066              		.loc 1 114 0 discriminator 1
 1067 00a2 6D4B     		ldr	r3, .L129+24
 1068 00a4 674A     		ldr	r2, .L129+4
 1069 00a6 7221     		movs	r1, #114
 1070 00a8 6748     		ldr	r0, .L129+8
 1071 00aa FFF7FEFF 		bl	__assert_func
 1072              	.LVL121:
 1073              	.L118:
 115:../../shields/Murata/src/alp.c ****     uint8_t id_length = d7ap_addressee_id_length(((d7ap_session_config_t*)config)->addressee.ctrl.i
 1074              		.loc 1 115 0 discriminator 1
 1075 00ae 6B4B     		ldr	r3, .L129+28
 1076 00b0 644A     		ldr	r2, .L129+4
ARM GAS  /tmp/ccaG3DAV.s 			page 31


 1077 00b2 7321     		movs	r1, #115
 1078 00b4 6448     		ldr	r0, .L129+8
 1079 00b6 FFF7FEFF 		bl	__assert_func
 1080              	.LVL122:
 1081              	.L91:
 1082              	.LBB19:
 1083              	.LBB18:
 298:../../shields/Murata/inc/d7ap.h ****       case ID_TYPE_VID:
 1084              		.loc 2 298 0
 1085 00ba 0825     		movs	r5, #8
 1086 00bc 0BE0     		b	.L88
 1087              	.L92:
 300:../../shields/Murata/inc/d7ap.h ****       default:
 1088              		.loc 2 300 0
 1089 00be 0225     		movs	r5, #2
 1090 00c0 09E0     		b	.L88
 1091              	.L87:
 1092              		.loc 2 302 0
 1093 00c2 674B     		ldr	r3, .L129+32
 1094 00c4 674A     		ldr	r2, .L129+36
 1095 00c6 4FF49771 		mov	r1, #302
 1096 00ca 6748     		ldr	r0, .L129+40
 1097 00cc FFF7FEFF 		bl	__assert_func
 1098              	.LVL123:
 1099              	.L90:
 294:../../shields/Murata/inc/d7ap.h ****       case ID_TYPE_NBID:
 1100              		.loc 2 294 0
 1101 00d0 0025     		movs	r5, #0
 1102 00d2 00E0     		b	.L88
 1103              	.L107:
 296:../../shields/Murata/inc/d7ap.h ****       case ID_TYPE_UID:
 1104              		.loc 2 296 0
 1105 00d4 0125     		movs	r5, #1
 1106              	.L88:
 1107              	.LVL124:
 1108              	.LBE18:
 1109              	.LBE19:
 117:../../shields/Murata/src/alp.c ****     assert(fifo_put(fifo, ((d7ap_session_config_t*)config)->addressee.id, id_length) == oss7SUCCESS
 1110              		.loc 1 117 0
 1111 00d6 F178     		ldrb	r1, [r6, #3]	@ zero_extendqisi2
 1112 00d8 2046     		mov	r0, r4
 1113 00da FFF7FEFF 		bl	fifo_put_byte
 1114              	.LVL125:
 1115 00de 60B9     		cbnz	r0, .L119
 118:../../shields/Murata/src/alp.c ****   }
 1116              		.loc 1 118 0
 1117 00e0 2A46     		mov	r2, r5
 1118 00e2 311D     		adds	r1, r6, #4
 1119 00e4 2046     		mov	r0, r4
 1120 00e6 FFF7FEFF 		bl	fifo_put
 1121              	.LVL126:
 1122 00ea 0028     		cmp	r0, #0
 1123 00ec A7D0     		beq	.L79
 118:../../shields/Murata/src/alp.c ****   }
 1124              		.loc 1 118 0 is_stmt 0 discriminator 1
 1125 00ee 5F4B     		ldr	r3, .L129+44
 1126 00f0 544A     		ldr	r2, .L129+4
ARM GAS  /tmp/ccaG3DAV.s 			page 32


 1127 00f2 7621     		movs	r1, #118
 1128 00f4 5448     		ldr	r0, .L129+8
 1129 00f6 FFF7FEFF 		bl	__assert_func
 1130              	.LVL127:
 1131              	.L119:
 117:../../shields/Murata/src/alp.c ****     assert(fifo_put(fifo, ((d7ap_session_config_t*)config)->addressee.id, id_length) == oss7SUCCESS
 1132              		.loc 1 117 0 is_stmt 1 discriminator 1
 1133 00fa 5D4B     		ldr	r3, .L129+48
 1134 00fc 514A     		ldr	r2, .L129+4
 1135 00fe 7521     		movs	r1, #117
 1136 0100 5148     		ldr	r0, .L129+8
 1137 0102 FFF7FEFF 		bl	__assert_func
 1138              	.LVL128:
 1139              	.L113:
 1140              	.LBE15:
 1141              	.LBB20:
 122:../../shields/Murata/src/alp.c ****     assert(fifo_put_byte(fifo, control_byte) == oss7SUCCESS);
 1142              		.loc 1 122 0
 1143 0106 96F82810 		ldrb	r1, [r6, #40]	@ zero_extendqisi2
 1144 010a 4900     		lsls	r1, r1, #1
 1145              	.LVL129:
 123:../../shields/Murata/src/alp.c ****     assert(fifo_put_byte(fifo, ((lorawan_session_config_abp_t*)config)->application_port) == oss7SU
 1146              		.loc 1 123 0
 1147 010c 01F0FE01 		and	r1, r1, #254
 1148              	.LVL130:
 1149 0110 2046     		mov	r0, r4
 1150 0112 FFF7FEFF 		bl	fifo_put_byte
 1151              	.LVL131:
 1152 0116 68BB     		cbnz	r0, .L120
 124:../../shields/Murata/src/alp.c ****     assert(fifo_put(fifo, ((lorawan_session_config_abp_t*)config)->nwkSKey, 16) == oss7SUCCESS);
 1153              		.loc 1 124 0
 1154 0118 96F82910 		ldrb	r1, [r6, #41]	@ zero_extendqisi2
 1155 011c 2046     		mov	r0, r4
 1156 011e FFF7FEFF 		bl	fifo_put_byte
 1157              	.LVL132:
 1158 0122 68BB     		cbnz	r0, .L121
 125:../../shields/Murata/src/alp.c ****     assert(fifo_put(fifo, ((lorawan_session_config_abp_t*)config)->appSKey, 16) == oss7SUCCESS);
 1159              		.loc 1 125 0
 1160 0124 1022     		movs	r2, #16
 1161 0126 3146     		mov	r1, r6
 1162 0128 2046     		mov	r0, r4
 1163 012a FFF7FEFF 		bl	fifo_put
 1164              	.LVL133:
 1165 012e 68BB     		cbnz	r0, .L122
 126:../../shields/Murata/src/alp.c ****     uint32_t dev_addr = __builtin_bswap32(((lorawan_session_config_abp_t*)config)->devAddr);
 1166              		.loc 1 126 0
 1167 0130 1022     		movs	r2, #16
 1168 0132 B118     		adds	r1, r6, r2
 1169 0134 2046     		mov	r0, r4
 1170 0136 FFF7FEFF 		bl	fifo_put
 1171              	.LVL134:
 1172 013a 68BB     		cbnz	r0, .L123
 127:../../shields/Murata/src/alp.c ****     assert(fifo_put(fifo, (uint8_t*)&dev_addr, 4) == oss7SUCCESS);
 1173              		.loc 1 127 0
 1174 013c 336A     		ldr	r3, [r6, #32]
 1175 013e 1BBA     		rev	r3, r3
 1176 0140 02A9     		add	r1, sp, #8
ARM GAS  /tmp/ccaG3DAV.s 			page 33


 1177 0142 41F8083D 		str	r3, [r1, #-8]!
 128:../../shields/Murata/src/alp.c ****     uint32_t network_id = __builtin_bswap32(((lorawan_session_config_abp_t*)config)->network_id);
 1178              		.loc 1 128 0
 1179 0146 0422     		movs	r2, #4
 1180 0148 2046     		mov	r0, r4
 1181 014a FFF7FEFF 		bl	fifo_put
 1182              	.LVL135:
 1183 014e 48BB     		cbnz	r0, .L124
 129:../../shields/Murata/src/alp.c **** 
 1184              		.loc 1 129 0
 1185 0150 736A     		ldr	r3, [r6, #36]
 1186 0152 1BBA     		rev	r3, r3
 1187 0154 02A9     		add	r1, sp, #8
 1188 0156 41F8043D 		str	r3, [r1, #-4]!
 131:../../shields/Murata/src/alp.c ****   }
 1189              		.loc 1 131 0
 1190 015a 0422     		movs	r2, #4
 1191 015c 2046     		mov	r0, r4
 1192 015e FFF7FEFF 		bl	fifo_put
 1193              	.LVL136:
 1194 0162 0028     		cmp	r0, #0
 1195 0164 3FF46BAF 		beq	.L79
 131:../../shields/Murata/src/alp.c ****   }
 1196              		.loc 1 131 0 is_stmt 0 discriminator 1
 1197 0168 424B     		ldr	r3, .L129+52
 1198 016a 364A     		ldr	r2, .L129+4
 1199 016c 8321     		movs	r1, #131
 1200 016e 3648     		ldr	r0, .L129+8
 1201 0170 FFF7FEFF 		bl	__assert_func
 1202              	.LVL137:
 1203              	.L120:
 123:../../shields/Murata/src/alp.c ****     assert(fifo_put_byte(fifo, ((lorawan_session_config_abp_t*)config)->application_port) == oss7SU
 1204              		.loc 1 123 0 is_stmt 1 discriminator 1
 1205 0174 404B     		ldr	r3, .L129+56
 1206 0176 334A     		ldr	r2, .L129+4
 1207 0178 7B21     		movs	r1, #123
 1208 017a 3348     		ldr	r0, .L129+8
 1209 017c FFF7FEFF 		bl	__assert_func
 1210              	.LVL138:
 1211              	.L121:
 124:../../shields/Murata/src/alp.c ****     assert(fifo_put(fifo, ((lorawan_session_config_abp_t*)config)->nwkSKey, 16) == oss7SUCCESS);
 1212              		.loc 1 124 0 discriminator 1
 1213 0180 3E4B     		ldr	r3, .L129+60
 1214 0182 304A     		ldr	r2, .L129+4
 1215 0184 7C21     		movs	r1, #124
 1216 0186 3048     		ldr	r0, .L129+8
 1217 0188 FFF7FEFF 		bl	__assert_func
 1218              	.LVL139:
 1219              	.L122:
 125:../../shields/Murata/src/alp.c ****     assert(fifo_put(fifo, ((lorawan_session_config_abp_t*)config)->appSKey, 16) == oss7SUCCESS);
 1220              		.loc 1 125 0 discriminator 1
 1221 018c 3C4B     		ldr	r3, .L129+64
 1222 018e 2D4A     		ldr	r2, .L129+4
 1223 0190 7D21     		movs	r1, #125
 1224 0192 2D48     		ldr	r0, .L129+8
 1225 0194 FFF7FEFF 		bl	__assert_func
 1226              	.LVL140:
ARM GAS  /tmp/ccaG3DAV.s 			page 34


 1227              	.L123:
 126:../../shields/Murata/src/alp.c ****     uint32_t dev_addr = __builtin_bswap32(((lorawan_session_config_abp_t*)config)->devAddr);
 1228              		.loc 1 126 0 discriminator 1
 1229 0198 3A4B     		ldr	r3, .L129+68
 1230 019a 2A4A     		ldr	r2, .L129+4
 1231 019c 7E21     		movs	r1, #126
 1232 019e 2A48     		ldr	r0, .L129+8
 1233 01a0 FFF7FEFF 		bl	__assert_func
 1234              	.LVL141:
 1235              	.L124:
 128:../../shields/Murata/src/alp.c ****     uint32_t network_id = __builtin_bswap32(((lorawan_session_config_abp_t*)config)->network_id);
 1236              		.loc 1 128 0 discriminator 1
 1237 01a4 384B     		ldr	r3, .L129+72
 1238 01a6 274A     		ldr	r2, .L129+4
 1239 01a8 8021     		movs	r1, #128
 1240 01aa 2748     		ldr	r0, .L129+8
 1241 01ac FFF7FEFF 		bl	__assert_func
 1242              	.LVL142:
 1243              	.L114:
 1244              	.LBE20:
 1245              	.LBB21:
 135:../../shields/Murata/src/alp.c ****     assert(fifo_put_byte(fifo, control_byte) == oss7SUCCESS);
 1246              		.loc 1 135 0
 1247 01b0 96F82010 		ldrb	r1, [r6, #32]	@ zero_extendqisi2
 1248 01b4 4900     		lsls	r1, r1, #1
 1249              	.LVL143:
 136:../../shields/Murata/src/alp.c ****     assert(fifo_put_byte(fifo, ((lorawan_session_config_otaa_t*)config)->application_port) == oss7S
 1250              		.loc 1 136 0
 1251 01b6 01F0FE01 		and	r1, r1, #254
 1252              	.LVL144:
 1253 01ba 2046     		mov	r0, r4
 1254 01bc FFF7FEFF 		bl	fifo_put_byte
 1255              	.LVL145:
 1256 01c0 F8B9     		cbnz	r0, .L125
 137:../../shields/Murata/src/alp.c ****     assert(fifo_put(fifo, ((lorawan_session_config_otaa_t*)config)->devEUI, 8) == oss7SUCCESS);
 1257              		.loc 1 137 0
 1258 01c2 96F82110 		ldrb	r1, [r6, #33]	@ zero_extendqisi2
 1259 01c6 2046     		mov	r0, r4
 1260 01c8 FFF7FEFF 		bl	fifo_put_byte
 1261              	.LVL146:
 1262 01cc F8B9     		cbnz	r0, .L126
 138:../../shields/Murata/src/alp.c ****     assert(fifo_put(fifo, ((lorawan_session_config_otaa_t*)config)->appEUI, 8) == oss7SUCCESS);
 1263              		.loc 1 138 0
 1264 01ce 0822     		movs	r2, #8
 1265 01d0 3146     		mov	r1, r6
 1266 01d2 2046     		mov	r0, r4
 1267 01d4 FFF7FEFF 		bl	fifo_put
 1268              	.LVL147:
 1269 01d8 F8B9     		cbnz	r0, .L127
 139:../../shields/Murata/src/alp.c ****     assert(fifo_put(fifo, ((lorawan_session_config_otaa_t*)config)->appKey, 16) == oss7SUCCESS);
 1270              		.loc 1 139 0
 1271 01da 0822     		movs	r2, #8
 1272 01dc B118     		adds	r1, r6, r2
 1273 01de 2046     		mov	r0, r4
 1274 01e0 FFF7FEFF 		bl	fifo_put
 1275              	.LVL148:
 1276 01e4 F8B9     		cbnz	r0, .L128
ARM GAS  /tmp/ccaG3DAV.s 			page 35


 140:../../shields/Murata/src/alp.c ****   }
 1277              		.loc 1 140 0
 1278 01e6 1022     		movs	r2, #16
 1279 01e8 B118     		adds	r1, r6, r2
 1280 01ea 2046     		mov	r0, r4
 1281 01ec FFF7FEFF 		bl	fifo_put
 1282              	.LVL149:
 1283 01f0 0028     		cmp	r0, #0
 1284 01f2 3FF424AF 		beq	.L79
 140:../../shields/Murata/src/alp.c ****   }
 1285              		.loc 1 140 0 is_stmt 0 discriminator 1
 1286 01f6 254B     		ldr	r3, .L129+76
 1287 01f8 124A     		ldr	r2, .L129+4
 1288 01fa 8C21     		movs	r1, #140
 1289 01fc 1248     		ldr	r0, .L129+8
 1290 01fe FFF7FEFF 		bl	__assert_func
 1291              	.LVL150:
 1292              	.L125:
 136:../../shields/Murata/src/alp.c ****     assert(fifo_put_byte(fifo, ((lorawan_session_config_otaa_t*)config)->application_port) == oss7S
 1293              		.loc 1 136 0 is_stmt 1 discriminator 1
 1294 0202 1D4B     		ldr	r3, .L129+56
 1295 0204 0F4A     		ldr	r2, .L129+4
 1296 0206 8821     		movs	r1, #136
 1297 0208 0F48     		ldr	r0, .L129+8
 1298 020a FFF7FEFF 		bl	__assert_func
 1299              	.LVL151:
 1300              	.L126:
 137:../../shields/Murata/src/alp.c ****     assert(fifo_put(fifo, ((lorawan_session_config_otaa_t*)config)->devEUI, 8) == oss7SUCCESS);
 1301              		.loc 1 137 0 discriminator 1
 1302 020e 204B     		ldr	r3, .L129+80
 1303 0210 0C4A     		ldr	r2, .L129+4
 1304 0212 8921     		movs	r1, #137
 1305 0214 0C48     		ldr	r0, .L129+8
 1306 0216 FFF7FEFF 		bl	__assert_func
 1307              	.LVL152:
 1308              	.L127:
 138:../../shields/Murata/src/alp.c ****     assert(fifo_put(fifo, ((lorawan_session_config_otaa_t*)config)->appEUI, 8) == oss7SUCCESS);
 1309              		.loc 1 138 0 discriminator 1
 1310 021a 1E4B     		ldr	r3, .L129+84
 1311 021c 094A     		ldr	r2, .L129+4
 1312 021e 8A21     		movs	r1, #138
 1313 0220 0948     		ldr	r0, .L129+8
 1314 0222 FFF7FEFF 		bl	__assert_func
 1315              	.LVL153:
 1316              	.L128:
 139:../../shields/Murata/src/alp.c ****     assert(fifo_put(fifo, ((lorawan_session_config_otaa_t*)config)->appKey, 16) == oss7SUCCESS);
 1317              		.loc 1 139 0 discriminator 1
 1318 0226 1C4B     		ldr	r3, .L129+88
 1319 0228 064A     		ldr	r2, .L129+4
 1320 022a 8B21     		movs	r1, #139
 1321 022c 0648     		ldr	r0, .L129+8
 1322 022e FFF7FEFF 		bl	__assert_func
 1323              	.LVL154:
 1324              	.L115:
 1325              	.LBE21:
 144:../../shields/Murata/src/alp.c ****   }
 1326              		.loc 1 144 0 discriminator 1
ARM GAS  /tmp/ccaG3DAV.s 			page 36


 1327 0232 1A4B     		ldr	r3, .L129+92
 1328 0234 034A     		ldr	r2, .L129+4
 1329 0236 9021     		movs	r1, #144
 1330 0238 0348     		ldr	r0, .L129+8
 1331 023a FFF7FEFF 		bl	__assert_func
 1332              	.LVL155:
 1333              	.L130:
 1334 023e 00BF     		.align	2
 1335              	.L129:
 1336 0240 00000000 		.word	.LC13
 1337 0244 00000000 		.word	.LANCHOR8
 1338 0248 40000000 		.word	.LC1
 1339 024c 10000000 		.word	.LC14
 1340 0250 44000000 		.word	.LC15
 1341 0254 70000000 		.word	.LC16
 1342 0258 C0000000 		.word	.LC17
 1343 025c 18010000 		.word	.LC18
 1344 0260 38000000 		.word	.LC4
 1345 0264 00000000 		.word	.LANCHOR2
 1346 0268 40000000 		.word	.LC5
 1347 026c D4010000 		.word	.LC20
 1348 0270 74010000 		.word	.LC19
 1349 0274 A4030000 		.word	.LC26
 1350 0278 30020000 		.word	.LC21
 1351 027c 64020000 		.word	.LC22
 1352 0280 C4020000 		.word	.LC23
 1353 0284 18030000 		.word	.LC24
 1354 0288 6C030000 		.word	.LC25
 1355 028c E4040000 		.word	.LC30
 1356 0290 DC030000 		.word	.LC27
 1357 0294 3C040000 		.word	.LC28
 1358 0298 90040000 		.word	.LC29
 1359 029c 38050000 		.word	.LC31
 1360              		.cfi_endproc
 1361              	.LFE7:
 1363              		.section	.text.alp_append_return_file_data_action,"ax",%progbits
 1364              		.align	1
 1365              		.global	alp_append_return_file_data_action
 1366              		.syntax unified
 1367              		.thumb
 1368              		.thumb_func
 1369              		.fpu fpv4-sp-d16
 1371              	alp_append_return_file_data_action:
 1372              	.LFB8:
 150:../../shields/Murata/src/alp.c ****   assert(fifo_put_byte(fifo, ALP_OP_RETURN_FILE_DATA) == oss7SUCCESS);
 1373              		.loc 1 150 0
 1374              		.cfi_startproc
 1375              		@ args = 4, pretend = 0, frame = 0
 1376              		@ frame_needed = 0, uses_anonymous_args = 0
 1377              	.LVL156:
 1378 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1379              	.LCFI32:
 1380              		.cfi_def_cfa_offset 24
 1381              		.cfi_offset 3, -24
 1382              		.cfi_offset 4, -20
 1383              		.cfi_offset 5, -16
 1384              		.cfi_offset 6, -12
ARM GAS  /tmp/ccaG3DAV.s 			page 37


 1385              		.cfi_offset 7, -8
 1386              		.cfi_offset 14, -4
 1387 0002 0446     		mov	r4, r0
 1388 0004 0F46     		mov	r7, r1
 1389 0006 1646     		mov	r6, r2
 1390 0008 1D46     		mov	r5, r3
 151:../../shields/Murata/src/alp.c ****   assert(fifo_put_byte(fifo, file_id) == oss7SUCCESS);
 1391              		.loc 1 151 0
 1392 000a 2021     		movs	r1, #32
 1393              	.LVL157:
 1394 000c FFF7FEFF 		bl	fifo_put_byte
 1395              	.LVL158:
 1396 0010 98B9     		cbnz	r0, .L136
 152:../../shields/Murata/src/alp.c ****   alp_append_length_operand(fifo, offset);
 1397              		.loc 1 152 0
 1398 0012 3946     		mov	r1, r7
 1399 0014 2046     		mov	r0, r4
 1400 0016 FFF7FEFF 		bl	fifo_put_byte
 1401              	.LVL159:
 1402 001a A0B9     		cbnz	r0, .L137
 153:../../shields/Murata/src/alp.c ****   alp_append_length_operand(fifo, length);
 1403              		.loc 1 153 0
 1404 001c 3146     		mov	r1, r6
 1405 001e 2046     		mov	r0, r4
 1406 0020 FFF7FEFF 		bl	alp_append_length_operand
 1407              	.LVL160:
 154:../../shields/Murata/src/alp.c ****   assert(fifo_put(fifo, data, length) == oss7SUCCESS);
 1408              		.loc 1 154 0
 1409 0024 2946     		mov	r1, r5
 1410 0026 2046     		mov	r0, r4
 1411 0028 FFF7FEFF 		bl	alp_append_length_operand
 1412              	.LVL161:
 155:../../shields/Murata/src/alp.c **** }
 1413              		.loc 1 155 0
 1414 002c AAB2     		uxth	r2, r5
 1415 002e 0699     		ldr	r1, [sp, #24]
 1416 0030 2046     		mov	r0, r4
 1417 0032 FFF7FEFF 		bl	fifo_put
 1418              	.LVL162:
 1419 0036 60B9     		cbnz	r0, .L138
 1420 0038 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1421              	.LVL163:
 1422              	.L136:
 151:../../shields/Murata/src/alp.c ****   assert(fifo_put_byte(fifo, file_id) == oss7SUCCESS);
 1423              		.loc 1 151 0 discriminator 1
 1424 003a 094B     		ldr	r3, .L139
 1425 003c 094A     		ldr	r2, .L139+4
 1426 003e 9721     		movs	r1, #151
 1427 0040 0948     		ldr	r0, .L139+8
 1428 0042 FFF7FEFF 		bl	__assert_func
 1429              	.LVL164:
 1430              	.L137:
 152:../../shields/Murata/src/alp.c ****   alp_append_length_operand(fifo, offset);
 1431              		.loc 1 152 0 discriminator 1
 1432 0046 094B     		ldr	r3, .L139+12
 1433 0048 064A     		ldr	r2, .L139+4
 1434 004a 9821     		movs	r1, #152
ARM GAS  /tmp/ccaG3DAV.s 			page 38


 1435 004c 0648     		ldr	r0, .L139+8
 1436 004e FFF7FEFF 		bl	__assert_func
 1437              	.LVL165:
 1438              	.L138:
 155:../../shields/Murata/src/alp.c **** }
 1439              		.loc 1 155 0 discriminator 1
 1440 0052 074B     		ldr	r3, .L139+16
 1441 0054 034A     		ldr	r2, .L139+4
 1442 0056 9B21     		movs	r1, #155
 1443 0058 0348     		ldr	r0, .L139+8
 1444 005a FFF7FEFF 		bl	__assert_func
 1445              	.LVL166:
 1446              	.L140:
 1447 005e 00BF     		.align	2
 1448              	.L139:
 1449 0060 00000000 		.word	.LC32
 1450 0064 00000000 		.word	.LANCHOR9
 1451 0068 40000000 		.word	.LC1
 1452 006c 00000000 		.word	.LC12
 1453 0070 3C000000 		.word	.LC33
 1454              		.cfi_endproc
 1455              	.LFE8:
 1457              		.section	.text.alp_parse_action,"ax",%progbits
 1458              		.align	1
 1459              		.global	alp_parse_action
 1460              		.syntax unified
 1461              		.thumb
 1462              		.thumb_func
 1463              		.fpu fpv4-sp-d16
 1465              	alp_parse_action:
 1466              	.LFB16:
 252:../../shields/Murata/src/alp.c **** 
 253:../../shields/Murata/src/alp.c **** void alp_parse_action(fifo_t* fifo, alp_action_t* action) {
 1467              		.loc 1 253 0
 1468              		.cfi_startproc
 1469              		@ args = 0, pretend = 0, frame = 8
 1470              		@ frame_needed = 0, uses_anonymous_args = 0
 1471              	.LVL167:
 1472 0000 30B5     		push	{r4, r5, lr}
 1473              	.LCFI33:
 1474              		.cfi_def_cfa_offset 12
 1475              		.cfi_offset 4, -12
 1476              		.cfi_offset 5, -8
 1477              		.cfi_offset 14, -4
 1478 0002 83B0     		sub	sp, sp, #12
 1479              	.LCFI34:
 1480              		.cfi_def_cfa_offset 24
 1481 0004 0546     		mov	r5, r0
 1482 0006 0C46     		mov	r4, r1
 254:../../shields/Murata/src/alp.c ****   uint8_t op;
 255:../../shields/Murata/src/alp.c ****   assert(fifo_pop(fifo, &op, 1) == oss7SUCCESS);
 1483              		.loc 1 255 0
 1484 0008 0122     		movs	r2, #1
 1485 000a 0DF10701 		add	r1, sp, #7
 1486              	.LVL168:
 1487 000e FFF7FEFF 		bl	fifo_pop
 1488              	.LVL169:
ARM GAS  /tmp/ccaG3DAV.s 			page 39


 1489 0012 F0B9     		cbnz	r0, .L151
 256:../../shields/Murata/src/alp.c ****   bool b6 = (op >> 6) & 1;
 1490              		.loc 1 256 0
 1491 0014 9DF80710 		ldrb	r1, [sp, #7]	@ zero_extendqisi2
 1492 0018 C1F38012 		ubfx	r2, r1, #6, #1
 1493              	.LVL170:
 257:../../shields/Murata/src/alp.c ****   bool b7 = op >> 7;
 1494              		.loc 1 257 0
 1495 001c CB09     		lsrs	r3, r1, #7
 1496              	.LVL171:
 258:../../shields/Murata/src/alp.c ****   op &= 0x3F; // op is in b5-b0
 1497              		.loc 1 258 0
 1498 001e 01F03F01 		and	r1, r1, #63
 1499 0022 8DF80710 		strb	r1, [sp, #7]
 259:../../shields/Murata/src/alp.c ****   action->operation = op;
 1500              		.loc 1 259 0
 1501 0026 2170     		strb	r1, [r4]
 260:../../shields/Murata/src/alp.c ****   switch(op) {
 1502              		.loc 1 260 0
 1503 0028 0439     		subs	r1, r1, #4
 1504 002a 1F29     		cmp	r1, #31
 1505 002c 2CD8     		bhi	.L143
 1506 002e DFE801F0 		tbb	[pc, r1]
 1507              	.L145:
 1508 0032 16       		.byte	(.L144-.L145)/2
 1509 0033 2B       		.byte	(.L143-.L145)/2
 1510 0034 2B       		.byte	(.L143-.L145)/2
 1511 0035 2B       		.byte	(.L143-.L145)/2
 1512 0036 2B       		.byte	(.L143-.L145)/2
 1513 0037 2B       		.byte	(.L143-.L145)/2
 1514 0038 2B       		.byte	(.L143-.L145)/2
 1515 0039 2B       		.byte	(.L143-.L145)/2
 1516 003a 2B       		.byte	(.L143-.L145)/2
 1517 003b 2B       		.byte	(.L143-.L145)/2
 1518 003c 2B       		.byte	(.L143-.L145)/2
 1519 003d 2B       		.byte	(.L143-.L145)/2
 1520 003e 2B       		.byte	(.L143-.L145)/2
 1521 003f 2B       		.byte	(.L143-.L145)/2
 1522 0040 2B       		.byte	(.L143-.L145)/2
 1523 0041 2B       		.byte	(.L143-.L145)/2
 1524 0042 2B       		.byte	(.L143-.L145)/2
 1525 0043 2B       		.byte	(.L143-.L145)/2
 1526 0044 2B       		.byte	(.L143-.L145)/2
 1527 0045 2B       		.byte	(.L143-.L145)/2
 1528 0046 2B       		.byte	(.L143-.L145)/2
 1529 0047 2B       		.byte	(.L143-.L145)/2
 1530 0048 2B       		.byte	(.L143-.L145)/2
 1531 0049 2B       		.byte	(.L143-.L145)/2
 1532 004a 2B       		.byte	(.L143-.L145)/2
 1533 004b 2B       		.byte	(.L143-.L145)/2
 1534 004c 2B       		.byte	(.L143-.L145)/2
 1535 004d 2B       		.byte	(.L143-.L145)/2
 1536 004e 1C       		.byte	(.L146-.L145)/2
 1537 004f 2B       		.byte	(.L143-.L145)/2
 1538 0050 26       		.byte	(.L147-.L145)/2
 1539 0051 21       		.byte	(.L148-.L145)/2
 1540              	.LVL172:
ARM GAS  /tmp/ccaG3DAV.s 			page 40


 1541              		.p2align 1
 1542              	.L151:
 255:../../shields/Murata/src/alp.c ****   bool b6 = (op >> 6) & 1;
 1543              		.loc 1 255 0 discriminator 1
 1544 0052 114B     		ldr	r3, .L152
 1545 0054 114A     		ldr	r2, .L152+4
 1546 0056 FF21     		movs	r1, #255
 1547 0058 1148     		ldr	r0, .L152+8
 1548 005a FFF7FEFF 		bl	__assert_func
 1549              	.LVL173:
 1550              	.L144:
 261:../../shields/Murata/src/alp.c ****     case ALP_OP_WRITE_FILE_DATA:
 262:../../shields/Murata/src/alp.c ****       parse_op_write_file_data(fifo, action);
 1551              		.loc 1 262 0
 1552 005e 2146     		mov	r1, r4
 1553 0060 2846     		mov	r0, r5
 1554 0062 FFF7FEFF 		bl	parse_op_write_file_data
 1555              	.LVL174:
 1556              	.L141:
 263:../../shields/Murata/src/alp.c ****       break;
 264:../../shields/Murata/src/alp.c ****     case ALP_OP_RETURN_FILE_DATA:
 265:../../shields/Murata/src/alp.c ****       parse_op_return_file_data(fifo, action);
 266:../../shields/Murata/src/alp.c ****       break;
 267:../../shields/Murata/src/alp.c ****     case ALP_OP_RETURN_TAG:
 268:../../shields/Murata/src/alp.c ****       parse_op_return_tag(fifo, action, b6, b7);
 269:../../shields/Murata/src/alp.c ****       break;
 270:../../shields/Murata/src/alp.c ****     case ALP_OP_RETURN_STATUS:
 271:../../shields/Murata/src/alp.c ****       parse_op_return_status(fifo, action, b6, b7);
 272:../../shields/Murata/src/alp.c ****       break;
 273:../../shields/Murata/src/alp.c ****     default:
 274:../../shields/Murata/src/alp.c ****       DPRINT("op %x not implemented", op);
 275:../../shields/Murata/src/alp.c ****       assert(false);
 276:../../shields/Murata/src/alp.c ****   }
 277:../../shields/Murata/src/alp.c **** 
 278:../../shields/Murata/src/alp.c ****   DPRINT("parsed action");
 279:../../shields/Murata/src/alp.c **** }
 1557              		.loc 1 279 0
 1558 0066 03B0     		add	sp, sp, #12
 1559              	.LCFI35:
 1560              		.cfi_remember_state
 1561              		.cfi_def_cfa_offset 12
 1562              		@ sp needed
 1563 0068 30BD     		pop	{r4, r5, pc}
 1564              	.LVL175:
 1565              	.L146:
 1566              	.LCFI36:
 1567              		.cfi_restore_state
 265:../../shields/Murata/src/alp.c ****       break;
 1568              		.loc 1 265 0
 1569 006a 2146     		mov	r1, r4
 1570 006c 2846     		mov	r0, r5
 1571 006e FFF7FEFF 		bl	parse_op_return_file_data
 1572              	.LVL176:
 266:../../shields/Murata/src/alp.c ****     case ALP_OP_RETURN_TAG:
 1573              		.loc 1 266 0
 1574 0072 F8E7     		b	.L141
 1575              	.LVL177:
ARM GAS  /tmp/ccaG3DAV.s 			page 41


 1576              	.L148:
 268:../../shields/Murata/src/alp.c ****       break;
 1577              		.loc 1 268 0
 1578 0074 2146     		mov	r1, r4
 1579 0076 2846     		mov	r0, r5
 1580 0078 FFF7FEFF 		bl	parse_op_return_tag
 1581              	.LVL178:
 269:../../shields/Murata/src/alp.c ****     case ALP_OP_RETURN_STATUS:
 1582              		.loc 1 269 0
 1583 007c F3E7     		b	.L141
 1584              	.LVL179:
 1585              	.L147:
 271:../../shields/Murata/src/alp.c ****       break;
 1586              		.loc 1 271 0
 1587 007e 2146     		mov	r1, r4
 1588 0080 2846     		mov	r0, r5
 1589 0082 FFF7FEFF 		bl	parse_op_return_status
 1590              	.LVL180:
 272:../../shields/Murata/src/alp.c ****     default:
 1591              		.loc 1 272 0
 1592 0086 EEE7     		b	.L141
 1593              	.LVL181:
 1594              	.L143:
 275:../../shields/Murata/src/alp.c ****   }
 1595              		.loc 1 275 0
 1596 0088 064B     		ldr	r3, .L152+12
 1597              	.LVL182:
 1598 008a 044A     		ldr	r2, .L152+4
 1599              	.LVL183:
 1600 008c 40F21311 		movw	r1, #275
 1601 0090 0348     		ldr	r0, .L152+8
 1602 0092 FFF7FEFF 		bl	__assert_func
 1603              	.LVL184:
 1604              	.L153:
 1605 0096 00BF     		.align	2
 1606              	.L152:
 1607 0098 00000000 		.word	.LC34
 1608 009c 00000000 		.word	.LANCHOR10
 1609 00a0 40000000 		.word	.LC1
 1610 00a4 38000000 		.word	.LC4
 1611              		.cfi_endproc
 1612              	.LFE16:
 1614              		.section	.text.alp_append_tag_request_action,"ax",%progbits
 1615              		.align	1
 1616              		.global	alp_append_tag_request_action
 1617              		.syntax unified
 1618              		.thumb
 1619              		.thumb_func
 1620              		.fpu fpv4-sp-d16
 1622              	alp_append_tag_request_action:
 1623              	.LFB18:
 280:../../shields/Murata/src/alp.c **** 
 281:../../shields/Murata/src/alp.c **** uint8_t alp_get_expected_response_length(uint8_t* alp_command, uint8_t alp_command_length) {
 282:../../shields/Murata/src/alp.c ****   uint8_t expected_response_length = 0;
 283:../../shields/Murata/src/alp.c ****   fifo_t fifo;
 284:../../shields/Murata/src/alp.c ****   fifo_init_filled(&fifo, alp_command, alp_command_length, alp_command_length + 1);
 285:../../shields/Murata/src/alp.c **** 
ARM GAS  /tmp/ccaG3DAV.s 			page 42


 286:../../shields/Murata/src/alp.c ****   while(fifo_get_size(&fifo) > 0) {
 287:../../shields/Murata/src/alp.c ****     alp_control_t control;
 288:../../shields/Murata/src/alp.c ****     fifo_pop(&fifo, (uint8_t*)&control.raw, 1);
 289:../../shields/Murata/src/alp.c ****     switch(control.operation) {
 290:../../shields/Murata/src/alp.c ****       case ALP_OP_READ_FILE_DATA:
 291:../../shields/Murata/src/alp.c ****         fifo_skip(&fifo, 1); // skip file ID
 292:../../shields/Murata/src/alp.c ****         uint32_t offset = alp_parse_length_operand(&fifo); // offset
 293:../../shields/Murata/src/alp.c ****         expected_response_length += alp_parse_length_operand(&fifo); // the file length
 294:../../shields/Murata/src/alp.c ****         expected_response_length += alp_length_operand_coded_length(expected_response_length); // t
 295:../../shields/Murata/src/alp.c ****         expected_response_length += alp_length_operand_coded_length(offset) + 1; // the length of t
 296:../../shields/Murata/src/alp.c ****         expected_response_length += 1; // the opcode
 297:../../shields/Murata/src/alp.c ****         break;
 298:../../shields/Murata/src/alp.c ****       case ALP_OP_REQUEST_TAG:
 299:../../shields/Murata/src/alp.c ****         fifo_skip(&fifo, 1); // skip tag ID operand
 300:../../shields/Murata/src/alp.c ****         break;
 301:../../shields/Murata/src/alp.c ****       case ALP_OP_RETURN_FILE_DATA:
 302:../../shields/Murata/src/alp.c ****       case ALP_OP_WRITE_FILE_DATA:
 303:../../shields/Murata/src/alp.c ****         fifo_skip(&fifo, 1); // skip file ID
 304:../../shields/Murata/src/alp.c ****         alp_parse_length_operand(&fifo); // offset
 305:../../shields/Murata/src/alp.c ****         fifo_skip(&fifo, alp_parse_length_operand(&fifo));
 306:../../shields/Murata/src/alp.c ****         break;
 307:../../shields/Murata/src/alp.c ****       case ALP_OP_FORWARD: ;
 308:../../shields/Murata/src/alp.c ****         uint8_t itf_id;
 309:../../shields/Murata/src/alp.c ****         fifo_pop(&fifo, &itf_id, 1);
 310:../../shields/Murata/src/alp.c ****         if(itf_id == ALP_ITF_ID_D7ASP) {
 311:../../shields/Murata/src/alp.c ****           fifo_skip(&fifo, 1); // skip QoS, dormant timeout
 312:../../shields/Murata/src/alp.c ****           d7ap_addressee_ctrl_t addressee_ctrl;
 313:../../shields/Murata/src/alp.c ****           fifo_pop(&fifo, (uint8_t*)&addressee_ctrl.raw, 1);
 314:../../shields/Murata/src/alp.c ****           fifo_skip(&fifo, 2 + d7ap_addressee_id_length(addressee_ctrl.id_type)); // skip addressee
 315:../../shields/Murata/src/alp.c ****           // TODO refactor to reuse same logic for parsing and response length counting
 316:../../shields/Murata/src/alp.c ****         }
 317:../../shields/Murata/src/alp.c ****         // other ITFs have no configuration
 318:../../shields/Murata/src/alp.c ****         break;
 319:../../shields/Murata/src/alp.c ****       case ALP_OP_WRITE_FILE_PROPERTIES:
 320:../../shields/Murata/src/alp.c ****         fifo_skip(&fifo, 1 + sizeof(fs_file_header_t)); // skip file ID & header
 321:../../shields/Murata/src/alp.c ****         break;
 322:../../shields/Murata/src/alp.c ****       // TODO other operations
 323:../../shields/Murata/src/alp.c ****       default:
 324:../../shields/Murata/src/alp.c ****         DPRINT("op %i not implemented", control.operation);
 325:../../shields/Murata/src/alp.c ****         assert(false);
 326:../../shields/Murata/src/alp.c ****     }
 327:../../shields/Murata/src/alp.c ****   }
 328:../../shields/Murata/src/alp.c **** 
 329:../../shields/Murata/src/alp.c ****   DPRINT("Expected ALP response length=%i", expected_response_length);
 330:../../shields/Murata/src/alp.c ****   return expected_response_length;
 331:../../shields/Murata/src/alp.c **** }
 332:../../shields/Murata/src/alp.c **** 
 333:../../shields/Murata/src/alp.c **** void alp_append_tag_request_action(fifo_t* fifo, uint8_t tag_id, bool eop) {
 1624              		.loc 1 333 0
 1625              		.cfi_startproc
 1626              		@ args = 0, pretend = 0, frame = 0
 1627              		@ frame_needed = 0, uses_anonymous_args = 0
 1628              	.LVL185:
 1629 0000 38B5     		push	{r3, r4, r5, lr}
 1630              	.LCFI37:
 1631              		.cfi_def_cfa_offset 16
 1632              		.cfi_offset 3, -16
ARM GAS  /tmp/ccaG3DAV.s 			page 43


 1633              		.cfi_offset 4, -12
 1634              		.cfi_offset 5, -8
 1635              		.cfi_offset 14, -4
 1636 0002 0446     		mov	r4, r0
 1637 0004 0D46     		mov	r5, r1
 334:../../shields/Murata/src/alp.c ****   DPRINT("append tag %i", tag_id);
 335:../../shields/Murata/src/alp.c ****   uint8_t op = ALP_OP_REQUEST_TAG | (eop << 7);
 1638              		.loc 1 335 0
 1639 0006 D201     		lsls	r2, r2, #7
 1640              	.LVL186:
 1641 0008 42F03401 		orr	r1, r2, #52
 1642              	.LVL187:
 336:../../shields/Murata/src/alp.c ****   assert(fifo_put_byte(fifo, op) == oss7SUCCESS);
 1643              		.loc 1 336 0
 1644 000c 01F0B401 		and	r1, r1, #180
 1645              	.LVL188:
 1646 0010 FFF7FEFF 		bl	fifo_put_byte
 1647              	.LVL189:
 1648 0014 28B9     		cbnz	r0, .L158
 337:../../shields/Murata/src/alp.c ****   assert(fifo_put_byte(fifo, tag_id) == oss7SUCCESS);
 1649              		.loc 1 337 0
 1650 0016 2946     		mov	r1, r5
 1651 0018 2046     		mov	r0, r4
 1652 001a FFF7FEFF 		bl	fifo_put_byte
 1653              	.LVL190:
 1654 001e 38B9     		cbnz	r0, .L159
 1655 0020 38BD     		pop	{r3, r4, r5, pc}
 1656              	.LVL191:
 1657              	.L158:
 336:../../shields/Murata/src/alp.c ****   assert(fifo_put_byte(fifo, op) == oss7SUCCESS);
 1658              		.loc 1 336 0 discriminator 1
 1659 0022 074B     		ldr	r3, .L160
 1660 0024 074A     		ldr	r2, .L160+4
 1661 0026 4FF4A871 		mov	r1, #336
 1662 002a 0748     		ldr	r0, .L160+8
 1663 002c FFF7FEFF 		bl	__assert_func
 1664              	.LVL192:
 1665              	.L159:
 1666              		.loc 1 337 0 discriminator 1
 1667 0030 064B     		ldr	r3, .L160+12
 1668 0032 044A     		ldr	r2, .L160+4
 1669 0034 40F25111 		movw	r1, #337
 1670 0038 0348     		ldr	r0, .L160+8
 1671 003a FFF7FEFF 		bl	__assert_func
 1672              	.LVL193:
 1673              	.L161:
 1674 003e 00BF     		.align	2
 1675              	.L160:
 1676 0040 00000000 		.word	.LC35
 1677 0044 00000000 		.word	.LANCHOR11
 1678 0048 40000000 		.word	.LC1
 1679 004c 28000000 		.word	.LC36
 1680              		.cfi_endproc
 1681              	.LFE18:
 1683              		.section	.text.alp_append_read_file_data_action,"ax",%progbits
 1684              		.align	1
 1685              		.global	alp_append_read_file_data_action
ARM GAS  /tmp/ccaG3DAV.s 			page 44


 1686              		.syntax unified
 1687              		.thumb
 1688              		.thumb_func
 1689              		.fpu fpv4-sp-d16
 1691              	alp_append_read_file_data_action:
 1692              	.LFB19:
 338:../../shields/Murata/src/alp.c **** }
 339:../../shields/Murata/src/alp.c **** 
 340:../../shields/Murata/src/alp.c **** void alp_append_read_file_data_action(fifo_t* fifo, uint8_t file_id, uint32_t offset, uint32_t leng
 1693              		.loc 1 340 0
 1694              		.cfi_startproc
 1695              		@ args = 8, pretend = 0, frame = 0
 1696              		@ frame_needed = 0, uses_anonymous_args = 0
 1697              	.LVL194:
 1698 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1699              	.LCFI38:
 1700              		.cfi_def_cfa_offset 24
 1701              		.cfi_offset 3, -24
 1702              		.cfi_offset 4, -20
 1703              		.cfi_offset 5, -16
 1704              		.cfi_offset 6, -12
 1705              		.cfi_offset 7, -8
 1706              		.cfi_offset 14, -4
 1707 0002 0446     		mov	r4, r0
 1708 0004 0E46     		mov	r6, r1
 1709 0006 1746     		mov	r7, r2
 1710 0008 1D46     		mov	r5, r3
 341:../../shields/Murata/src/alp.c ****   uint8_t op = ALP_OP_READ_FILE_DATA | (resp << 6) | (group << 7);
 1711              		.loc 1 341 0
 1712 000a 9DF81810 		ldrb	r1, [sp, #24]	@ zero_extendqisi2
 1713              	.LVL195:
 1714 000e 8901     		lsls	r1, r1, #6
 1715 0010 41F00101 		orr	r1, r1, #1
 1716 0014 49B2     		sxtb	r1, r1
 1717 0016 9DF81C30 		ldrb	r3, [sp, #28]	@ zero_extendqisi2
 1718              	.LVL196:
 1719 001a 41EAC311 		orr	r1, r1, r3, lsl #7
 1720              	.LVL197:
 342:../../shields/Murata/src/alp.c ****   assert(fifo_put_byte(fifo, op) == oss7SUCCESS);
 1721              		.loc 1 342 0
 1722 001e 01F0C101 		and	r1, r1, #193
 1723              	.LVL198:
 1724 0022 FFF7FEFF 		bl	fifo_put_byte
 1725              	.LVL199:
 1726 0026 48B9     		cbnz	r0, .L165
 343:../../shields/Murata/src/alp.c ****   alp_append_file_offset_operand(fifo, file_id, offset);
 1727              		.loc 1 343 0
 1728 0028 3A46     		mov	r2, r7
 1729 002a 3146     		mov	r1, r6
 1730 002c 2046     		mov	r0, r4
 1731 002e FFF7FEFF 		bl	alp_append_file_offset_operand
 1732              	.LVL200:
 344:../../shields/Murata/src/alp.c ****   alp_append_length_operand(fifo, length);
 1733              		.loc 1 344 0
 1734 0032 2946     		mov	r1, r5
 1735 0034 2046     		mov	r0, r4
 1736 0036 FFF7FEFF 		bl	alp_append_length_operand
ARM GAS  /tmp/ccaG3DAV.s 			page 45


 1737              	.LVL201:
 1738 003a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1739              	.LVL202:
 1740              	.L165:
 342:../../shields/Murata/src/alp.c ****   assert(fifo_put_byte(fifo, op) == oss7SUCCESS);
 1741              		.loc 1 342 0 discriminator 1
 1742 003c 034B     		ldr	r3, .L166
 1743 003e 044A     		ldr	r2, .L166+4
 1744 0040 4FF4AB71 		mov	r1, #342
 1745 0044 0348     		ldr	r0, .L166+8
 1746 0046 FFF7FEFF 		bl	__assert_func
 1747              	.LVL203:
 1748              	.L167:
 1749 004a 00BF     		.align	2
 1750              	.L166:
 1751 004c 00000000 		.word	.LC35
 1752 0050 00000000 		.word	.LANCHOR12
 1753 0054 40000000 		.word	.LC1
 1754              		.cfi_endproc
 1755              	.LFE19:
 1757              		.section	.text.alp_append_write_file_data_action,"ax",%progbits
 1758              		.align	1
 1759              		.global	alp_append_write_file_data_action
 1760              		.syntax unified
 1761              		.thumb
 1762              		.thumb_func
 1763              		.fpu fpv4-sp-d16
 1765              	alp_append_write_file_data_action:
 1766              	.LFB20:
 345:../../shields/Murata/src/alp.c **** }
 346:../../shields/Murata/src/alp.c **** 
 347:../../shields/Murata/src/alp.c **** void alp_append_write_file_data_action(fifo_t* fifo, uint8_t file_id, uint32_t offset, uint32_t len
 1767              		.loc 1 347 0
 1768              		.cfi_startproc
 1769              		@ args = 12, pretend = 0, frame = 0
 1770              		@ frame_needed = 0, uses_anonymous_args = 0
 1771              	.LVL204:
 1772 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1773              	.LCFI39:
 1774              		.cfi_def_cfa_offset 24
 1775              		.cfi_offset 3, -24
 1776              		.cfi_offset 4, -20
 1777              		.cfi_offset 5, -16
 1778              		.cfi_offset 6, -12
 1779              		.cfi_offset 7, -8
 1780              		.cfi_offset 14, -4
 1781 0002 0446     		mov	r4, r0
 1782 0004 0E46     		mov	r6, r1
 1783 0006 1746     		mov	r7, r2
 1784 0008 1D46     		mov	r5, r3
 348:../../shields/Murata/src/alp.c ****   uint8_t op = ALP_OP_WRITE_FILE_DATA | (resp << 6) | (group << 7);
 1785              		.loc 1 348 0
 1786 000a 9DF81C10 		ldrb	r1, [sp, #28]	@ zero_extendqisi2
 1787              	.LVL205:
 1788 000e 8901     		lsls	r1, r1, #6
 1789 0010 41F00401 		orr	r1, r1, #4
 1790 0014 49B2     		sxtb	r1, r1
ARM GAS  /tmp/ccaG3DAV.s 			page 46


 1791 0016 9DF82030 		ldrb	r3, [sp, #32]	@ zero_extendqisi2
 1792              	.LVL206:
 1793 001a 41EAC311 		orr	r1, r1, r3, lsl #7
 1794              	.LVL207:
 349:../../shields/Murata/src/alp.c ****   assert(fifo_put_byte(fifo, op) == oss7SUCCESS);
 1795              		.loc 1 349 0
 1796 001e 01F0C401 		and	r1, r1, #196
 1797              	.LVL208:
 1798 0022 FFF7FEFF 		bl	fifo_put_byte
 1799              	.LVL209:
 1800 0026 78B9     		cbnz	r0, .L172
 350:../../shields/Murata/src/alp.c ****   alp_append_file_offset_operand(fifo, file_id, offset);
 1801              		.loc 1 350 0
 1802 0028 3A46     		mov	r2, r7
 1803 002a 3146     		mov	r1, r6
 1804 002c 2046     		mov	r0, r4
 1805 002e FFF7FEFF 		bl	alp_append_file_offset_operand
 1806              	.LVL210:
 351:../../shields/Murata/src/alp.c ****   alp_append_length_operand(fifo, length);
 1807              		.loc 1 351 0
 1808 0032 2946     		mov	r1, r5
 1809 0034 2046     		mov	r0, r4
 1810 0036 FFF7FEFF 		bl	alp_append_length_operand
 1811              	.LVL211:
 352:../../shields/Murata/src/alp.c ****   assert(fifo_put(fifo, data, length) == oss7SUCCESS);
 1812              		.loc 1 352 0
 1813 003a AAB2     		uxth	r2, r5
 1814 003c 0699     		ldr	r1, [sp, #24]
 1815 003e 2046     		mov	r0, r4
 1816 0040 FFF7FEFF 		bl	fifo_put
 1817              	.LVL212:
 1818 0044 38B9     		cbnz	r0, .L173
 1819 0046 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1820              	.LVL213:
 1821              	.L172:
 349:../../shields/Murata/src/alp.c ****   alp_append_file_offset_operand(fifo, file_id, offset);
 1822              		.loc 1 349 0 discriminator 1
 1823 0048 064B     		ldr	r3, .L174
 1824 004a 074A     		ldr	r2, .L174+4
 1825 004c 40F25D11 		movw	r1, #349
 1826 0050 0648     		ldr	r0, .L174+8
 1827 0052 FFF7FEFF 		bl	__assert_func
 1828              	.LVL214:
 1829              	.L173:
 1830              		.loc 1 352 0 discriminator 1
 1831 0056 064B     		ldr	r3, .L174+12
 1832 0058 034A     		ldr	r2, .L174+4
 1833 005a 4FF4B071 		mov	r1, #352
 1834 005e 0348     		ldr	r0, .L174+8
 1835 0060 FFF7FEFF 		bl	__assert_func
 1836              	.LVL215:
 1837              	.L175:
 1838              		.align	2
 1839              	.L174:
 1840 0064 00000000 		.word	.LC35
 1841 0068 00000000 		.word	.LANCHOR13
 1842 006c 40000000 		.word	.LC1
ARM GAS  /tmp/ccaG3DAV.s 			page 47


 1843 0070 3C000000 		.word	.LC33
 1844              		.cfi_endproc
 1845              	.LFE20:
 1847              		.section	.text.alp_length_operand_coded_length,"ax",%progbits
 1848              		.align	1
 1849              		.global	alp_length_operand_coded_length
 1850              		.syntax unified
 1851              		.thumb
 1852              		.thumb_func
 1853              		.fpu fpv4-sp-d16
 1855              	alp_length_operand_coded_length:
 1856              	.LFB21:
 353:../../shields/Murata/src/alp.c **** }
 354:../../shields/Murata/src/alp.c **** 
 355:../../shields/Murata/src/alp.c **** uint8_t alp_length_operand_coded_length(uint32_t length) {
 1857              		.loc 1 355 0
 1858              		.cfi_startproc
 1859              		@ args = 0, pretend = 0, frame = 0
 1860              		@ frame_needed = 0, uses_anonymous_args = 0
 1861              		@ link register save eliminated.
 1862              	.LVL216:
 1863 0000 0346     		mov	r3, r0
 1864              	.LVL217:
 356:../../shields/Murata/src/alp.c ****   uint8_t coded_len = 1;
 357:../../shields/Murata/src/alp.c ****   if(length > 0x3F)
 1865              		.loc 1 357 0
 1866 0002 3F28     		cmp	r0, #63
 1867 0004 09D8     		bhi	.L180
 356:../../shields/Murata/src/alp.c ****   uint8_t coded_len = 1;
 1868              		.loc 1 356 0
 1869 0006 0120     		movs	r0, #1
 1870              	.LVL218:
 1871              	.L177:
 358:../../shields/Murata/src/alp.c ****     coded_len = 2;
 359:../../shields/Murata/src/alp.c **** 
 360:../../shields/Murata/src/alp.c ****   if(length > 0x3FFF)
 1872              		.loc 1 360 0
 1873 0008 B3F5804F 		cmp	r3, #16384
 1874 000c 00D3     		bcc	.L178
 361:../../shields/Murata/src/alp.c ****     coded_len = 3;
 1875              		.loc 1 361 0
 1876 000e 0320     		movs	r0, #3
 1877              	.LVL219:
 1878              	.L178:
 362:../../shields/Murata/src/alp.c **** 
 363:../../shields/Murata/src/alp.c ****   if(length > 0x3FFFFF)
 1879              		.loc 1 363 0
 1880 0010 B3F5800F 		cmp	r3, #4194304
 1881 0014 00D3     		bcc	.L179
 364:../../shields/Murata/src/alp.c ****     coded_len = 4;
 1882              		.loc 1 364 0
 1883 0016 0420     		movs	r0, #4
 1884              	.LVL220:
 1885              	.L179:
 365:../../shields/Murata/src/alp.c **** 
 366:../../shields/Murata/src/alp.c ****   return coded_len;
 367:../../shields/Murata/src/alp.c **** }
ARM GAS  /tmp/ccaG3DAV.s 			page 48


 1886              		.loc 1 367 0
 1887 0018 7047     		bx	lr
 1888              	.LVL221:
 1889              	.L180:
 358:../../shields/Murata/src/alp.c **** 
 1890              		.loc 1 358 0
 1891 001a 0220     		movs	r0, #2
 1892              	.LVL222:
 1893 001c F4E7     		b	.L177
 1894              		.cfi_endproc
 1895              	.LFE21:
 1897              		.section	.text.alp_get_expected_response_length,"ax",%progbits
 1898              		.align	1
 1899              		.global	alp_get_expected_response_length
 1900              		.syntax unified
 1901              		.thumb
 1902              		.thumb_func
 1903              		.fpu fpv4-sp-d16
 1905              	alp_get_expected_response_length:
 1906              	.LFB17:
 281:../../shields/Murata/src/alp.c ****   uint8_t expected_response_length = 0;
 1907              		.loc 1 281 0
 1908              		.cfi_startproc
 1909              		@ args = 0, pretend = 0, frame = 24
 1910              		@ frame_needed = 0, uses_anonymous_args = 0
 1911              	.LVL223:
 1912 0000 30B5     		push	{r4, r5, lr}
 1913              	.LCFI40:
 1914              		.cfi_def_cfa_offset 12
 1915              		.cfi_offset 4, -12
 1916              		.cfi_offset 5, -8
 1917              		.cfi_offset 14, -4
 1918 0002 87B0     		sub	sp, sp, #28
 1919              	.LCFI41:
 1920              		.cfi_def_cfa_offset 40
 1921              	.LVL224:
 284:../../shields/Murata/src/alp.c **** 
 1922              		.loc 1 284 0
 1923 0004 0A46     		mov	r2, r1
 1924 0006 4B1C     		adds	r3, r1, #1
 1925 0008 0146     		mov	r1, r0
 1926              	.LVL225:
 1927 000a 02A8     		add	r0, sp, #8
 1928              	.LVL226:
 1929 000c FFF7FEFF 		bl	fifo_init_filled
 1930              	.LVL227:
 282:../../shields/Murata/src/alp.c ****   fifo_t fifo;
 1931              		.loc 1 282 0
 1932 0010 0024     		movs	r4, #0
 1933              	.LVL228:
 1934              	.L184:
 286:../../shields/Murata/src/alp.c ****     alp_control_t control;
 1935              		.loc 1 286 0
 1936 0012 02A8     		add	r0, sp, #8
 1937 0014 FFF7FEFF 		bl	fifo_get_size
 1938              	.LVL229:
 1939 0018 0028     		cmp	r0, #0
ARM GAS  /tmp/ccaG3DAV.s 			page 49


 1940 001a 00F09380 		beq	.L202
 1941              	.LBB27:
 288:../../shields/Murata/src/alp.c ****     switch(control.operation) {
 1942              		.loc 1 288 0
 1943 001e 0122     		movs	r2, #1
 1944 0020 6946     		mov	r1, sp
 1945 0022 02A8     		add	r0, sp, #8
 1946 0024 FFF7FEFF 		bl	fifo_pop
 1947              	.LVL230:
 289:../../shields/Murata/src/alp.c ****       case ALP_OP_READ_FILE_DATA:
 1948              		.loc 1 289 0
 1949 0028 9DF80030 		ldrb	r3, [sp]	@ zero_extendqisi2
 1950 002c 03F03F03 		and	r3, r3, #63
 1951 0030 013B     		subs	r3, r3, #1
 1952 0032 332B     		cmp	r3, #51
 1953 0034 7FD8     		bhi	.L185
 1954 0036 DFE803F0 		tbb	[pc, r3]
 1955              	.L187:
 1956 003a 1A       		.byte	(.L186-.L187)/2
 1957 003b 7E       		.byte	(.L185-.L187)/2
 1958 003c 7E       		.byte	(.L185-.L187)/2
 1959 003d 3A       		.byte	(.L188-.L187)/2
 1960 003e 7E       		.byte	(.L185-.L187)/2
 1961 003f 79       		.byte	(.L189-.L187)/2
 1962 0040 7E       		.byte	(.L185-.L187)/2
 1963 0041 7E       		.byte	(.L185-.L187)/2
 1964 0042 7E       		.byte	(.L185-.L187)/2
 1965 0043 7E       		.byte	(.L185-.L187)/2
 1966 0044 7E       		.byte	(.L185-.L187)/2
 1967 0045 7E       		.byte	(.L185-.L187)/2
 1968 0046 7E       		.byte	(.L185-.L187)/2
 1969 0047 7E       		.byte	(.L185-.L187)/2
 1970 0048 7E       		.byte	(.L185-.L187)/2
 1971 0049 7E       		.byte	(.L185-.L187)/2
 1972 004a 7E       		.byte	(.L185-.L187)/2
 1973 004b 7E       		.byte	(.L185-.L187)/2
 1974 004c 7E       		.byte	(.L185-.L187)/2
 1975 004d 7E       		.byte	(.L185-.L187)/2
 1976 004e 7E       		.byte	(.L185-.L187)/2
 1977 004f 7E       		.byte	(.L185-.L187)/2
 1978 0050 7E       		.byte	(.L185-.L187)/2
 1979 0051 7E       		.byte	(.L185-.L187)/2
 1980 0052 7E       		.byte	(.L185-.L187)/2
 1981 0053 7E       		.byte	(.L185-.L187)/2
 1982 0054 7E       		.byte	(.L185-.L187)/2
 1983 0055 7E       		.byte	(.L185-.L187)/2
 1984 0056 7E       		.byte	(.L185-.L187)/2
 1985 0057 7E       		.byte	(.L185-.L187)/2
 1986 0058 7E       		.byte	(.L185-.L187)/2
 1987 0059 3A       		.byte	(.L188-.L187)/2
 1988 005a 7E       		.byte	(.L185-.L187)/2
 1989 005b 7E       		.byte	(.L185-.L187)/2
 1990 005c 7E       		.byte	(.L185-.L187)/2
 1991 005d 7E       		.byte	(.L185-.L187)/2
 1992 005e 7E       		.byte	(.L185-.L187)/2
 1993 005f 7E       		.byte	(.L185-.L187)/2
 1994 0060 7E       		.byte	(.L185-.L187)/2
ARM GAS  /tmp/ccaG3DAV.s 			page 50


 1995 0061 7E       		.byte	(.L185-.L187)/2
 1996 0062 7E       		.byte	(.L185-.L187)/2
 1997 0063 7E       		.byte	(.L185-.L187)/2
 1998 0064 7E       		.byte	(.L185-.L187)/2
 1999 0065 7E       		.byte	(.L185-.L187)/2
 2000 0066 7E       		.byte	(.L185-.L187)/2
 2001 0067 7E       		.byte	(.L185-.L187)/2
 2002 0068 7E       		.byte	(.L185-.L187)/2
 2003 0069 7E       		.byte	(.L185-.L187)/2
 2004 006a 7E       		.byte	(.L185-.L187)/2
 2005 006b 49       		.byte	(.L190-.L187)/2
 2006 006c 7E       		.byte	(.L185-.L187)/2
 2007 006d 35       		.byte	(.L191-.L187)/2
 2008              		.p2align 1
 2009              	.L186:
 2010              	.LBB28:
 291:../../shields/Murata/src/alp.c ****         uint32_t offset = alp_parse_length_operand(&fifo); // offset
 2011              		.loc 1 291 0
 2012 006e 0121     		movs	r1, #1
 2013 0070 02A8     		add	r0, sp, #8
 2014 0072 FFF7FEFF 		bl	fifo_skip
 2015              	.LVL231:
 292:../../shields/Murata/src/alp.c ****         expected_response_length += alp_parse_length_operand(&fifo); // the file length
 2016              		.loc 1 292 0
 2017 0076 02A8     		add	r0, sp, #8
 2018 0078 FFF7FEFF 		bl	alp_parse_length_operand
 2019              	.LVL232:
 2020 007c 0546     		mov	r5, r0
 2021              	.LVL233:
 293:../../shields/Murata/src/alp.c ****         expected_response_length += alp_length_operand_coded_length(expected_response_length); // t
 2022              		.loc 1 293 0
 2023 007e 02A8     		add	r0, sp, #8
 2024              	.LVL234:
 2025 0080 FFF7FEFF 		bl	alp_parse_length_operand
 2026              	.LVL235:
 2027 0084 0444     		add	r4, r4, r0
 2028              	.LVL236:
 2029 0086 E4B2     		uxtb	r4, r4
 2030              	.LVL237:
 294:../../shields/Murata/src/alp.c ****         expected_response_length += alp_length_operand_coded_length(offset) + 1; // the length of t
 2031              		.loc 1 294 0
 2032 0088 2046     		mov	r0, r4
 2033 008a FFF7FEFF 		bl	alp_length_operand_coded_length
 2034              	.LVL238:
 2035 008e 0444     		add	r4, r4, r0
 2036              	.LVL239:
 2037 0090 E4B2     		uxtb	r4, r4
 2038              	.LVL240:
 295:../../shields/Murata/src/alp.c ****         expected_response_length += 1; // the opcode
 2039              		.loc 1 295 0
 2040 0092 2846     		mov	r0, r5
 2041 0094 FFF7FEFF 		bl	alp_length_operand_coded_length
 2042              	.LVL241:
 2043 0098 0130     		adds	r0, r0, #1
 2044 009a 0444     		add	r4, r4, r0
 2045              	.LVL242:
 2046 009c E4B2     		uxtb	r4, r4
ARM GAS  /tmp/ccaG3DAV.s 			page 51


 2047              	.LVL243:
 296:../../shields/Murata/src/alp.c ****         break;
 2048              		.loc 1 296 0
 2049 009e 0134     		adds	r4, r4, #1
 2050              	.LVL244:
 2051 00a0 E4B2     		uxtb	r4, r4
 2052              	.LVL245:
 297:../../shields/Murata/src/alp.c ****       case ALP_OP_REQUEST_TAG:
 2053              		.loc 1 297 0
 2054 00a2 B6E7     		b	.L184
 2055              	.LVL246:
 2056              	.L191:
 299:../../shields/Murata/src/alp.c ****         break;
 2057              		.loc 1 299 0
 2058 00a4 0121     		movs	r1, #1
 2059 00a6 02A8     		add	r0, sp, #8
 2060 00a8 FFF7FEFF 		bl	fifo_skip
 2061              	.LVL247:
 300:../../shields/Murata/src/alp.c ****       case ALP_OP_RETURN_FILE_DATA:
 2062              		.loc 1 300 0
 2063 00ac B1E7     		b	.L184
 2064              	.L188:
 303:../../shields/Murata/src/alp.c ****         alp_parse_length_operand(&fifo); // offset
 2065              		.loc 1 303 0
 2066 00ae 0121     		movs	r1, #1
 2067 00b0 02A8     		add	r0, sp, #8
 2068 00b2 FFF7FEFF 		bl	fifo_skip
 2069              	.LVL248:
 304:../../shields/Murata/src/alp.c ****         fifo_skip(&fifo, alp_parse_length_operand(&fifo));
 2070              		.loc 1 304 0
 2071 00b6 02A8     		add	r0, sp, #8
 2072 00b8 FFF7FEFF 		bl	alp_parse_length_operand
 2073              	.LVL249:
 305:../../shields/Murata/src/alp.c ****         break;
 2074              		.loc 1 305 0
 2075 00bc 02A8     		add	r0, sp, #8
 2076 00be FFF7FEFF 		bl	alp_parse_length_operand
 2077              	.LVL250:
 2078 00c2 81B2     		uxth	r1, r0
 2079 00c4 02A8     		add	r0, sp, #8
 2080 00c6 FFF7FEFF 		bl	fifo_skip
 2081              	.LVL251:
 306:../../shields/Murata/src/alp.c ****       case ALP_OP_FORWARD: ;
 2082              		.loc 1 306 0
 2083 00ca A2E7     		b	.L184
 2084              	.L190:
 309:../../shields/Murata/src/alp.c ****         if(itf_id == ALP_ITF_ID_D7ASP) {
 2085              		.loc 1 309 0
 2086 00cc 0122     		movs	r2, #1
 2087 00ce 0DF10701 		add	r1, sp, #7
 2088 00d2 02A8     		add	r0, sp, #8
 2089 00d4 FFF7FEFF 		bl	fifo_pop
 2090              	.LVL252:
 310:../../shields/Murata/src/alp.c ****           fifo_skip(&fifo, 1); // skip QoS, dormant timeout
 2091              		.loc 1 310 0
 2092 00d8 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 2093 00dc D72B     		cmp	r3, #215
ARM GAS  /tmp/ccaG3DAV.s 			page 52


 2094 00de 98D1     		bne	.L184
 2095              	.LBB29:
 311:../../shields/Murata/src/alp.c ****           d7ap_addressee_ctrl_t addressee_ctrl;
 2096              		.loc 1 311 0
 2097 00e0 0121     		movs	r1, #1
 2098 00e2 02A8     		add	r0, sp, #8
 2099 00e4 FFF7FEFF 		bl	fifo_skip
 2100              	.LVL253:
 313:../../shields/Murata/src/alp.c ****           fifo_skip(&fifo, 2 + d7ap_addressee_id_length(addressee_ctrl.id_type)); // skip addressee
 2101              		.loc 1 313 0
 2102 00e8 0122     		movs	r2, #1
 2103 00ea 01A9     		add	r1, sp, #4
 2104 00ec 02A8     		add	r0, sp, #8
 2105 00ee FFF7FEFF 		bl	fifo_pop
 2106              	.LVL254:
 314:../../shields/Murata/src/alp.c ****           // TODO refactor to reuse same logic for parsing and response length counting
 2107              		.loc 1 314 0
 2108 00f2 9DF80430 		ldrb	r3, [sp, #4]	@ zero_extendqisi2
 2109 00f6 C3F30113 		ubfx	r3, r3, #4, #2
 2110              	.LVL255:
 2111              	.LBB30:
 2112              	.LBB31:
 291:../../shields/Murata/inc/d7ap.h ****   {
 2113              		.loc 2 291 0
 2114 00fa 032B     		cmp	r3, #3
 2115 00fc 07D8     		bhi	.L193
 2116 00fe DFE803F0 		tbb	[pc, r3]
 2117              	.L195:
 2118 0102 0F       		.byte	(.L200-.L195)/2
 2119 0103 0D       		.byte	(.L196-.L195)/2
 2120 0104 02       		.byte	(.L197-.L195)/2
 2121 0105 04       		.byte	(.L198-.L195)/2
 2122              		.p2align 1
 2123              	.L197:
 298:../../shields/Murata/inc/d7ap.h ****       case ID_TYPE_VID:
 2124              		.loc 2 298 0
 2125 0106 0821     		movs	r1, #8
 2126 0108 0BE0     		b	.L194
 2127              	.L198:
 300:../../shields/Murata/inc/d7ap.h ****       default:
 2128              		.loc 2 300 0
 2129 010a 0221     		movs	r1, #2
 2130 010c 09E0     		b	.L194
 2131              	.L193:
 2132              		.loc 2 302 0
 2133 010e 0F4B     		ldr	r3, .L203
 2134 0110 0F4A     		ldr	r2, .L203+4
 2135 0112 4FF49771 		mov	r1, #302
 2136 0116 0F48     		ldr	r0, .L203+8
 2137 0118 FFF7FEFF 		bl	__assert_func
 2138              	.LVL256:
 2139              	.L196:
 294:../../shields/Murata/inc/d7ap.h ****       case ID_TYPE_NBID:
 2140              		.loc 2 294 0
 2141 011c 0021     		movs	r1, #0
 2142 011e 00E0     		b	.L194
 2143              	.L200:
ARM GAS  /tmp/ccaG3DAV.s 			page 53


 296:../../shields/Murata/inc/d7ap.h ****       case ID_TYPE_UID:
 2144              		.loc 2 296 0
 2145 0120 0121     		movs	r1, #1
 2146              	.L194:
 2147              	.LVL257:
 2148              	.LBE31:
 2149              	.LBE30:
 314:../../shields/Murata/src/alp.c ****           // TODO refactor to reuse same logic for parsing and response length counting
 2150              		.loc 1 314 0
 2151 0122 0231     		adds	r1, r1, #2
 2152 0124 02A8     		add	r0, sp, #8
 2153 0126 FFF7FEFF 		bl	fifo_skip
 2154              	.LVL258:
 2155 012a 72E7     		b	.L184
 2156              	.L189:
 2157              	.LBE29:
 320:../../shields/Murata/src/alp.c ****         break;
 2158              		.loc 1 320 0
 2159 012c 0D21     		movs	r1, #13
 2160 012e 02A8     		add	r0, sp, #8
 2161 0130 FFF7FEFF 		bl	fifo_skip
 2162              	.LVL259:
 321:../../shields/Murata/src/alp.c ****       // TODO other operations
 2163              		.loc 1 321 0
 2164 0134 6DE7     		b	.L184
 2165              	.L185:
 325:../../shields/Murata/src/alp.c ****     }
 2166              		.loc 1 325 0
 2167 0136 054B     		ldr	r3, .L203
 2168 0138 074A     		ldr	r2, .L203+12
 2169 013a 40F24511 		movw	r1, #325
 2170 013e 0748     		ldr	r0, .L203+16
 2171 0140 FFF7FEFF 		bl	__assert_func
 2172              	.LVL260:
 2173              	.L202:
 2174              	.LBE28:
 2175              	.LBE27:
 331:../../shields/Murata/src/alp.c **** 
 2176              		.loc 1 331 0
 2177 0144 2046     		mov	r0, r4
 2178 0146 07B0     		add	sp, sp, #28
 2179              	.LCFI42:
 2180              		.cfi_def_cfa_offset 12
 2181              		@ sp needed
 2182 0148 30BD     		pop	{r4, r5, pc}
 2183              	.LVL261:
 2184              	.L204:
 2185 014a 00BF     		.align	2
 2186              	.L203:
 2187 014c 38000000 		.word	.LC4
 2188 0150 00000000 		.word	.LANCHOR2
 2189 0154 40000000 		.word	.LC5
 2190 0158 00000000 		.word	.LANCHOR14
 2191 015c 40000000 		.word	.LC1
 2192              		.cfi_endproc
 2193              	.LFE17:
 2195              		.section	.rodata.__func__.6035,"a",%progbits
ARM GAS  /tmp/ccaG3DAV.s 			page 54


 2196              		.align	2
 2197              		.set	.LANCHOR2,. + 0
 2200              	__func__.6035:
 2201 0000 64376170 		.ascii	"d7ap_addressee_id_length\000"
 2201      5F616464 
 2201      72657373 
 2201      65655F69 
 2201      645F6C65 
 2202              		.section	.rodata.__func__.6467,"a",%progbits
 2203              		.align	2
 2204              		.set	.LANCHOR3,. + 0
 2207              	__func__.6467:
 2208 0000 616C705F 		.ascii	"alp_append_length_operand\000"
 2208      61707065 
 2208      6E645F6C 
 2208      656E6774 
 2208      685F6F70 
 2209              		.section	.rodata.__func__.6477,"a",%progbits
 2210              		.align	2
 2211              		.set	.LANCHOR4,. + 0
 2214              	__func__.6477:
 2215 0000 616C705F 		.ascii	"alp_parse_file_offset_operand\000"
 2215      70617273 
 2215      655F6669 
 2215      6C655F6F 
 2215      66667365 
 2216              		.section	.rodata.__func__.6483,"a",%progbits
 2217              		.align	2
 2218              		.set	.LANCHOR6,. + 0
 2221              	__func__.6483:
 2222 0000 616C705F 		.ascii	"alp_parse_file_header_operand\000"
 2222      70617273 
 2222      655F6669 
 2222      6C655F68 
 2222      65616465 
 2223              		.section	.rodata.__func__.6489,"a",%progbits
 2224              		.align	2
 2225              		.set	.LANCHOR7,. + 0
 2228              	__func__.6489:
 2229 0000 616C705F 		.ascii	"alp_append_file_offset_operand\000"
 2229      61707065 
 2229      6E645F66 
 2229      696C655F 
 2229      6F666673 
 2230              		.section	.rodata.__func__.6496,"a",%progbits
 2231              		.align	2
 2232              		.set	.LANCHOR8,. + 0
 2235              	__func__.6496:
 2236 0000 616C705F 		.ascii	"alp_append_forward_action\000"
 2236      61707065 
 2236      6E645F66 
 2236      6F727761 
 2236      72645F61 
 2237              		.section	.rodata.__func__.6509,"a",%progbits
 2238              		.align	2
 2239              		.set	.LANCHOR9,. + 0
 2242              	__func__.6509:
ARM GAS  /tmp/ccaG3DAV.s 			page 55


 2243 0000 616C705F 		.ascii	"alp_append_return_file_data_action\000"
 2243      61707065 
 2243      6E645F72 
 2243      65747572 
 2243      6E5F6669 
 2244              		.section	.rodata.__func__.6531,"a",%progbits
 2245              		.align	2
 2246              		.set	.LANCHOR5,. + 0
 2249              	__func__.6531:
 2250 0000 70617273 		.ascii	"parse_operand_file_data\000"
 2250      655F6F70 
 2250      6572616E 
 2250      645F6669 
 2250      6C655F64 
 2251              		.section	.rodata.__func__.6546,"a",%progbits
 2252              		.align	2
 2253              		.set	.LANCHOR0,. + 0
 2256              	__func__.6546:
 2257 0000 70617273 		.ascii	"parse_op_return_tag\000"
 2257      655F6F70 
 2257      5F726574 
 2257      75726E5F 
 2257      74616700 
 2258              		.section	.rodata.__func__.6553,"a",%progbits
 2259              		.align	2
 2260              		.set	.LANCHOR1,. + 0
 2263              	__func__.6553:
 2264 0000 70617273 		.ascii	"parse_op_return_status\000"
 2264      655F6F70 
 2264      5F726574 
 2264      75726E5F 
 2264      73746174 
 2265              		.section	.rodata.__func__.6563,"a",%progbits
 2266              		.align	2
 2267              		.set	.LANCHOR10,. + 0
 2270              	__func__.6563:
 2271 0000 616C705F 		.ascii	"alp_parse_action\000"
 2271      70617273 
 2271      655F6163 
 2271      74696F6E 
 2271      00
 2272              		.section	.rodata.__func__.6590,"a",%progbits
 2273              		.align	2
 2274              		.set	.LANCHOR14,. + 0
 2277              	__func__.6590:
 2278 0000 616C705F 		.ascii	"alp_get_expected_response_length\000"
 2278      6765745F 
 2278      65787065 
 2278      63746564 
 2278      5F726573 
 2279              		.section	.rodata.__func__.6600,"a",%progbits
 2280              		.align	2
 2281              		.set	.LANCHOR11,. + 0
 2284              	__func__.6600:
 2285 0000 616C705F 		.ascii	"alp_append_tag_request_action\000"
 2285      61707065 
 2285      6E645F74 
ARM GAS  /tmp/ccaG3DAV.s 			page 56


 2285      61675F72 
 2285      65717565 
 2286              		.section	.rodata.__func__.6610,"a",%progbits
 2287              		.align	2
 2288              		.set	.LANCHOR12,. + 0
 2291              	__func__.6610:
 2292 0000 616C705F 		.ascii	"alp_append_read_file_data_action\000"
 2292      61707065 
 2292      6E645F72 
 2292      6561645F 
 2292      66696C65 
 2293              		.section	.rodata.__func__.6621,"a",%progbits
 2294              		.align	2
 2295              		.set	.LANCHOR13,. + 0
 2298              	__func__.6621:
 2299 0000 616C705F 		.ascii	"alp_append_write_file_data_action\000"
 2299      61707065 
 2299      6E645F77 
 2299      72697465 
 2299      5F66696C 
 2300              		.section	.rodata.alp_append_file_offset_operand.str1.4,"aMS",%progbits,1
 2301              		.align	2
 2302              	.LC12:
 2303 0000 6669666F 		.ascii	"fifo_put_byte(fifo, file_id) == oss7SUCCESS\000"
 2303      5F707574 
 2303      5F627974 
 2303      65286669 
 2303      666F2C20 
 2304              		.section	.rodata.alp_append_forward_action.str1.4,"aMS",%progbits,1
 2305              		.align	2
 2306              	.LC13:
 2307 0000 636F6E66 		.ascii	"config!=NULL\000"
 2307      6967213D 
 2307      4E554C4C 
 2307      00
 2308 000d 000000   		.space	3
 2309              	.LC14:
 2310 0010 6669666F 		.ascii	"fifo_put_byte(fifo, ALP_OP_FORWARD) == oss7SUCCESS\000"
 2310      5F707574 
 2310      5F627974 
 2310      65286669 
 2310      666F2C20 
 2311 0043 00       		.space	1
 2312              	.LC15:
 2313 0044 6669666F 		.ascii	"fifo_put_byte(fifo, itf_id) == oss7SUCCESS\000"
 2313      5F707574 
 2313      5F627974 
 2313      65286669 
 2313      666F2C20 
 2314 006f 00       		.space	1
 2315              	.LC16:
 2316 0070 6669666F 		.ascii	"fifo_put_byte(fifo, ((d7ap_session_config_t*)config"
 2316      5F707574 
 2316      5F627974 
 2316      65286669 
 2316      666F2C20 
 2317 00a3 292D3E71 		.ascii	")->qos.raw) == oss7SUCCESS\000"
ARM GAS  /tmp/ccaG3DAV.s 			page 57


 2317      6F732E72 
 2317      61772920 
 2317      3D3D206F 
 2317      73733753 
 2318 00be 0000     		.space	2
 2319              	.LC17:
 2320 00c0 6669666F 		.ascii	"fifo_put_byte(fifo, ((d7ap_session_config_t*)config"
 2320      5F707574 
 2320      5F627974 
 2320      65286669 
 2320      666F2C20 
 2321 00f3 292D3E64 		.ascii	")->dormant_timeout) == oss7SUCCESS\000"
 2321      6F726D61 
 2321      6E745F74 
 2321      696D656F 
 2321      75742920 
 2322 0116 0000     		.space	2
 2323              	.LC18:
 2324 0118 6669666F 		.ascii	"fifo_put_byte(fifo, ((d7ap_session_config_t*)config"
 2324      5F707574 
 2324      5F627974 
 2324      65286669 
 2324      666F2C20 
 2325 014b 292D3E61 		.ascii	")->addressee.ctrl.raw) == oss7SUCCESS\000"
 2325      64647265 
 2325      73736565 
 2325      2E637472 
 2325      6C2E7261 
 2326 0171 000000   		.space	3
 2327              	.LC19:
 2328 0174 6669666F 		.ascii	"fifo_put_byte(fifo, ((d7ap_session_config_t*)config"
 2328      5F707574 
 2328      5F627974 
 2328      65286669 
 2328      666F2C20 
 2329 01a7 292D3E61 		.ascii	")->addressee.access_class) == oss7SUCCESS\000"
 2329      64647265 
 2329      73736565 
 2329      2E616363 
 2329      6573735F 
 2330 01d1 000000   		.space	3
 2331              	.LC20:
 2332 01d4 6669666F 		.ascii	"fifo_put(fifo, ((d7ap_session_config_t*)config)->ad"
 2332      5F707574 
 2332      28666966 
 2332      6F2C2028 
 2332      28643761 
 2333 0207 64726573 		.ascii	"dressee.id, id_length) == oss7SUCCESS\000"
 2333      7365652E 
 2333      69642C20 
 2333      69645F6C 
 2333      656E6774 
 2334 022d 000000   		.space	3
 2335              	.LC21:
 2336 0230 6669666F 		.ascii	"fifo_put_byte(fifo, control_byte) == oss7SUCCESS\000"
 2336      5F707574 
 2336      5F627974 
ARM GAS  /tmp/ccaG3DAV.s 			page 58


 2336      65286669 
 2336      666F2C20 
 2337 0261 000000   		.space	3
 2338              	.LC22:
 2339 0264 6669666F 		.ascii	"fifo_put_byte(fifo, ((lorawan_session_config_abp_t*"
 2339      5F707574 
 2339      5F627974 
 2339      65286669 
 2339      666F2C20 
 2340 0297 29636F6E 		.ascii	")config)->application_port) == oss7SUCCESS\000"
 2340      66696729 
 2340      2D3E6170 
 2340      706C6963 
 2340      6174696F 
 2341 02c2 0000     		.space	2
 2342              	.LC23:
 2343 02c4 6669666F 		.ascii	"fifo_put(fifo, ((lorawan_session_config_abp_t*)conf"
 2343      5F707574 
 2343      28666966 
 2343      6F2C2028 
 2343      286C6F72 
 2344 02f7 6967292D 		.ascii	"ig)->nwkSKey, 16) == oss7SUCCESS\000"
 2344      3E6E776B 
 2344      534B6579 
 2344      2C203136 
 2344      29203D3D 
 2345              	.LC24:
 2346 0318 6669666F 		.ascii	"fifo_put(fifo, ((lorawan_session_config_abp_t*)conf"
 2346      5F707574 
 2346      28666966 
 2346      6F2C2028 
 2346      286C6F72 
 2347 034b 6967292D 		.ascii	"ig)->appSKey, 16) == oss7SUCCESS\000"
 2347      3E617070 
 2347      534B6579 
 2347      2C203136 
 2347      29203D3D 
 2348              	.LC25:
 2349 036c 6669666F 		.ascii	"fifo_put(fifo, (uint8_t*)&dev_addr, 4) == oss7SUCCE"
 2349      5F707574 
 2349      28666966 
 2349      6F2C2028 
 2349      75696E74 
 2350 039f 535300   		.ascii	"SS\000"
 2351 03a2 0000     		.space	2
 2352              	.LC26:
 2353 03a4 6669666F 		.ascii	"fifo_put(fifo, (uint8_t*)&network_id, 4) == oss7SUC"
 2353      5F707574 
 2353      28666966 
 2353      6F2C2028 
 2353      75696E74 
 2354 03d7 43455353 		.ascii	"CESS\000"
 2354      00
 2355              	.LC27:
 2356 03dc 6669666F 		.ascii	"fifo_put_byte(fifo, ((lorawan_session_config_otaa_t"
 2356      5F707574 
 2356      5F627974 
ARM GAS  /tmp/ccaG3DAV.s 			page 59


 2356      65286669 
 2356      666F2C20 
 2357 040f 2A29636F 		.ascii	"*)config)->application_port) == oss7SUCCESS\000"
 2357      6E666967 
 2357      292D3E61 
 2357      70706C69 
 2357      63617469 
 2358 043b 00       		.space	1
 2359              	.LC28:
 2360 043c 6669666F 		.ascii	"fifo_put(fifo, ((lorawan_session_config_otaa_t*)con"
 2360      5F707574 
 2360      28666966 
 2360      6F2C2028 
 2360      286C6F72 
 2361 046f 66696729 		.ascii	"fig)->devEUI, 8) == oss7SUCCESS\000"
 2361      2D3E6465 
 2361      76455549 
 2361      2C203829 
 2361      203D3D20 
 2362 048f 00       		.space	1
 2363              	.LC29:
 2364 0490 6669666F 		.ascii	"fifo_put(fifo, ((lorawan_session_config_otaa_t*)con"
 2364      5F707574 
 2364      28666966 
 2364      6F2C2028 
 2364      286C6F72 
 2365 04c3 66696729 		.ascii	"fig)->appEUI, 8) == oss7SUCCESS\000"
 2365      2D3E6170 
 2365      70455549 
 2365      2C203829 
 2365      203D3D20 
 2366 04e3 00       		.space	1
 2367              	.LC30:
 2368 04e4 6669666F 		.ascii	"fifo_put(fifo, ((lorawan_session_config_otaa_t*)con"
 2368      5F707574 
 2368      28666966 
 2368      6F2C2028 
 2368      286C6F72 
 2369 0517 66696729 		.ascii	"fig)->appKey, 16) == oss7SUCCESS\000"
 2369      2D3E6170 
 2369      704B6579 
 2369      2C203136 
 2369      29203D3D 
 2370              	.LC31:
 2371 0538 6669666F 		.ascii	"fifo_put(fifo, config, config_len) == oss7SUCCESS\000"
 2371      5F707574 
 2371      28666966 
 2371      6F2C2063 
 2371      6F6E6669 
 2372              		.section	.rodata.alp_append_length_operand.str1.4,"aMS",%progbits,1
 2373              		.align	2
 2374              	.LC7:
 2375 0000 6669666F 		.ascii	"fifo_put(fifo, (uint8_t*)&length, 1) == oss7SUCCESS"
 2375      5F707574 
 2375      28666966 
 2375      6F2C2028 
 2375      75696E74 
ARM GAS  /tmp/ccaG3DAV.s 			page 60


 2376 0033 00       		.ascii	"\000"
 2377              	.LC8:
 2378 0034 6669666F 		.ascii	"fifo_put(fifo, &byte, 1) == oss7SUCCESS\000"
 2378      5F707574 
 2378      28666966 
 2378      6F2C2026 
 2378      62797465 
 2379              	.LC9:
 2380 005c 6669666F 		.ascii	"fifo_put(fifo, (uint8_t*)&length + size, 1) == oss7"
 2380      5F707574 
 2380      28666966 
 2380      6F2C2028 
 2380      75696E74 
 2381 008f 53554343 		.ascii	"SUCCESS\000"
 2381      45535300 
 2382              		.section	.rodata.alp_append_return_file_data_action.str1.4,"aMS",%progbits,1
 2383              		.align	2
 2384              	.LC32:
 2385 0000 6669666F 		.ascii	"fifo_put_byte(fifo, ALP_OP_RETURN_FILE_DATA) == oss"
 2385      5F707574 
 2385      5F627974 
 2385      65286669 
 2385      666F2C20 
 2386 0033 37535543 		.ascii	"7SUCCESS\000"
 2386      43455353 
 2386      00
 2387              	.LC33:
 2388 003c 6669666F 		.ascii	"fifo_put(fifo, data, length) == oss7SUCCESS\000"
 2388      5F707574 
 2388      28666966 
 2388      6F2C2064 
 2388      6174612C 
 2389              		.section	.rodata.alp_append_tag_request_action.str1.4,"aMS",%progbits,1
 2390              		.align	2
 2391              	.LC35:
 2392 0000 6669666F 		.ascii	"fifo_put_byte(fifo, op) == oss7SUCCESS\000"
 2392      5F707574 
 2392      5F627974 
 2392      65286669 
 2392      666F2C20 
 2393 0027 00       		.space	1
 2394              	.LC36:
 2395 0028 6669666F 		.ascii	"fifo_put_byte(fifo, tag_id) == oss7SUCCESS\000"
 2395      5F707574 
 2395      5F627974 
 2395      65286669 
 2395      666F2C20 
 2396              		.section	.rodata.alp_parse_action.str1.4,"aMS",%progbits,1
 2397              		.align	2
 2398              	.LC34:
 2399 0000 6669666F 		.ascii	"fifo_pop(fifo, &op, 1) == oss7SUCCESS\000"
 2399      5F706F70 
 2399      28666966 
 2399      6F2C2026 
 2399      6F702C20 
 2400              		.section	.rodata.alp_parse_file_offset_operand.str1.4,"aMS",%progbits,1
 2401              		.align	2
ARM GAS  /tmp/ccaG3DAV.s 			page 61


 2402              	.LC10:
 2403 0000 65727220 		.ascii	"err == oss7SUCCESS\000"
 2403      3D3D206F 
 2403      73733753 
 2403      55434345 
 2403      535300
 2404              		.section	.rodata.parse_op_return_status.str1.4,"aMS",%progbits,1
 2405              		.align	2
 2406              	.LC2:
 2407 0000 62362026 		.ascii	"b6 && !b7\000"
 2407      26202162 
 2407      3700
 2408 000a 0000     		.space	2
 2409              	.LC3:
 2410 000c 6669666F 		.ascii	"fifo_pop(fifo, &itf_id, 1) == oss7SUCCESS\000"
 2410      5F706F70 
 2410      28666966 
 2410      6F2C2026 
 2410      6974665F 
 2411 0036 0000     		.space	2
 2412              	.LC4:
 2413 0038 66616C73 		.ascii	"false\000"
 2413      6500
 2414 003e 0000     		.space	2
 2415              	.LC5:
 2416 0040 2E2E2F2E 		.ascii	"../../shields/Murata/inc/d7ap.h\000"
 2416      2E2F7368 
 2416      69656C64 
 2416      732F4D75 
 2416      72617461 
 2417              	.LC6:
 2418 0060 6669666F 		.ascii	"fifo_pop(fifo, interface_status.addressee.id, addre"
 2418      5F706F70 
 2418      28666966 
 2418      6F2C2069 
 2418      6E746572 
 2419 0093 73736565 		.ascii	"ssee_len) == oss7SUCCESS\000"
 2419      5F6C656E 
 2419      29203D3D 
 2419      206F7373 
 2419      37535543 
 2420              		.section	.rodata.parse_op_return_tag.str1.4,"aMS",%progbits,1
 2421              		.align	2
 2422              	.LC0:
 2423 0000 6669666F 		.ascii	"fifo_pop(fifo, &action->tag_response.tag_id, 1) == "
 2423      5F706F70 
 2423      28666966 
 2423      6F2C2026 
 2423      61637469 
 2424 0033 6F737337 		.ascii	"oss7SUCCESS\000"
 2424      53554343 
 2424      45535300 
 2425 003f 00       		.space	1
 2426              	.LC1:
 2427 0040 2E2E2F2E 		.ascii	"../../shields/Murata/src/alp.c\000"
 2427      2E2F7368 
 2427      69656C64 
ARM GAS  /tmp/ccaG3DAV.s 			page 62


 2427      732F4D75 
 2427      72617461 
 2428              		.section	.rodata.parse_operand_file_data.str1.4,"aMS",%progbits,1
 2429              		.align	2
 2430              	.LC11:
 2431 0000 61637469 		.ascii	"action->file_data_operand.provided_data_length <= s"
 2431      6F6E2D3E 
 2431      66696C65 
 2431      5F646174 
 2431      615F6F70 
 2432 0033 697A656F 		.ascii	"izeof(action->file_data_operand.data)\000"
 2432      66286163 
 2432      74696F6E 
 2432      2D3E6669 
 2432      6C655F64 
 2433              		.text
 2434              	.Letext0:
 2435              		.file 3 "/usr/include/newlib/machine/_default_types.h"
 2436              		.file 4 "/usr/include/newlib/sys/lock.h"
 2437              		.file 5 "/usr/include/newlib/sys/_types.h"
 2438              		.file 6 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 2439              		.file 7 "/usr/include/newlib/sys/reent.h"
 2440              		.file 8 "/usr/include/newlib/stdlib.h"
 2441              		.file 9 "/usr/include/newlib/sys/_stdint.h"
 2442              		.file 10 "../../shields/Murata/inc/types.h"
 2443              		.file 11 "/usr/include/newlib/sys/errno.h"
 2444              		.file 12 "../../shields/Murata/inc/lorawan_stack.h"
 2445              		.file 13 "../../shields/Murata/inc/dae.h"
 2446              		.file 14 "../../shields/Murata/inc/fifo.h"
 2447              		.file 15 "../../shields/Murata/inc/alp.h"
 2448              		.file 16 "/usr/include/newlib/assert.h"
ARM GAS  /tmp/ccaG3DAV.s 			page 63


DEFINED SYMBOLS
                            *ABS*:0000000000000000 alp.c
     /tmp/ccaG3DAV.s:18     .text.parse_op_return_tag:0000000000000000 $t
     /tmp/ccaG3DAV.s:24     .text.parse_op_return_tag:0000000000000000 parse_op_return_tag
     /tmp/ccaG3DAV.s:61     .text.parse_op_return_tag:0000000000000020 $d
     /tmp/ccaG3DAV.s:68     .text.parse_op_return_status:0000000000000000 $t
     /tmp/ccaG3DAV.s:74     .text.parse_op_return_status:0000000000000000 parse_op_return_status
     /tmp/ccaG3DAV.s:246    .text.parse_op_return_status:00000000000000fc $d
     /tmp/ccaG3DAV.s:250    .text.parse_op_return_status:0000000000000100 $t
     /tmp/ccaG3DAV.s:321    .text.parse_op_return_status:000000000000015c $d
     /tmp/ccaG3DAV.s:333    .text.alp_get_operation:0000000000000000 $t
     /tmp/ccaG3DAV.s:340    .text.alp_get_operation:0000000000000000 alp_get_operation
     /tmp/ccaG3DAV.s:358    .text.alp_parse_length_operand:0000000000000000 $t
     /tmp/ccaG3DAV.s:365    .text.alp_parse_length_operand:0000000000000000 alp_parse_length_operand
     /tmp/ccaG3DAV.s:426    .text.alp_append_length_operand:0000000000000000 $t
     /tmp/ccaG3DAV.s:433    .text.alp_append_length_operand:0000000000000000 alp_append_length_operand
     /tmp/ccaG3DAV.s:557    .text.alp_append_length_operand:000000000000008c $d
     /tmp/ccaG3DAV.s:566    .text.alp_parse_file_offset_operand:0000000000000000 $t
     /tmp/ccaG3DAV.s:573    .text.alp_parse_file_offset_operand:0000000000000000 alp_parse_file_offset_operand
     /tmp/ccaG3DAV.s:633    .text.alp_parse_file_offset_operand:0000000000000038 $d
     /tmp/ccaG3DAV.s:640    .text.parse_operand_file_data:0000000000000000 $t
     /tmp/ccaG3DAV.s:646    .text.parse_operand_file_data:0000000000000000 parse_operand_file_data
     /tmp/ccaG3DAV.s:710    .text.parse_operand_file_data:0000000000000044 $d
     /tmp/ccaG3DAV.s:717    .text.parse_op_write_file_data:0000000000000000 $t
     /tmp/ccaG3DAV.s:723    .text.parse_op_write_file_data:0000000000000000 parse_op_write_file_data
     /tmp/ccaG3DAV.s:743    .text.parse_op_return_file_data:0000000000000000 $t
     /tmp/ccaG3DAV.s:749    .text.parse_op_return_file_data:0000000000000000 parse_op_return_file_data
     /tmp/ccaG3DAV.s:769    .text.alp_parse_file_header_operand:0000000000000000 $t
     /tmp/ccaG3DAV.s:776    .text.alp_parse_file_header_operand:0000000000000000 alp_parse_file_header_operand
     /tmp/ccaG3DAV.s:860    .text.alp_parse_file_header_operand:0000000000000064 $d
     /tmp/ccaG3DAV.s:867    .text.alp_append_file_offset_operand:0000000000000000 $t
     /tmp/ccaG3DAV.s:874    .text.alp_append_file_offset_operand:0000000000000000 alp_append_file_offset_operand
     /tmp/ccaG3DAV.s:912    .text.alp_append_file_offset_operand:0000000000000024 $d
     /tmp/ccaG3DAV.s:919    .text.alp_append_forward_action:0000000000000000 $t
     /tmp/ccaG3DAV.s:926    .text.alp_append_forward_action:0000000000000000 alp_append_forward_action
     /tmp/ccaG3DAV.s:1049   .text.alp_append_forward_action:0000000000000092 $d
     /tmp/ccaG3DAV.s:1054   .text.alp_append_forward_action:0000000000000096 $t
     /tmp/ccaG3DAV.s:1336   .text.alp_append_forward_action:0000000000000240 $d
     /tmp/ccaG3DAV.s:1364   .text.alp_append_return_file_data_action:0000000000000000 $t
     /tmp/ccaG3DAV.s:1371   .text.alp_append_return_file_data_action:0000000000000000 alp_append_return_file_data_action
     /tmp/ccaG3DAV.s:1449   .text.alp_append_return_file_data_action:0000000000000060 $d
     /tmp/ccaG3DAV.s:1458   .text.alp_parse_action:0000000000000000 $t
     /tmp/ccaG3DAV.s:1465   .text.alp_parse_action:0000000000000000 alp_parse_action
     /tmp/ccaG3DAV.s:1508   .text.alp_parse_action:0000000000000032 $d
     /tmp/ccaG3DAV.s:1541   .text.alp_parse_action:0000000000000052 $t
     /tmp/ccaG3DAV.s:1607   .text.alp_parse_action:0000000000000098 $d
     /tmp/ccaG3DAV.s:1615   .text.alp_append_tag_request_action:0000000000000000 $t
     /tmp/ccaG3DAV.s:1622   .text.alp_append_tag_request_action:0000000000000000 alp_append_tag_request_action
     /tmp/ccaG3DAV.s:1676   .text.alp_append_tag_request_action:0000000000000040 $d
     /tmp/ccaG3DAV.s:1684   .text.alp_append_read_file_data_action:0000000000000000 $t
     /tmp/ccaG3DAV.s:1691   .text.alp_append_read_file_data_action:0000000000000000 alp_append_read_file_data_action
     /tmp/ccaG3DAV.s:1751   .text.alp_append_read_file_data_action:000000000000004c $d
     /tmp/ccaG3DAV.s:1758   .text.alp_append_write_file_data_action:0000000000000000 $t
     /tmp/ccaG3DAV.s:1765   .text.alp_append_write_file_data_action:0000000000000000 alp_append_write_file_data_action
     /tmp/ccaG3DAV.s:1840   .text.alp_append_write_file_data_action:0000000000000064 $d
     /tmp/ccaG3DAV.s:1848   .text.alp_length_operand_coded_length:0000000000000000 $t
     /tmp/ccaG3DAV.s:1855   .text.alp_length_operand_coded_length:0000000000000000 alp_length_operand_coded_length
ARM GAS  /tmp/ccaG3DAV.s 			page 64


     /tmp/ccaG3DAV.s:1898   .text.alp_get_expected_response_length:0000000000000000 $t
     /tmp/ccaG3DAV.s:1905   .text.alp_get_expected_response_length:0000000000000000 alp_get_expected_response_length
     /tmp/ccaG3DAV.s:1956   .text.alp_get_expected_response_length:000000000000003a $d
     /tmp/ccaG3DAV.s:2008   .text.alp_get_expected_response_length:000000000000006e $t
     /tmp/ccaG3DAV.s:2118   .text.alp_get_expected_response_length:0000000000000102 $d
     /tmp/ccaG3DAV.s:2122   .text.alp_get_expected_response_length:0000000000000106 $t
     /tmp/ccaG3DAV.s:2187   .text.alp_get_expected_response_length:000000000000014c $d
     /tmp/ccaG3DAV.s:2196   .rodata.__func__.6035:0000000000000000 $d
     /tmp/ccaG3DAV.s:2200   .rodata.__func__.6035:0000000000000000 __func__.6035
     /tmp/ccaG3DAV.s:2203   .rodata.__func__.6467:0000000000000000 $d
     /tmp/ccaG3DAV.s:2207   .rodata.__func__.6467:0000000000000000 __func__.6467
     /tmp/ccaG3DAV.s:2210   .rodata.__func__.6477:0000000000000000 $d
     /tmp/ccaG3DAV.s:2214   .rodata.__func__.6477:0000000000000000 __func__.6477
     /tmp/ccaG3DAV.s:2217   .rodata.__func__.6483:0000000000000000 $d
     /tmp/ccaG3DAV.s:2221   .rodata.__func__.6483:0000000000000000 __func__.6483
     /tmp/ccaG3DAV.s:2224   .rodata.__func__.6489:0000000000000000 $d
     /tmp/ccaG3DAV.s:2228   .rodata.__func__.6489:0000000000000000 __func__.6489
     /tmp/ccaG3DAV.s:2231   .rodata.__func__.6496:0000000000000000 $d
     /tmp/ccaG3DAV.s:2235   .rodata.__func__.6496:0000000000000000 __func__.6496
     /tmp/ccaG3DAV.s:2238   .rodata.__func__.6509:0000000000000000 $d
     /tmp/ccaG3DAV.s:2242   .rodata.__func__.6509:0000000000000000 __func__.6509
     /tmp/ccaG3DAV.s:2245   .rodata.__func__.6531:0000000000000000 $d
     /tmp/ccaG3DAV.s:2249   .rodata.__func__.6531:0000000000000000 __func__.6531
     /tmp/ccaG3DAV.s:2252   .rodata.__func__.6546:0000000000000000 $d
     /tmp/ccaG3DAV.s:2256   .rodata.__func__.6546:0000000000000000 __func__.6546
     /tmp/ccaG3DAV.s:2259   .rodata.__func__.6553:0000000000000000 $d
     /tmp/ccaG3DAV.s:2263   .rodata.__func__.6553:0000000000000000 __func__.6553
     /tmp/ccaG3DAV.s:2266   .rodata.__func__.6563:0000000000000000 $d
     /tmp/ccaG3DAV.s:2270   .rodata.__func__.6563:0000000000000000 __func__.6563
     /tmp/ccaG3DAV.s:2273   .rodata.__func__.6590:0000000000000000 $d
     /tmp/ccaG3DAV.s:2277   .rodata.__func__.6590:0000000000000000 __func__.6590
     /tmp/ccaG3DAV.s:2280   .rodata.__func__.6600:0000000000000000 $d
     /tmp/ccaG3DAV.s:2284   .rodata.__func__.6600:0000000000000000 __func__.6600
     /tmp/ccaG3DAV.s:2287   .rodata.__func__.6610:0000000000000000 $d
     /tmp/ccaG3DAV.s:2291   .rodata.__func__.6610:0000000000000000 __func__.6610
     /tmp/ccaG3DAV.s:2294   .rodata.__func__.6621:0000000000000000 $d
     /tmp/ccaG3DAV.s:2298   .rodata.__func__.6621:0000000000000000 __func__.6621
     /tmp/ccaG3DAV.s:2301   .rodata.alp_append_file_offset_operand.str1.4:0000000000000000 $d
     /tmp/ccaG3DAV.s:2305   .rodata.alp_append_forward_action.str1.4:0000000000000000 $d
     /tmp/ccaG3DAV.s:2373   .rodata.alp_append_length_operand.str1.4:0000000000000000 $d
     /tmp/ccaG3DAV.s:2383   .rodata.alp_append_return_file_data_action.str1.4:0000000000000000 $d
     /tmp/ccaG3DAV.s:2390   .rodata.alp_append_tag_request_action.str1.4:0000000000000000 $d
     /tmp/ccaG3DAV.s:2397   .rodata.alp_parse_action.str1.4:0000000000000000 $d
     /tmp/ccaG3DAV.s:2401   .rodata.alp_parse_file_offset_operand.str1.4:0000000000000000 $d
     /tmp/ccaG3DAV.s:2405   .rodata.parse_op_return_status.str1.4:0000000000000000 $d
     /tmp/ccaG3DAV.s:2421   .rodata.parse_op_return_tag.str1.4:0000000000000000 $d
     /tmp/ccaG3DAV.s:2429   .rodata.parse_operand_file_data.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
fifo_pop
__assert_func
fifo_skip
fifo_put
fifo_put_byte
fifo_init_filled
fifo_get_size
ARM GAS  /tmp/ccaG3DAV.s 			page 65


